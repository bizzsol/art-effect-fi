<?php
bolt_decrypt( __FILE__ , 'z0BBsJ'); return 0;
##!!!##