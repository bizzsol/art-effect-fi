<?php
bolt_decrypt( __FILE__ , '7Q9Zcj'); return 0;
##!!!##