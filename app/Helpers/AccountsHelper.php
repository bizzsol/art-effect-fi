<?php
bolt_decrypt( __FILE__ , 'EbQP8k'); return 0;
##!!!##