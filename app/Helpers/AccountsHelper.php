<?php
bolt_decrypt( __FILE__ , 'Bko9Qb'); return 0;
##!!!##