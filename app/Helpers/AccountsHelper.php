<?php
bolt_decrypt( __FILE__ , '7bu1fS'); return 0;
##!!!##