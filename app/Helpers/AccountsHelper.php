<?php
bolt_decrypt( __FILE__ , 'laNDX4'); return 0;
##!!!##