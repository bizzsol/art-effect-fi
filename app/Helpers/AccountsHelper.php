<?php
bolt_decrypt( __FILE__ , 'wFvM3M'); return 0;
##!!!##Cgp1c2UgQXBwXE1vZGVsc1xGaXhlZEFzc2V0c1xGaXhlZEFzc2V0QmF0Y2hJdGVtVXNlcjsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXEFjY291bnRzXEFjY291bnREZWZhdWx0U2V0dGluZ3M7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xBY2NvdW50c1xVbnJlYWxpemVkQ3VycmVuY3lFdmVudFNldHRpbmc7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xBY2NvdW50c1xBY2NvdW50R3JvdXA7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xBY2NvdW50c1xDaGFydE9mQWNjb3VudDsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXEFjY291bnRzXENoZXF1ZVJlZ2lzdGVyOwp1c2UgQXBwXE1vZGVsc1xQbXNNb2RlbHNcQWNjb3VudHNcQ29tcGFueTsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXEFjY291bnRzXEZpc2NhbFllYXI7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xBY2NvdW50c1xQcm9maXRDZW50cmU7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xBY2NvdW50c1xDb3N0Q2VudHJlOwp1c2UgQXBwXE1vZGVsc1xQbXNNb2RlbHNcUHVyY2hhc2VcUHVyY2hhc2VPcmRlckVudHJ5OwoKZnVuY3Rpb24gZ2V0Q29zdENlbnRyZXMoJGxlZGdlciA9IGZhbHNlLCAkY29tcGFueV9pZCA9IDAsICRwZXJtaXNzaW9uID0gZmFsc2UsICRwcm9maXRfY2VudHJlX2lkID0gZmFsc2UpewogICAgJGNvbXBhbmllcyA9IENvbXBhbnk6OmhhcygncHJvZml0Q2VudHJlcy5jb3N0Q2VudHJlcycpCiAgICAtPndpdGgoWwogICAgICAgICdwcm9maXRDZW50cmVzLmNvc3RDZW50cmVzJyA9PiBmdW5jdGlvbigkcXVlcnkpIHVzZSgkcGVybWlzc2lvbil7CiAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZW4oJHBlcm1pc3Npb24sIGZ1bmN0aW9uKCRxdWVyeSl7CiAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZUluKCdpZCcsIGF1dGgoKS0+dXNlcigpLT5jb3N0Q2VudHJlcy0+cGx1Y2soJ2Nvc3RfY2VudHJlX2lkJyktPnRvQXJyYXkoKSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCiAgICAgICAgJ3Byb2ZpdENlbnRyZXMuY29zdENlbnRyZXMuY2hhcnRPZkFjY291bnQnCiAgICBdKQogICAgLT53aGVuKCRjb21wYW55X2lkID4gMCwgZnVuY3Rpb24oJHF1ZXJ5KSB1c2UoJGNvbXBhbnlfaWQpewogICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlKCdpZCcsICRjb21wYW55X2lkKTsKICAgIH0pCiAgICAtPmdldCgpOwoKICAgICRjb3N0Q2VudHJlcyA9ICgkY29tcGFueV9pZCA+IDAgPyAnJyA6ICc8b3B0aW9uIHNlbGVjdGVkIHZhbHVlPSIiIGRhdGEtY29tcGFueS1pZD0iIj5DaG9vc2UgQ29zdCBDZW50cmU8L29wdGlvbj4nKTsKICAgIGlmKGlzc2V0KCRjb21wYW5pZXNbMF0pKXsKICAgICAgICBmb3JlYWNoKCRjb21wYW5pZXMgYXMgJGtleSA9PiAkY29tcGFueSl7CiAgICAgICAgICAgICRjb3N0Q2VudHJlcyAuPSAnPG9wdGdyb3VwIGxhYmVsPSJbJy4kY29tcGFueS0+Y29kZS4nXSAnLiRjb21wYW55LT5uYW1lLiciPic7CiAgICAgICAgICAgIAogICAgICAgICAgICAkcHJvZml0Q2VudHJlcyA9ICRjb21wYW55LT5wcm9maXRDZW50cmVzOwogICAgICAgICAgICBpZigkcHJvZml0X2NlbnRyZV9pZCl7CiAgICAgICAgICAgICAgICAkcHJvZml0Q2VudHJlcyA9ICRjb21wYW55LT5wcm9maXRDZW50cmVzLT53aGVyZSgnaWQnLCAkcHJvZml0X2NlbnRyZV9pZCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKCRwcm9maXRDZW50cmVzLT5jb3VudCgpID4gMCl7CiAgICAgICAgICAgICAgICBmb3JlYWNoKCRwcm9maXRDZW50cmVzLT5zb3J0QnkoJ2NvZGUnKSBhcyAka2V5ID0+ICRwcm9maXRDZW50cmUpewogICAgICAgICAgICAgICAgICAgIGlmKCRwcm9maXRDZW50cmUtPmNvc3RDZW50cmVzLT5jb3VudCgpID4gMCl7CiAgICAgICAgICAgICAgICAgICAgICAgICRjb3N0Q2VudHJlcyAuPSAnPG9wdGdyb3VwIGxhYmVsPSImbmJzcDsmbmJzcDtbJy4kcHJvZml0Q2VudHJlLT5jb2RlLiddICcuJHByb2ZpdENlbnRyZS0+bmFtZS4nIj4nOwogICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoKCRwcm9maXRDZW50cmUtPmNvc3RDZW50cmVzLT5zb3J0QnkoJ2NvZGUnKSBhcyAka2V5ID0+ICRjb3N0Q2VudHJlKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzaG93ID0gKCRsZWRnZXIgPyAoaXNzZXQoJGNvc3RDZW50cmUtPmNoYXJ0T2ZBY2NvdW50LT5pZCkgPyB0cnVlIDogZmFsc2UpIDogdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkc2hvdyl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvc3RDZW50cmVzIC49ICc8b3B0aW9uIHZhbHVlPSInLiRjb3N0Q2VudHJlLT5pZC4nIiAgZGF0YS1jb21wYW55LWlkPSInLiRjb3N0Q2VudHJlLT5jb21wYW55X2lkLiciPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwO1snLiRjb3N0Q2VudHJlLT5jb2RlLiddICcuJGNvc3RDZW50cmUtPm5hbWUuJyAnLigkY29zdENlbnRyZS0+aXNfcHJvZml0X2NlbnRyZSA9PSAxID8gJyhCVSknIDogJycpLic8L29wdGlvbj4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICRjb3N0Q2VudHJlcyAuPSAnPC9vcHRncm91cD4nOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgJGNvc3RDZW50cmVzIC49ICc8L29wdGdyb3VwPic7CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiAkY29zdENlbnRyZXM7Cn0KCmZ1bmN0aW9uIGFjY291bnREZWZhdWx0U2V0dGluZ3MoKXsKICAgICRzZXR0aW5ncyA9IEFjY291bnREZWZhdWx0U2V0dGluZ3M6OmZpbmQoMSk7CiAgICAkYXJyYXkgPSBcU2NoZW1hOjpnZXRDb2x1bW5MaXN0aW5nKCdhY2NvdW50X2RlZmF1bHRfc2V0dGluZ3MnKTsKICAgICRkYXRhID0gW107CiAgICBmb3JlYWNoKCRhcnJheSBhcyAka2V5ID0+ICR2YWx1ZSl7CiAgICAgICAgaWYoIWluX2FycmF5KCR2YWx1ZSwgWydpZCcsICdjcmVhdGVkX2J5JywgJ3VwZGF0ZWRfYnknLCAnY3JlYXRlZF9hdCcsICd1cGRhdGVkX2F0J10pKXsKICAgICAgICAgICAgJGRhdGFbJHZhbHVlXSA9IGlzc2V0KCRzZXR0aW5ncy0+JHZhbHVlKSA/ICRzZXR0aW5ncy0+JHZhbHVlIDogMDsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gJGRhdGE7Cn0KCmZ1bmN0aW9uIHVucmVhbGl6ZWRDdXJyZW5jeUV2ZW50U2V0dGluZ3MoKXsKICAgICRzZXR0aW5ncyA9IFVucmVhbGl6ZWRDdXJyZW5jeUV2ZW50U2V0dGluZzo6ZmluZCgxKTsKICAgICRhcnJheSA9IFxTY2hlbWE6OmdldENvbHVtbkxpc3RpbmcoJ3VucmVhbGl6ZWRfY3VycmVuY3lfZXZlbnRfc2V0dGluZ3MnKTsKICAgICRkYXRhID0gW107CiAgICBmb3JlYWNoKCRhcnJheSBhcyAka2V5ID0+ICR2YWx1ZSl7CiAgICAgICAgJGRhdGFbJHZhbHVlXSA9IGluX2FycmF5KCR2YWx1ZSwgWydhc3NldF9sZWRnZXJzJywgJ2xpYWJpbGl0eV9sZWRnZXJzJ10pID8ganNvbl9kZWNvZGUoJHNldHRpbmdzLT4kdmFsdWUsIHRydWUpIDogJHNldHRpbmdzLT4kdmFsdWU7CiAgICB9CiAgICByZXR1cm4gJGRhdGE7Cn0KCmZ1bmN0aW9uIGdldEFsbEdyb3VwQW5kTGVkZ2VycygkZW50cnlfdHlwZV9pZCA9IGZhbHNlLCAkdXNlciA9IGZhbHNlLCAkY2xhc3NlcyA9IFtdLCAkY29tcGFuaWVzID0gZmFsc2UpewogICAgcmV0dXJuIFsKICAgICAgICAnZ3JvdXBzJyA9PiBBY2NvdW50R3JvdXA6OndpdGgoWwogICAgICAgICAgICAncGFyZW50JywKICAgICAgICAgICAgJ2FjY291bnRDbGFzcycsCiAgICAgICAgICAgICdjaGFydE9mQWNjb3VudHMnCiAgICAgICAgXSkKICAgICAgICAtPndoZW4oaXNzZXQoJGNsYXNzZXNbMF0pLCBmdW5jdGlvbigkcXVlcnkpIHVzZSgkY2xhc3Nlcyl7CiAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlSW4oJ2FjY291bnRfY2xhc3NfaWQnLCAkY2xhc3Nlcyk7CiAgICAgICAgfSkKICAgICAgICAtPmdldCgpLAogICAgICAgICdhY2NvdW50cycgPT4gQ2hhcnRPZkFjY291bnQ6OndpdGgoWwogICAgICAgICAgICAnZXhjaGFuZ2VSYXRlLmN1cnJlbmN5JywKICAgICAgICAgICAgJ2NvbXBhbmllcy5jb21wYW55JywKICAgICAgICAgICAgJ2VudHJ5VHlwZXMnLAogICAgICAgICAgICAndXNlcnMnCiAgICAgICAgXSkKICAgICAgICAtPndoZW4oJGVudHJ5X3R5cGVfaWQsIGZ1bmN0aW9uKCRxdWVyeSkgdXNlKCRlbnRyeV90eXBlX2lkKXsKICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmVIYXMoJ2VudHJ5VHlwZXMnLCBmdW5jdGlvbigkcXVlcnkpIHVzZSgkZW50cnlfdHlwZV9pZCl7CiAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnZW50cnlfdHlwZV9pZCcsICRlbnRyeV90eXBlX2lkKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSkKICAgICAgICAtPndoZW4oJHVzZXIsIGZ1bmN0aW9uKCRxdWVyeSl7CiAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlSGFzKCdjb21wYW5pZXMnLCBmdW5jdGlvbigkcXVlcnkpewogICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmVJbignY29tcGFueV9pZCcsIGF1dGgoKS0+dXNlcigpLT5jb21wYW5pZXMtPnBsdWNrKCdjb21wYW55X2lkJyktPnRvQXJyYXkoKSk7CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC0+d2hlcmVIYXMoJ3VzZXJzJywgZnVuY3Rpb24oJHF1ZXJ5KXsKICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlKCd1c2VyX2lkJywgYXV0aCgpLT51c2VyKCktPmlkKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSkKICAgICAgICAtPndoZW4oJGNvbXBhbmllcywgZnVuY3Rpb24oJHF1ZXJ5KSB1c2UoJGNvbXBhbmllcyl7CiAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlSGFzKCdjb21wYW5pZXMnLCBmdW5jdGlvbigkcXVlcnkpIHVzZSgkY29tcGFuaWVzKXsKICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlSW4oJ2NvbXBhbnlfaWQnLCAkY29tcGFuaWVzKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSkKICAgICAgICAtPmdldCgpLAogICAgXTsKfQoKZnVuY3Rpb24gY29hTGV2ZWxzKCRncm91cHMsICRsZXZlbHMgPSAtMiwgJHN0ZXAgPSAwLCAkYWxsID0gW10pewogICAgaWYoJHN0ZXAgPT0gMCl7CiAgICAgICAgJGdyb3VwcyA9ICRhbGxbJ2dyb3VwcyddLT53aGVyZSgncGFyZW50X2lkJywgMCktPnNvcnRCeSgnY29kZScpOwogICAgfQogICAgCiAgICBpZigkZ3JvdXBzLT5jb3VudCgpID4gMCl7CiAgICAgICAgZm9yZWFjaCAoJGdyb3VwcyBhcyAka2V5ID0+ICRncm91cCkgewogICAgICAgICAgICAkY2hpbGRyZW5Hcm91cHMgPSAkYWxsWydncm91cHMnXS0+d2hlcmUoJ3BhcmVudF9pZCcsICRncm91cC0+aWQpOwogICAgICAgICAgICBpZigkY2hpbGRyZW5Hcm91cHMtPmNvdW50KCkgPiAwKXsKICAgICAgICAgICAgICAgIHJldHVybiBjb2FMZXZlbHMoJGNoaWxkcmVuR3JvdXBzLCAkbGV2ZWxzKzEsICRzdGVwKzEsICRhbGwpOwogICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICRsZXZlbHMrKzsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gJGxldmVsczsKfQoKZnVuY3Rpb24gYWNjb3VudEdyb3VwcygkZ3JvdXBzID0gMCwgJHN0ZXAgPSAwLCAkYWN0aW9ucyA9IHRydWUsICRsZXZlbCA9IDEsICRhbGwgPSBbXSl7CiAgICBpZigkc3RlcCA9PSAwKXsKICAgICAgICAkZ3JvdXBzID0gJGFsbFsnZ3JvdXBzJ10tPndoZXJlKCdwYXJlbnRfaWQnLCAwKS0+c29ydEJ5KCdjb2RlJyk7CiAgICB9CgogICAgJGRhdGEgPSAnJzsKICAgIGlmKCRncm91cHMtPmNvdW50KCkgPiAwKXsKICAgICAgICBmb3JlYWNoICgkZ3JvdXBzIGFzICRrZXkgPT4gJGdyb3VwKSB7CiAgICAgICAgICAgIGlmKCRsZXZlbCA+PSAkc3RlcCl7CiAgICAgICAgICAgICAgICAkY2hpbGRyZW5Hcm91cHMgPSAkYWxsWydncm91cHMnXS0+d2hlcmUoJ3BhcmVudF9pZCcsICRncm91cC0+aWQpLT5zb3J0QnkoJ2NvZGUnKTsKICAgICAgICAgICAgICAgICRhY2NvdW50cyA9ICRhbGxbJ2FjY291bnRzJ10tPndoZXJlKCdhY2NvdW50X2dyb3VwX2lkJywgJGdyb3VwLT5pZCktPnNvcnRCeSgnY29kZScpOwogICAgICAgICAgICAgICAgJGRlbGV0ZSA9ICgoJGNoaWxkcmVuR3JvdXBzLT5jb3VudCgpID4gMCB8fCAkYWNjb3VudHMtPmNvdW50KCkgPiAwKSA/IGZhbHNlIDogdHJ1ZSk7CiAgICAgICAgICAgICAgICAkYXBwcm92YWwgPSB2aWV3KCdhY2NvdW50aW5nLmJhY2tlbmQucGFnZXMuYXBwcm92YWwnLFsnb2JqZWN0JyA9PiAkZ3JvdXAsICd0YWJsZScgPT4gJ2FjY291bnRfZ3JvdXBzJ10pLT5yZW5kZXIoKTsKICAgICAgICAgICAgICAgIGlmKGlzc2V0KCRncm91cC0+cGFyZW50LT5pZCkgJiYgJGdyb3VwLT5wYXJlbnQtPmlzX2FwcHJvdmVkICE9ICdhcHByb3ZlZCcpewogICAgICAgICAgICAgICAgICAgICRhcHByb3ZhbCA9ICcnOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmKCRjaGlsZHJlbkdyb3Vwcy0+Y291bnQoKSA+IDAgfHwgJGFjY291bnRzLT5jb3VudCgpID4gMCl7CiAgICAgICAgICAgICAgICAgICAgJGRhdGEgLj0gJzx0ciBjbGFzcz0iZ3JvdXAtJy4kZ3JvdXAtPmlkLicgbGV2ZWxzIGxldmVsLScuKCRzdGVwKzEpLicgY29hIiBkYXRhLWNvZGU9IicuJGdyb3VwLT5jb2RlLiciIGRhdGEtbmFtZT0iJy4kZ3JvdXAtPm5hbWUuJyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJwbC0nLnNwYWNlcygkc3RlcCkuJyI+PHN0cm9uZz4nLiRncm91cC0+Y29kZS4nPC9zdHJvbmc+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InBsLScuc3BhY2VzKCRzdGVwKS4nIj48c3Ryb25nPicuJGdyb3VwLT5uYW1lLic8L3N0cm9uZz48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1jZW50ZXIiIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXIiPjxzdHJvbmc+R3JvdXA8L3N0cm9uZz48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1jZW50ZXIiIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXIiPjxzdHJvbmc+Jy4kZ3JvdXAtPmFjY291bnRDbGFzcy0+bmFtZS4nPC9zdHJvbmc+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtY2VudGVyIiBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyIj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1jZW50ZXIiIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXIiPicudmlldygnYWNjb3VudGluZy5iYWNrZW5kLnBhZ2VzLmFwcHJvdmFsLXN0YWdlJyxbJ29iamVjdCcgPT4gJGdyb3VwXSktPnJlbmRlcigpLic8L3RkPic7CiAgICAgICAgICAgICAgICAgICAgaWYoJGFjdGlvbnMpewogICAgICAgICAgICAgICAgICAgICAgICAkZGF0YSAuPSAnPHRkIGNsYXNzPSJhY3Rpb24tdGQgdGV4dC1jZW50ZXIiIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXIiPic7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGF1dGgoKS0+dXNlcigpLT5jYW4oJ2FjY291bnQtZ3JvdXBzLWVkaXQnKSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZGF0YSAuPSAnPGEgY2xhc3M9ImJ0biBidG4teHMgYnRuLXByaW1hcnkiIGhyZWY9IicudXJsKCdhY2NvdW50aW5nL2FjY291bnQtZ3JvdXBzLycuJGdyb3VwLT5pZC4nL2VkaXQnKS4nIj48aSBjbGFzcz0ibGEgbGEtZWRpdCI+PC9pPjwvYT4mbmJzcDsnOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGRlbGV0ZSAmJiBhdXRoKCktPnVzZXIoKS0+Y2FuKCdhY2NvdW50LWdyb3Vwcy1kZWxldGUnKSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZGF0YSAuPSAnPGEgY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciIgb25jbGljaz0iZGVsZXRlTWUoJCh0aGlzKSkiIGRhdGEtc3JjPSInLnJvdXRlKCdhY2NvdW50aW5nLmFjY291bnQtZ3JvdXBzLmRlc3Ryb3knLCAkZ3JvdXAtPmlkKS4nIiBkYXRhLXJvdy1jbGFzcz0iZ3JvdXAtJy4kZ3JvdXAtPmlkLiciPjxpIGNsYXNzPSJsYSBsYS10cmFzaCI+PC9pPjwvYT4mbmJzcDsnOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICRkYXRhIC49ICRhcHByb3ZhbC4nICAgICAgPC90ZD4nOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJGRhdGEgLj0gJzwvdHI+JzsKCiAgICAgICAgICAgICAgICAgICAgaWYoJGFjY291bnRzLT5jb3VudCgpID4gMCl7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2goJGFjY291bnRzIGFzICRrZXkgPT4gJGFjY291bnQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFwcHJvdmFsID0gKCRncm91cC0+aXNfYXBwcm92ZWQgPT0gJ2FwcHJvdmVkJyA/IHZpZXcoJ2FjY291bnRpbmcuYmFja2VuZC5wYWdlcy5hcHByb3ZhbCcsWydvYmplY3QnID0+ICRhY2NvdW50LCAndGFibGUnID0+ICdjaGFydF9vZl9hY2NvdW50cyddKS0+cmVuZGVyKCkgOiAnJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZGF0YSAuPSAnPHRyIGNsYXNzPSJhY2NvdW50LScuJGFjY291bnQtPmlkLicgbGV2ZWxzIGxldmVsLScuKCRzdGVwKzEpLicgY29hIiBkYXRhLWNvZGU9IicuJGFjY291bnQtPmNvZGUuJyIgZGF0YS1uYW1lPSInLiRhY2NvdW50LT5uYW1lLiciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJwbC0nLnNwYWNlcygkc3RlcCwgMSkuJyI+Jy4kYWNjb3VudC0+Y29kZS4nPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0icGwtJy5zcGFjZXMoJHN0ZXAsIDEpLiciPicuJGFjY291bnQtPm5hbWUuJzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtY2VudGVyIiBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyIj5MZWRnZXI8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ0ZXh0LWNlbnRlciIgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlciI+PHN0cm9uZz4nLiRncm91cC0+YWNjb3VudENsYXNzLT5uYW1lLic8L3N0cm9uZz48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ0ZXh0LWNlbnRlciIgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlciI+PHN0cm9uZz4nLiRhY2NvdW50LT5jb21wYW5pZXMtPnBsdWNrKCdjb21wYW55LmNvZGUnKS0+aW1wbG9kZSgnLCAnKS4nPC9zdHJvbmc+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1jZW50ZXIiIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXIiPicudmlldygnYWNjb3VudGluZy5iYWNrZW5kLnBhZ2VzLmFwcHJvdmFsLXN0YWdlJyxbJ29iamVjdCcgPT4gJGFjY291bnRdKS0+cmVuZGVyKCkuJzwvdGQ+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRhY3Rpb25zKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZGF0YSAuPSAnPHRkIGNsYXNzPSJhY3Rpb24tdGQgdGV4dC1jZW50ZXIiIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXIiPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoYXV0aCgpLT51c2VyKCktPmNhbignc3ViLWxlZGdlcnMnKSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRkYXRhIC49ICc8YSBjbGFzcz0iYnRuIGJ0bi14cyBidG4tc3VjY2VzcyIgaHJlZj0iJy51cmwoJ2FjY291bnRpbmcvc3ViLWxlZGdlcnMvJy4kYWNjb3VudC0+aWQpLiciPjxpIGNsYXNzPSJsYXMgbGEtcHJvamVjdC1kaWFncmFtIj48L2k+PC9hPiZuYnNwOyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihhdXRoKCktPnVzZXIoKS0+Y2FuKCdjaGFydC1vZi1hY2NvdW50cy1lZGl0JykpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZGF0YSAuPSAnPGEgY2xhc3M9ImJ0biBidG4teHMgYnRuLXByaW1hcnkiIGhyZWY9IicudXJsKCdhY2NvdW50aW5nL2NoYXJ0LW9mLWFjY291bnRzLycuJGFjY291bnQtPmlkLicvZWRpdCcpLiciPjxpIGNsYXNzPSJsYSBsYS1lZGl0Ij48L2k+PC9hPiZuYnNwOyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGF1dGgoKS0+dXNlcigpLT5jYW4oJ2NoYXJ0LW9mLWFjY291bnRzLWRlbGV0ZScpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGRhdGEgLj0gJzxhIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1kYW5nZXIiIG9uY2xpY2s9ImRlbGV0ZU1lKCQodGhpcykpIiBkYXRhLXNyYz0iJy5yb3V0ZSgnYWNjb3VudGluZy5jaGFydC1vZi1hY2NvdW50cy5kZXN0cm95JywgJGFjY291bnQtPmlkKS4nIiBkYXRhLXJvdy1jbGFzcz0iYWNjb3VudC0nLiRhY2NvdW50LT5pZC4nIj48aSBjbGFzcz0ibGEgbGEtdHJhc2giPjwvaT48L2E+Jm5ic3A7JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZGF0YSAuPSAkYXBwcm92YWwuJyAgPC90ZD4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZGF0YSAuPSAnPC90cj4nOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZigkY2hpbGRyZW5Hcm91cHMtPmNvdW50KCkgPiAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgJGRhdGEgLj0gYWNjb3VudEdyb3VwcygkY2hpbGRyZW5Hcm91cHMsICRzdGVwKzEsICRhY3Rpb25zLCAkbGV2ZWwsICRhbGwpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gJGRhdGE7Cn0KCmZ1bmN0aW9uIGFjY291bnRHcm91cFRyZWUoJGdyb3VwcyA9IDAsICRzdGVwID0gMCwgJGFjdGlvbnMgPSB0cnVlLCAkbGV2ZWwgPSAxLCAkYWxsID0gW10pewogICAgaWYoJHN0ZXAgPT0gMCl7CiAgICAgICAgJGdyb3VwcyA9ICRhbGxbJ2dyb3VwcyddLT53aGVyZSgncGFyZW50X2lkJywgMCktPnNvcnRCeSgnY29kZScpOwogICAgfQoKICAgICRkYXRhID0gJyc7CiAgICBpZigkZ3JvdXBzLT5jb3VudCgpID4gMCl7CiAgICAgICAgZm9yZWFjaCAoJGdyb3VwcyBhcyAka2V5ID0+ICRncm91cCkgewogICAgICAgICAgICBpZigkbGV2ZWwgPj0gJHN0ZXApewogICAgICAgICAgICAgICAgJGNoaWxkcmVuR3JvdXBzID0gJGFsbFsnZ3JvdXBzJ10tPndoZXJlKCdwYXJlbnRfaWQnLCAkZ3JvdXAtPmlkKS0+c29ydEJ5KCdjb2RlJyk7CiAgICAgICAgICAgICAgICAkYWNjb3VudHMgPSAkYWxsWydhY2NvdW50cyddLT53aGVyZSgnYWNjb3VudF9ncm91cF9pZCcsICRncm91cC0+aWQpLT5zb3J0QnkoJ2NvZGUnKTsKICAgICAgICAgICAgICAgICRvcHRpb25zID0gIiI7CiAgICAgICAgICAgICAgICAkZGVsZXRlID0gKCgkY2hpbGRyZW5Hcm91cHMtPmNvdW50KCkgPiAwIHx8ICRhY2NvdW50cy0+Y291bnQoKSA+IDApID8gZmFsc2UgOiB0cnVlKTsKICAgICAgICAgICAgICAgICRhcHByb3ZhbCA9IHZpZXcoJ2FjY291bnRpbmcuYmFja2VuZC5wYWdlcy5hcHByb3ZhbCcsWydvYmplY3QnID0+ICRncm91cCwgJ3RhYmxlJyA9PiAnYWNjb3VudF9ncm91cHMnXSktPnJlbmRlcigpOwogICAgICAgICAgICAgICAgaWYoaXNzZXQoJGdyb3VwLT5wYXJlbnQtPmlkKSAmJiAkZ3JvdXAtPnBhcmVudC0+aXNfYXBwcm92ZWQgIT0gJ2FwcHJvdmVkJyl7CiAgICAgICAgICAgICAgICAgICAgJGFwcHJvdmFsID0gJyc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmKCRjaGlsZHJlbkdyb3Vwcy0+Y291bnQoKSA+IDAgfHwgJGFjY291bnRzLT5jb3VudCgpID4gMCl7CiAgICAgICAgICAgICAgICAgICAgJGRhdGEgLj0gJzxsaT5bJy4kZ3JvdXAtPmNvZGUuJ10gJy4kZ3JvdXAtPm5hbWU7CgogICAgICAgICAgICAgICAgICAgIGlmKCRhY2NvdW50cy0+Y291bnQoKSA+IDApewogICAgICAgICAgICAgICAgICAgICAgICAkZGF0YSAuPSAnPHVsPic7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2goJGFjY291bnRzIGFzICRrZXkgPT4gJGFjY291bnQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFwcHJvdmFsID0gKCRncm91cC0+aXNfYXBwcm92ZWQgPT0gJ2FwcHJvdmVkJyA/IHZpZXcoJ2FjY291bnRpbmcuYmFja2VuZC5wYWdlcy5hcHByb3ZhbCcsWydvYmplY3QnID0+ICRhY2NvdW50LCAndGFibGUnID0+ICdjaGFydF9vZl9hY2NvdW50cyddKS0+cmVuZGVyKCkgOiAnJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZGF0YSAuPSAnPGxpPlsnLiRhY2NvdW50LT5jb2RlLiddICcuJGFjY291bnQtPm5hbWUuJzwvbGk+JzsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAkZGF0YSAuPSAnPC91bD4nOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYoJGNoaWxkcmVuR3JvdXBzLT5jb3VudCgpID4gMCl7CiAgICAgICAgICAgICAgICAgICAgICAgICRkYXRhIC49ICc8dWw+JzsKICAgICAgICAgICAgICAgICAgICAgICAgJGRhdGEgLj0gYWNjb3VudEdyb3VwVHJlZSgkY2hpbGRyZW5Hcm91cHMsICRzdGVwKzEsICRhY3Rpb25zLCAkbGV2ZWwsICRhbGwpOwogICAgICAgICAgICAgICAgICAgICAgICAkZGF0YSAuPSAnPC91bD4nOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgJGRhdGEgLj0gJzwvbGk+JzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gJGRhdGE7Cn0KCmZ1bmN0aW9uIGFjY291bnRHcm91cE9wdGlvbnMoJGdyb3VwcywgJGNob3NlbiA9IDAsICRzdGVwID0gMCwgJGFsbCA9IFtdKXsKICAgIGlmKCRzdGVwID09IDApewogICAgICAgICRncm91cHMgPSAkYWxsWydncm91cHMnXS0+d2hlcmUoJ3BhcmVudF9pZCcsIDApLT5zb3J0QnkoJ2NvZGUnKTsKICAgIH0KCiAgICAkZGF0YSA9ICcnOwogICAgaWYoJGdyb3Vwcy0+Y291bnQoKSA+IDApewogICAgICAgIGZvcmVhY2ggKCRncm91cHMgYXMgJGtleSA9PiAkZ3JvdXApIHsKICAgICAgICAgICAgJGRhdGEgLj0gICAgJzxvcHRpb24gdmFsdWU9IicuJGdyb3VwLT5pZC4nIiAnLigkY2hvc2VuID09ICRncm91cC0+aWQgPyAnc2VsZWN0ZWQnIDogJycpLic+Jy5zcGFjZXMoJHN0ZXAsIDAsIGZhbHNlKS4nWycuJGdyb3VwLT5jb2RlLiddICcuJGdyb3VwLT5uYW1lLic8L29wdGlvbj4nOwoKICAgICAgICAgICAgJGNoaWxkcmVuR3JvdXBzID0gJGFsbFsnZ3JvdXBzJ10tPndoZXJlKCdwYXJlbnRfaWQnLCAkZ3JvdXAtPmlkKTsKICAgICAgICAgICAgaWYoJGNoaWxkcmVuR3JvdXBzLT5jb3VudCgpID4gMCl7CiAgICAgICAgICAgICAgICAkZGF0YSAuPSBhY2NvdW50R3JvdXBPcHRpb25zKCRjaGlsZHJlbkdyb3VwcywgJGNob3NlbiwgJHN0ZXArMSwgJGFsbCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgcmV0dXJuICRkYXRhOwp9CgpmdW5jdGlvbiBnZXRMZWRnZXJCYWxhbmNlcygkYWxsLCAkY29tcGFueV9pZCwgJGZpc2NhbF95ZWFyX2lkID0gZmFsc2UsICRjaGFydF9vZl9hY2NvdW50X2lkID0gZmFsc2UpewogICAgaWYoISRmaXNjYWxfeWVhcl9pZCl7CiAgICAgICAgJGZpc2NhbF95ZWFyX2lkID0gZ2V0QWN0aXZlRmlzY2FsWWVhcigkY29tcGFueV9pZCktPmlkOwogICAgfQoKICAgICRkZWJpdEVudHJ5SXRlbXMgPSBEQjo6dGFibGUoJ2VudHJ5X2l0ZW1zJykKICAgIC0+am9pbignZW50cmllcycsICdlbnRyaWVzLmlkJywgJz0nLCAnZW50cnlfaXRlbXMuZW50cnlfaWQnKQogICAgLT5qb2luKCdjb3N0X2NlbnRyZXMnLCAnY29zdF9jZW50cmVzLmlkJywgJz0nLCAnZW50cnlfaXRlbXMuY29zdF9jZW50cmVfaWQnKQogICAgLT5qb2luKCdwcm9maXRfY2VudHJlcycsICdwcm9maXRfY2VudHJlcy5pZCcsICc9JywgJ2Nvc3RfY2VudHJlcy5wcm9maXRfY2VudHJlX2lkJykKCiAgICAtPndoZXJlKCdlbnRyaWVzLmlzX2FwcHJvdmVkJywgJ2FwcHJvdmVkJykKICAgIC0+d2hlcmUoJ2VudHJpZXMuZmlzY2FsX3llYXJfaWQnLCAkZmlzY2FsX3llYXJfaWQpCiAgICAtPndoZXJlKCdwcm9maXRfY2VudHJlcy5jb21wYW55X2lkJywgJGNvbXBhbnlfaWQpCiAgICAtPndoZW4oJGNoYXJ0X29mX2FjY291bnRfaWQsIGZ1bmN0aW9uKCRxdWVyeSkgdXNlKCRjaGFydF9vZl9hY2NvdW50X2lkKXsKICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnZW50cnlfaXRlbXMuY2hhcnRfb2ZfYWNjb3VudF9pZCcsICRjaGFydF9vZl9hY2NvdW50X2lkKTsKICAgIH0pCiAgICAtPndoZXJlKCdlbnRyeV9pdGVtcy5kZWJpdF9jcmVkaXQnLCAnRCcpCiAgICAKICAgIC0+Z3JvdXBCeSgnZW50cnlfaXRlbXMuY2hhcnRfb2ZfYWNjb3VudF9pZCcpCiAgICAtPmdldChbCiAgICAgICAgJ2VudHJ5X2l0ZW1zLmNoYXJ0X29mX2FjY291bnRfaWQnLAogICAgICAgIERCOjpyYXcoJ3N1bShlbnRyeV9pdGVtcy5yZXBvcnRpbmdfYW1vdW50KSBhcyByZXBvcnRpbmdfYW1vdW50JykKICAgIF0pOwoKICAgICRjcmVkaXRFbnRyeUl0ZW1zID0gREI6OnRhYmxlKCdlbnRyeV9pdGVtcycpCiAgICAtPmpvaW4oJ2VudHJpZXMnLCAnZW50cmllcy5pZCcsICc9JywgJ2VudHJ5X2l0ZW1zLmVudHJ5X2lkJykKICAgIC0+am9pbignY29zdF9jZW50cmVzJywgJ2Nvc3RfY2VudHJlcy5pZCcsICc9JywgJ2VudHJ5X2l0ZW1zLmNvc3RfY2VudHJlX2lkJykKICAgIC0+am9pbigncHJvZml0X2NlbnRyZXMnLCAncHJvZml0X2NlbnRyZXMuaWQnLCAnPScsICdjb3N0X2NlbnRyZXMucHJvZml0X2NlbnRyZV9pZCcpCgogICAgLT53aGVyZSgnZW50cmllcy5pc19hcHByb3ZlZCcsICdhcHByb3ZlZCcpCiAgICAtPndoZXJlKCdlbnRyaWVzLmZpc2NhbF95ZWFyX2lkJywgJGZpc2NhbF95ZWFyX2lkKQogICAgLT53aGVyZSgncHJvZml0X2NlbnRyZXMuY29tcGFueV9pZCcsICRjb21wYW55X2lkKQogICAgLT53aGVuKCRjaGFydF9vZl9hY2NvdW50X2lkLCBmdW5jdGlvbigkcXVlcnkpIHVzZSgkY2hhcnRfb2ZfYWNjb3VudF9pZCl7CiAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ2VudHJ5X2l0ZW1zLmNoYXJ0X29mX2FjY291bnRfaWQnLCAkY2hhcnRfb2ZfYWNjb3VudF9pZCk7CiAgICB9KQogICAgLT53aGVyZSgnZW50cnlfaXRlbXMuZGViaXRfY3JlZGl0JywgJ0MnKQoKICAgIC0+Z3JvdXBCeSgnZW50cnlfaXRlbXMuY2hhcnRfb2ZfYWNjb3VudF9pZCcpCiAgICAtPmdldChbCiAgICAgICAgJ2VudHJ5X2l0ZW1zLmNoYXJ0X29mX2FjY291bnRfaWQnLAogICAgICAgIERCOjpyYXcoJ3N1bShlbnRyeV9pdGVtcy5yZXBvcnRpbmdfYW1vdW50KSBhcyByZXBvcnRpbmdfYW1vdW50JykKICAgIF0pOwoKICAgICRjYXJyeUZvcndhcmRlZCA9IERCOjp0YWJsZSgnZmlzY2FsX3llYXJfY2xvc2luZ19sZWRnZXJzJykKICAgIC0+am9pbignZmlzY2FsX3llYXJfY2xvc2luZ3MnLCAnZmlzY2FsX3llYXJfY2xvc2luZ3MuaWQnLCAnPScsICdmaXNjYWxfeWVhcl9jbG9zaW5nX2xlZGdlcnMuZmlzY2FsX3llYXJfY2xvc2luZ19pZCcpCiAgICAKICAgIC0+d2hlcmUoJ2Zpc2NhbF95ZWFyX2Nsb3NpbmdzLmNvbXBhbnlfaWQnLCAkY29tcGFueV9pZCkKICAgIC0+d2hlcmUoJ2Zpc2NhbF95ZWFyX2Nsb3NpbmdzLnRvX2Zpc2NhbF95ZWFyX2lkJywgJGZpc2NhbF95ZWFyX2lkKQogICAgLT53aGVuKCRjaGFydF9vZl9hY2NvdW50X2lkLCBmdW5jdGlvbigkcXVlcnkpIHVzZSgkY2hhcnRfb2ZfYWNjb3VudF9pZCl7CiAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ2Zpc2NhbF95ZWFyX2Nsb3NpbmdfbGVkZ2Vycy5jaGFydF9vZl9hY2NvdW50X2lkJywgJGNoYXJ0X29mX2FjY291bnRfaWQpOwogICAgfSkKICAgIAogICAgLT5ncm91cEJ5KCdmaXNjYWxfeWVhcl9jbG9zaW5nX2xlZGdlcnMuY2hhcnRfb2ZfYWNjb3VudF9pZCcpCiAgICAtPmdldChbCiAgICAgICAgJ2Zpc2NhbF95ZWFyX2Nsb3NpbmdfbGVkZ2Vycy5jaGFydF9vZl9hY2NvdW50X2lkJywKICAgICAgICBEQjo6cmF3KCdzdW0oZmlzY2FsX3llYXJfY2xvc2luZ19sZWRnZXJzLmNhcnJ5X2ZvcndhcmRpbmdfYW1vdW50KSBhcyBjYXJyeV9mb3J3YXJkaW5nX2Ftb3VudCcpCiAgICBdKTsKCiAgICAkYmFsYW5jZXMgPSBbXTsKICAgIGlmKGlzc2V0KCRhbGxbJ2FjY291bnRzJ11bMF0pKXsKICAgICAgICBmb3JlYWNoKCRhbGxbJ2FjY291bnRzJ10gYXMgJGFjY291bnQpewogICAgICAgICAgICAkYmFsYW5jZXNbJGFjY291bnQtPmlkXSA9ICRkZWJpdEVudHJ5SXRlbXMtPndoZXJlKCdjaGFydF9vZl9hY2NvdW50X2lkJywgJGFjY291bnQtPmlkKS0+c3VtKCdyZXBvcnRpbmdfYW1vdW50JyktJGNyZWRpdEVudHJ5SXRlbXMtPndoZXJlKCdjaGFydF9vZl9hY2NvdW50X2lkJywgJGFjY291bnQtPmlkKS0+c3VtKCdyZXBvcnRpbmdfYW1vdW50JykrJGNhcnJ5Rm9yd2FyZGVkLT53aGVyZSgnY2hhcnRfb2ZfYWNjb3VudF9pZCcsICRhY2NvdW50LT5pZCktPnN1bSgnY2FycnlfZm9yd2FyZGluZ19hbW91bnQnKTsKICAgICAgICB9CiAgICB9CgogICAgcmV0dXJuICRjaGFydF9vZl9hY2NvdW50X2lkID8gJGJhbGFuY2VzWyRjaGFydF9vZl9hY2NvdW50X2lkXSA6ICRiYWxhbmNlczsKfQoKZnVuY3Rpb24gY2hhcnRPZkFjY291bnRzT3B0aW9ucygkZ3JvdXBzLCAkY2hvc2VuID0gMCwgJHN0ZXAgPSAwLCAkYWxsID0gW10sICRhcnJheSA9IGZhbHNlLCAkbWFudWFsID0gJycsICRlbnRyeV90eXBlX2lkID0gZmFsc2UsICRjb21wYW5pZXMgPSBmYWxzZSwgJHVzZXIgPSB0cnVlLCAkYmFsYW5jZXMgPSBbXSl7CiAgICBpZihjb3VudCgkYWxsKSA9PSAwKXsKICAgICAgICAkYWxsID0gZ2V0QWxsR3JvdXBBbmRMZWRnZXJzKCRlbnRyeV90eXBlX2lkLCAkdXNlciwgW10sICRjb21wYW5pZXMpOwogICAgfQogICAgCiAgICBpZigkc3RlcCA9PSAwICYmICFpc3NldCgkZ3JvdXBzWzBdKSl7CiAgICAgICAgJGdyb3VwcyA9ICRhbGxbJ2dyb3VwcyddLT53aGVyZSgncGFyZW50X2lkJywgMCktPnNvcnRCeSgnY29kZScpOwogICAgfQoKICAgICRkYXRhID0gJyc7CiAgICBpZigkZ3JvdXBzLT5jb3VudCgpID4gMCl7CiAgICAgICAgZm9yZWFjaCAoJGdyb3VwcyBhcyAka2V5ID0+ICRncm91cCkgewogICAgICAgICAgICAkYWNjb3VudHMgPSAhZW1wdHkoJG1hbnVhbCkgPyAkYWxsWydhY2NvdW50cyddLT53aGVyZSgnYWNjb3VudF9ncm91cF9pZCcsICRncm91cC0+aWQpLT53aGVyZSgnaXNfbWFudWFsX3RyYW5zYWN0aW9uX2FsbG93ZWQnLCAkbWFudWFsKSA6ICRhbGxbJ2FjY291bnRzJ10tPndoZXJlKCdhY2NvdW50X2dyb3VwX2lkJywgJGdyb3VwLT5pZCk7CiAgICAgICAgICAgICRjaGlsZHJlbkdyb3VwcyA9ICRhbGxbJ2dyb3VwcyddLT53aGVyZSgncGFyZW50X2lkJywgJGdyb3VwLT5pZCk7CgogICAgICAgICAgICBpZigkY2hpbGRyZW5Hcm91cHMtPmNvdW50KCkgPiAwIHx8ICRhY2NvdW50cy0+Y291bnQoKSA+IDApewogICAgICAgICAgICAgICAgJGRhdGEgLj0gJzxvcHRpb24gZGlzYWJsZWQgc3R5bGU9ImNvbG9yOiBibGFjayAhaW1wb3J0YW50Ij4nLnNwYWNlcygkc3RlcCwgMCwgZmFsc2UpLidbJy4kZ3JvdXAtPmNvZGUuJ10gJy4kZ3JvdXAtPm5hbWUuJzwvb3B0aW9uPic7CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYoJGFjY291bnRzLT5jb3VudCgpID4gMCl7CiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCgkYWNjb3VudHMgYXMgJGtleSA9PiAkYWNjb3VudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICRkYXRhIC49ICAgICc8b3B0aW9uIGRhdGEtY2xvc2luZy1iYWxhbmNlPSIwIiB2YWx1ZT0iJy4kYWNjb3VudC0+aWQuJyIgJy4oJGNob3NlbiA9PSAkYWNjb3VudC0+aWQgPyAnc2VsZWN0ZWQnIDogJycpLicgJy4oJGFycmF5ICYmIGlzX2FycmF5KCRhcnJheSkgPyAoaW5fYXJyYXkoJGFjY291bnQtPmlkLCAkYXJyYXkpID8gJ3NlbGVjdGVkJyA6ICcnKSA6ICcnKS4nPicuc3BhY2VzKCRzdGVwKzIsIDAsIGZhbHNlKS4nWycuJGFjY291bnQtPmNvZGUuJ10gJy4kYWNjb3VudC0+bmFtZS4nIFsnLnN5c3RlbU1vbmV5Rm9ybWF0KGlzc2V0KCRiYWxhbmNlc1skYWNjb3VudC0+aWRdKSA/ICRiYWxhbmNlc1skYWNjb3VudC0+aWRdIDogMCkuJ108L29wdGlvbj4nOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYoJGNoaWxkcmVuR3JvdXBzLT5jb3VudCgpID4gMCl7CiAgICAgICAgICAgICAgICAgICAgJGRhdGEgLj0gY2hhcnRPZkFjY291bnRzT3B0aW9ucygkY2hpbGRyZW5Hcm91cHMsICRjaG9zZW4sICRzdGVwKzEsICRhbGwsICRhcnJheSwgJG1hbnVhbCwgJGVudHJ5X3R5cGVfaWQsICRjb21wYW5pZXMsICR1c2VyLCAkYmFsYW5jZXMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiAkZGF0YTsKfQoKZnVuY3Rpb24gZ2V0QWNjb3VudHMoJGFjY291bnRfZ3JvdXBfaWQpewogICAgcmV0dXJuIENoYXJ0T2ZBY2NvdW50Ojp3aGVyZSgnYWNjb3VudF9ncm91cF9pZCcsICRhY2NvdW50X2dyb3VwX2lkKS0+Z2V0KCk7Cn0KCmZ1bmN0aW9uIGdldEFsbEFjY291bnRzKCRhY2NvdW50X2dyb3VwX2lkLCAkYWNjb3VudHMgPSBbXSwgJGFsbCA9IFtdKXsKICAgICRncm91cHMgPSBjb2xsZWN0KCRhbGxbJ2dyb3VwcyddLT53aGVyZSgncGFyZW50X2lkJywgJGFjY291bnRfZ3JvdXBfaWQpKS0+c29ydEJ5KCdjb2RlJyk7CiAgICBpZigkZ3JvdXBzLT5jb3VudCgpID4gMCl7CiAgICAgICAgZm9yZWFjaCAoJGdyb3VwcyBhcyAka2V5ID0+ICRncm91cCkgewogICAgICAgICAgICAkY2hhcnRPZkFjY291bnRzID0gJGFsbFsnYWNjb3VudHMnXS0+d2hlcmUoJ2FjY291bnRfZ3JvdXBfaWQnLCAkZ3JvdXAtPmlkKTsKICAgICAgICAgICAgaWYoJGNoYXJ0T2ZBY2NvdW50cy0+Y291bnQoKSA+IDApewogICAgICAgICAgICAgICAgYXJyYXlfcHVzaCgkYWNjb3VudHMsICRjaGFydE9mQWNjb3VudHMtPnBsdWNrKCdpZCcpLT50b0FycmF5KCkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZigkYWxsWydncm91cHMnXS0+d2hlcmUoJ3BhcmVudF9pZCcsICRncm91cC0+aWQpLT5jb3VudCgpID4gMCl7CiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QWxsQWNjb3VudHMoJGdyb3VwLT5pZCwgJGFjY291bnRzLCAkYWxsKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gJGFjY291bnRzOwp9CgpmdW5jdGlvbiBlbnRyeVR5cGVSZXN0cmljdGlvbnMoJGtleSA9IGZhbHNlKXsKCSRyZXN0cmljdGlvbnMgPSBbCgkJMSA9PiBbCgkJCSduYW1lJyA9PiAnVW5yZXN0cmljdGVkJywKCQldLAoJCTIgPT4gWwoJCQknbmFtZScgPT4gJ0F0bGVhc3Qgb25lIEJhbmsgb3IgQ2FzaCBhY2NvdW50IG11c3QgYmUgcHJlc2VudCBvbiBEZWJpdCBzaWRlJywKCQldLAoJCTMgPT4gWwoJCQknbmFtZScgPT4gJ0F0bGVhc3Qgb25lIEJhbmsgb3IgQ2FzaCBhY2NvdW50IG11c3QgYmUgcHJlc2VudCBvbiBDcmVkaXQgc2lkZScsCgkJXSwKCQk0ID0+IFsKCQkJJ25hbWUnID0+ICdPbmx5IEJhbmsgb3IgQ2FzaCBhY2NvdW50IGNhbiBiZSBwcmVzZW50IG9uIGJvdGggRGViaXQgYW5kIENyZWRpdCBzaWRlJywKCQldLAoJCTUgPT4gWwoJCQknbmFtZScgPT4gJ09ubHkgTk9OIEJhbmsgb3IgQ2FzaCBhY2NvdW50IGNhbiBiZSBwcmVzZW50IG9uIGJvdGggRGViaXQgYW5kIENyZWRpdCBzaWRlJywKCQldLAoJXTsKCglyZXR1cm4gKCRrZXkgJiYgYXJyYXlfa2V5X2V4aXN0cygka2V5LCAkcmVzdHJpY3Rpb25zKSA/ICRyZXN0cmljdGlvbnNbJGtleV0gOiAkcmVzdHJpY3Rpb25zKTsKfQoKZnVuY3Rpb24gYmFua0FjY291bnRUeXBlcygka2V5ID0gZmFsc2UpewogICAgJGFjY291bnRUeXBlcyA9IFsKICAgICAgICAxID0+IFsKICAgICAgICAgICAgJ25hbWUnID0+ICdDdXJyZW50IGFjY291bnQnLAogICAgICAgIF0sCiAgICAgICAgMiA9PiBbCiAgICAgICAgICAgICduYW1lJyA9PiAnU2F2aW5ncyBhY2NvdW50JywKICAgICAgICBdLAogICAgICAgIDMgPT4gWwogICAgICAgICAgICAnbmFtZScgPT4gJ1NhbGFyeSBhY2NvdW50JywKICAgICAgICBdLAogICAgICAgIDQgPT4gWwogICAgICAgICAgICAnbmFtZScgPT4gJ0ZpeGVkIGRlcG9zaXQgYWNjb3VudCcsCiAgICAgICAgXSwKICAgICAgICA1ID0+IFsKICAgICAgICAgICAgJ25hbWUnID0+ICcgUmVjdXJyaW5nIGRlcG9zaXQgYWNjb3VudCcsCiAgICAgICAgXSwKICAgIF07CgogICAgcmV0dXJuICgka2V5ICYmIGFycmF5X2tleV9leGlzdHMoJGtleSwgJGFjY291bnRUeXBlcykgPyAkYWNjb3VudFR5cGVzWyRrZXldIDogJGFjY291bnRUeXBlcyk7Cn0KCmZ1bmN0aW9uIHJldmlld1N0YXR1cygkb2JqZWN0LCAkdXNlciA9IGZhbHNlKXsKICAgICRwcmVwYXJlZF9ieSA9IChpc3NldCgkb2JqZWN0LT5wcmVwYXJlZF9ieSkgJiYgIWVtcHR5KCRvYmplY3QtPnByZXBhcmVkX2J5KSA/ICRvYmplY3QtPnByZXBhcmVkX2J5IDogYXV0aCgpLT51c2VyKCktPmlkKTsKCiAgICAkaXNfcmV2aWV3ZWQgPSAoIWVtcHR5KCRvYmplY3QtPmlzX3Jldmlld2VkKSA/ICRvYmplY3QtPmlzX3Jldmlld2VkIDogJ3BlbmRpbmcnKTsKICAgICRyZXZpZXdlZF9ieSA9IChpc3NldCgkb2JqZWN0LT5yZXZpZXdlZF9ieSkgJiYgIWVtcHR5KCRvYmplY3QtPnJldmlld2VkX2J5KSA/ICRvYmplY3QtPnJldmlld2VkX2J5IDogMCk7CgogICAgJGlzX2Fzc2Vzc2VkID0gKCFlbXB0eSgkb2JqZWN0LT5pc19hc3Nlc3NlZCkgPyAkb2JqZWN0LT5pc19hc3Nlc3NlZCA6ICdwZW5kaW5nJyk7CiAgICAkYXNzZXNzZWRfYnkgPSAoaXNzZXQoJG9iamVjdC0+YXNzZXNzZWRfYnkpICYmICFlbXB0eSgkb2JqZWN0LT5hc3Nlc3NlZF9ieSkgPyAkb2JqZWN0LT5hc3Nlc3NlZF9ieSA6IDApOwoKICAgICRpc19hcHByb3ZlZCA9ICghZW1wdHkoJG9iamVjdC0+aXNfYXBwcm92ZWQpID8gJG9iamVjdC0+aXNfYXBwcm92ZWQgOiAncGVuZGluZycpOwogICAgJGFwcHJvdmVkX2J5ID0gKGlzc2V0KCRvYmplY3QtPmFwcHJvdmVkX2J5KSAmJiAhZW1wdHkoJG9iamVjdC0+YXBwcm92ZWRfYnkpID8gJG9iamVjdC0+YXBwcm92ZWRfYnkgOiAwKTsKCiAgICBpZihhdXRoKCktPnVzZXIoKS0+aGFzUGVybWlzc2lvblRvKCd0cmFuc2FjdGlvbi1yZXZpZXcnKSl7CiAgICAgICAgJGlzX3Jldmlld2VkID0gJ2FwcHJvdmVkJzsKICAgICAgICAkcmV2aWV3ZWRfYnkgPSBhdXRoKCktPnVzZXIoKS0+aWQ7CgogICAgICAgICRpc19hc3Nlc3NlZCA9ICdhcHByb3ZlZCc7CiAgICAgICAgJGFzc2Vzc2VkX2J5ID0gYXV0aCgpLT51c2VyKCktPmlkOwogICAgfQoKICAgIGlmKGF1dGgoKS0+dXNlcigpLT5oYXNQZXJtaXNzaW9uVG8oJ3RyYW5zYWN0aW9uLWFzc2Vzc21lbnQnKSl7CiAgICAgICAgJGlzX3Jldmlld2VkID0gJ2FwcHJvdmVkJzsKICAgICAgICAkcmV2aWV3ZWRfYnkgPSBhdXRoKCktPnVzZXIoKS0+aWQ7CgogICAgICAgICRpc19hc3Nlc3NlZCA9ICdhcHByb3ZlZCc7CiAgICAgICAgJGFzc2Vzc2VkX2J5ID0gYXV0aCgpLT51c2VyKCktPmlkOwogICAgfQoKICAgIGlmKGF1dGgoKS0+dXNlcigpLT5oYXNQZXJtaXNzaW9uVG8oJ3RyYW5zYWN0aW9uLWFwcHJvdmFsJykpewogICAgICAgICRpc19yZXZpZXdlZCA9ICdhcHByb3ZlZCc7CiAgICAgICAgJHJldmlld2VkX2J5ID0gYXV0aCgpLT51c2VyKCktPmlkOwogICAgICAgIAogICAgICAgICRpc19hc3Nlc3NlZCA9ICdhcHByb3ZlZCc7CiAgICAgICAgJGFzc2Vzc2VkX2J5ID0gYXV0aCgpLT51c2VyKCktPmlkOwoKICAgICAgICAkaXNfYXBwcm92ZWQgPSAnYXBwcm92ZWQnOwogICAgICAgICRhcHByb3ZlZF9ieSA9IGF1dGgoKS0+dXNlcigpLT5pZDsKICAgIH0KCiAgICBpZigkdXNlcil7CiAgICAgICAgJG9iamVjdC0+cHJlcGFyZWRfYnkgPSAkcHJlcGFyZWRfYnk7CiAgICAgICAgJG9iamVjdC0+cmV2aWV3ZWRfYnkgPSAkcmV2aWV3ZWRfYnk7CiAgICAgICAgJG9iamVjdC0+YXNzZXNzZWRfYnkgPSAkYXNzZXNzZWRfYnk7CiAgICAgICAgJG9iamVjdC0+YXBwcm92ZWRfYnkgPSAkYXBwcm92ZWRfYnk7CiAgICB9CgogICAgJG9iamVjdC0+aXNfcmV2aWV3ZWQgPSAkaXNfcmV2aWV3ZWQ7CiAgICAkb2JqZWN0LT5pc19hc3Nlc3NlZCA9ICRpc19hc3Nlc3NlZDsKICAgICRvYmplY3QtPmlzX2FwcHJvdmVkID0gJGlzX2FwcHJvdmVkOwogICAgJG9iamVjdC0+c2F2ZSgpOwp9CgpmdW5jdGlvbiBnZXRDb3N0Q2VudHJlQ29tcGFueSgkaWQpewogICAgJGNvc3RDZW50cmUgPSBcQXBwXE1vZGVsc1xQbXNNb2RlbHNcQWNjb3VudHNcQ29zdENlbnRyZTo6ZmluZCgkaWQpOwogICAgcmV0dXJuIGlzc2V0KCRjb3N0Q2VudHJlLT5wcm9maXRDZW50cmUtPmNvbXBhbnlfaWQpID8gJGNvc3RDZW50cmUtPnByb2ZpdENlbnRyZS0+Y29tcGFueV9pZCA6IDA7Cn0KCmZ1bmN0aW9uIGdldEFjdGl2ZUZpc2NhbFllYXIoJGNvbXBhbnlfaWQgPSAwKXsKICAgIHJldHVybiBcQXBwXE1vZGVsc1xQbXNNb2RlbHNcQWNjb3VudHNcRmlzY2FsWWVhcjo6d2hlcmVEb2VzbnRIYXZlKCdmcm9tRmlzY2FsWWVhckNsb3NpbmcnLCBmdW5jdGlvbigkcXVlcnkpIHVzZSgkY29tcGFueV9pZCl7CiAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ2NvbXBhbnlfaWQnLCAoJGNvbXBhbnlfaWQgPT0gMCA/IChpc3NldChhdXRoKCktPnVzZXIoKS0+Y29zdENlbnRyZS0+cHJvZml0Q2VudHJlLT5jb21wYW55X2lkKSA/IGF1dGgoKS0+dXNlcigpLT5jb3N0Q2VudHJlLT5wcm9maXRDZW50cmUtPmNvbXBhbnlfaWQgOiAwKSA6ICRjb21wYW55X2lkKSk7CiAgICB9KQogICAgLT5maXJzdCgpOwp9CgpmdW5jdGlvbiBzYXZlTGVkZ2VyRW50cmllcygkZW50cnlfdHlwZV9pZCwgJGRhdGV0aW1lLCAkdGFnX2lkLCAkbnVtYmVyLCAkbm90ZXMsICRpdGVtcywgJGV4Y2hhbmdlX3JhdGVfaWQgPSAzLCAkaXNfYWR2YW5jZSA9IDAsICRhZHZhbmNlX2NhdGVnb3J5X2lkID0gMCwgJGlzX21hbnVhbCA9IDAsICRjb21wYW55X2lkID0gMCwgJGluamVjdGVkRmlzY2FsWWVhciA9IGZhbHNlKXsKICAgIGlmKCRjb21wYW55X2lkID09IDApewogICAgICAgICRjb21wYW55X2lkID0gYXV0aCgpLT51c2VyKCktPmNvc3RDZW50cmUtPnByb2ZpdENlbnRyZSA/IGF1dGgoKS0+dXNlcigpLT5jb3N0Q2VudHJlLT5wcm9maXRDZW50cmUtPmNvbXBhbnlfaWQgOiAwOwogICAgfQoKICAgIGlmKGlzc2V0KCRpdGVtc1swXSkgJiYgc3lzdGVtRG91YmxlVmFsdWUoY29sbGVjdCgkaXRlbXMpLT5zdW0oJ2RlYml0JyksIDIpK3N5c3RlbURvdWJsZVZhbHVlKGNvbGxlY3QoJGl0ZW1zKS0+c3VtKCdjcmVkaXQnKSwgMikgPiAwKXsKICAgICAgICBcREI6OmJlZ2luVHJhbnNhY3Rpb24oKTsKICAgICAgICB0cnl7CiAgICAgICAgICAgICRlbnRyeVR5cGUgPSBcQXBwXE1vZGVsc1xQbXNNb2RlbHNcQWNjb3VudHNcRW50cnlUeXBlOjpmaW5kT3JGYWlsKCRlbnRyeV90eXBlX2lkKTsKCiAgICAgICAgICAgIGlmKCEkaW5qZWN0ZWRGaXNjYWxZZWFyKXsKICAgICAgICAgICAgICAgICRmaXNjYWxZZWFyID0gXEFwcFxNb2RlbHNcUG1zTW9kZWxzXEFjY291bnRzXEZpc2NhbFllYXI6OndoZXJlRG9lc250SGF2ZSgnZnJvbUZpc2NhbFllYXJDbG9zaW5nJywgZnVuY3Rpb24oJHF1ZXJ5KSB1c2UoJGNvbXBhbnlfaWQpewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlKCdjb21wYW55X2lkJywgJGNvbXBhbnlfaWQpOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC0+Zmlyc3QoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJGV4Y2hhbmdlUmF0ZSA9IFxBcHBcTW9kZWxzXFBtc01vZGVsc1xBY2NvdW50c1xFeGNoYW5nZVJhdGU6OmZpbmRPckZhaWwoJGV4Y2hhbmdlX3JhdGVfaWQpOwogICAgICAgICAgICAkc3lzdGVtQ3VycmVuY3kgPSBzeXN0ZW1DdXJyZW5jeSgpLT5pZDsKICAgICAgICAgICAgJHN5c3RlbVJhdGUgPSBpc3NldChqc29uX2RlY29kZSgkZXhjaGFuZ2VSYXRlLT5yYXRlcywgdHJ1ZSlbJHN5c3RlbUN1cnJlbmN5XSkgPyBqc29uX2RlY29kZSgkZXhjaGFuZ2VSYXRlLT5yYXRlcywgdHJ1ZSlbJHN5c3RlbUN1cnJlbmN5XVsncmF0ZSddIDogMTsKICAgICAgICAgICAgCiAgICAgICAgICAgICRjb2RlID0gZW50cnlVbmlxdWVDb2RlKHN0cmxlbigkZW50cnlUeXBlLT5wcmVmaXgpKzEyLCAkZW50cnlUeXBlLT5wcmVmaXguJy0nLmRhdGUoJ3ltZCcsIHN0cnRvdGltZSgkZGF0ZXRpbWUpKS4nLScsICdlbnRyaWVzJywgJ2NvZGUnKTsKICAgICAgICAgICAgCiAgICAgICAgICAgICRlbnRyeSA9IFxBcHBcTW9kZWxzXFBtc01vZGVsc1xBY2NvdW50c1xFbnRyeTo6Y3JlYXRlKFsKICAgICAgICAgICAgICAgICdjb2RlJyA9PiAkY29kZSwKICAgICAgICAgICAgICAgICdmaXNjYWxfeWVhcl9pZCcgPT4gISRpbmplY3RlZEZpc2NhbFllYXIgPyAkZmlzY2FsWWVhci0+aWQgOiAkaW5qZWN0ZWRGaXNjYWxZZWFyLT5pZCwKICAgICAgICAgICAgICAgICdlbnRyeV90eXBlX2lkJyA9PiAkZW50cnlUeXBlLT5pZCwKICAgICAgICAgICAgICAgICd0YWdfaWQnID0+ICR0YWdfaWQsCiAgICAgICAgICAgICAgICAnbnVtYmVyJyA9PiAoZW1wdHkoJG51bWJlcikgPyAkY29kZSA6ICRudW1iZXIpLAogICAgICAgICAgICAgICAgJ2RhdGUnID0+IGRhdGUoJ1ktbS1kJywgc3RydG90aW1lKCRkYXRldGltZSkpLAogICAgICAgICAgICAgICAgJ3RpbWUnID0+IGRhdGUoJ0g6aTpzJywgc3RydG90aW1lKCRkYXRldGltZSkpLAogICAgICAgICAgICAgICAgJ2V4Y2hhbmdlX3JhdGVfaWQnID0+ICRleGNoYW5nZVJhdGUtPmlkLAogICAgICAgICAgICAgICAgJ2RlYml0JyA9PiBjb2xsZWN0KCRpdGVtcyktPnN1bSgnZGViaXQnKSwKICAgICAgICAgICAgICAgICdjcmVkaXQnID0+IGNvbGxlY3QoJGl0ZW1zKS0+c3VtKCdjcmVkaXQnKSwKICAgICAgICAgICAgICAgICdyZXBvcnRpbmdfZGViaXQnID0+IGNvbGxlY3QoJGl0ZW1zKS0+c3VtKCdkZWJpdCcpKiRzeXN0ZW1SYXRlLAogICAgICAgICAgICAgICAgJ3JlcG9ydGluZ19jcmVkaXQnID0+IGNvbGxlY3QoJGl0ZW1zKS0+c3VtKCdjcmVkaXQnKSokc3lzdGVtUmF0ZSwKICAgICAgICAgICAgICAgICdpc19hZHZhbmNlJyA9PiAkaXNfYWR2YW5jZSwKICAgICAgICAgICAgICAgICdhZHZhbmNlX2NhdGVnb3J5X2lkJyA9PiAkYWR2YW5jZV9jYXRlZ29yeV9pZCwKICAgICAgICAgICAgICAgICdub3RlcycgPT4gKGVtcHR5KCRub3RlcykgPyAkY29kZSA6ICRub3RlcyksCiAgICAgICAgICAgICAgICAnaXNfbWFudWFsJyA9PiAkaXNfbWFudWFsLAogICAgICAgICAgICAgICAgLy8gJ2lzX3Jldmlld2VkJyA9PiAoJGlzX21hbnVhbCA9PSAxID8gJ3BlbmRpbmcnIDogJ2FwcHJvdmVkJyksCiAgICAgICAgICAgICAgICAvLyAnaXNfYXNzZXNzZWQnID0+ICgkaXNfbWFudWFsID09IDEgPyAncGVuZGluZycgOiAnYXBwcm92ZWQnKSwKICAgICAgICAgICAgICAgICdpc19hcHByb3ZlZCcgPT4gKCRpc19tYW51YWwgPT0gMSA/ICdwZW5kaW5nJyA6ICdhcHByb3ZlZCcpLAogICAgICAgICAgICBdKTsKCiAgICAgICAgICAgIGlmKCRpbmplY3RlZEZpc2NhbFllYXIpewogICAgICAgICAgICAgICAgaWYoJGluamVjdGVkRmlzY2FsWWVhci0+ZmlzY2FsWWVhck9wZW5pbmdzLT53aGVyZSgnaXNfYXBwcm92ZWQnLCAnYXBwcm92ZWQnKS0+d2hlcmUoJ3N0YXR1cycsICdvcGVuZWQnKSAtPmNvdW50KCkgPiAwKXsKICAgICAgICAgICAgICAgICAgICBcQXBwXE1vZGVsc1xQbXNNb2RlbHNcQWNjb3VudHNcRmlzY2FsWWVhck9wZW5pbmdFbnRyeTo6Y3JlYXRlKFsKICAgICAgICAgICAgICAgICAgICAgICAgJ2Zpc2NhbF95ZWFyX29wZW5pbmdfaWQnID0+ICRpbmplY3RlZEZpc2NhbFllYXItPmZpc2NhbFllYXJPcGVuaW5ncy0+d2hlcmUoJ2lzX2FwcHJvdmVkJywgJ2FwcHJvdmVkJyktPndoZXJlKCdzdGF0dXMnLCAnb3BlbmVkJyktPmZpcnN0KCktPmlkLAogICAgICAgICAgICAgICAgICAgICAgICAnZW50cnlfaWQnID0+ICRlbnRyeS0+aWQsCiAgICAgICAgICAgICAgICAgICAgXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRlbnRyeUl0ZW1zID0gW107CiAgICAgICAgICAgIGZvcmVhY2goJGl0ZW1zIGFzICRrZXkgPT4gJGl0ZW0pewogICAgICAgICAgICAgICAgaWYoJGl0ZW1bJ2RlYml0J10gPiAwIHx8ICRpdGVtWydjcmVkaXQnXSA+IDApewogICAgICAgICAgICAgICAgICAgIGFycmF5X3B1c2goJGVudHJ5SXRlbXMsIFsKICAgICAgICAgICAgICAgICAgICAgICAgJ2VudHJ5X2lkJyA9PiAkZW50cnktPmlkLAogICAgICAgICAgICAgICAgICAgICAgICAnY29zdF9jZW50cmVfaWQnID0+IGlzc2V0KCRpdGVtWydjb3N0X2NlbnRyZV9pZCddKSA/ICRpdGVtWydjb3N0X2NlbnRyZV9pZCddIDogMCwKICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0X29mX2FjY291bnRfaWQnID0+ICRpdGVtWydjaGFydF9vZl9hY2NvdW50X2lkJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICdzdWJfbGVkZ2VyX2lkJyA9PiBpc3NldCgkaXRlbVsnc3ViX2xlZGdlcl9pZCddKSA/ICRpdGVtWydzdWJfbGVkZ2VyX2lkJ10gOiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICAnYW1vdW50JyA9PiAoJGl0ZW1bJ2RlYml0J10gPiAwID8gJGl0ZW1bJ2RlYml0J10gOiAkaXRlbVsnY3JlZGl0J10pLAogICAgICAgICAgICAgICAgICAgICAgICAncmVwb3J0aW5nX2Ftb3VudCcgPT4gKCRpdGVtWydkZWJpdCddID4gMCA/ICRpdGVtWydkZWJpdCddIDogJGl0ZW1bJ2NyZWRpdCddKSokc3lzdGVtUmF0ZSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2RlYml0X2NyZWRpdCcgPT4gKCRpdGVtWydkZWJpdCddID4gMCA/ICdEJyA6ICdDJyksCiAgICAgICAgICAgICAgICAgICAgICAgICduYXJyYXRpb24nID0+IGlzc2V0KCRpdGVtWyduYXJyYXRpb24nXSkgPyAkaXRlbVsnbmFycmF0aW9uJ10gOiAnJywKICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnID0+IGlzc2V0KCRpdGVtWyd0eXBlJ10pID8gJGl0ZW1bJ3R5cGUnXSA6ICcnLAogICAgICAgICAgICAgICAgICAgICAgICAnc291cmNlJyA9PiBpc3NldCgkaXRlbVsnc291cmNlJ10pID8gJGl0ZW1bJ3NvdXJjZSddIDogJycsCiAgICAgICAgICAgICAgICAgICAgXSk7CiAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICBhcnJheV9wdXNoKCRlbnRyeUl0ZW1zLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICdlbnRyeV9pZCcgPT4gJGVudHJ5LT5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgJ2Nvc3RfY2VudHJlX2lkJyA9PiBpc3NldCgkaXRlbVsnY29zdF9jZW50cmVfaWQnXSkgPyAkaXRlbVsnY29zdF9jZW50cmVfaWQnXSA6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydF9vZl9hY2NvdW50X2lkJyA9PiAkaXRlbVsnY2hhcnRfb2ZfYWNjb3VudF9pZCddLAogICAgICAgICAgICAgICAgICAgICAgICAnc3ViX2xlZGdlcl9pZCcgPT4gaXNzZXQoJGl0ZW1bJ3N1Yl9sZWRnZXJfaWQnXSkgPyAkaXRlbVsnc3ViX2xlZGdlcl9pZCddIDogbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgJ2Ftb3VudCcgPT4gMCwKICAgICAgICAgICAgICAgICAgICAgICAgJ3JlcG9ydGluZ19hbW91bnQnID0+IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICdkZWJpdF9jcmVkaXQnID0+ICdEJywKICAgICAgICAgICAgICAgICAgICAgICAgJ25hcnJhdGlvbicgPT4gaXNzZXQoJGl0ZW1bJ25hcnJhdGlvbiddKSA/ICRpdGVtWyduYXJyYXRpb24nXSA6ICcnLAogICAgICAgICAgICAgICAgICAgICAgICAndHlwZScgPT4gaXNzZXQoJGl0ZW1bJ3R5cGUnXSkgPyAkaXRlbVsndHlwZSddIDogJycsCiAgICAgICAgICAgICAgICAgICAgICAgICdzb3VyY2UnID0+IGlzc2V0KCRpdGVtWydzb3VyY2UnXSkgPyAkaXRlbVsnc291cmNlJ10gOiAnJywKICAgICAgICAgICAgICAgICAgICBdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYoaXNzZXQoJGVudHJ5SXRlbXNbMF0pKXsKICAgICAgICAgICAgICAgIFxBcHBcTW9kZWxzXFBtc01vZGVsc1xBY2NvdW50c1xFbnRyeUl0ZW06Omluc2VydCgkZW50cnlJdGVtcyk7CgogICAgICAgICAgICAgICAgJGFwcHJvdmFsTGV2ZWxzID0gXEFwcFxNb2RlbHNcUG1zTW9kZWxzXEFjY291bnRzXEFwcHJvdmFsTGV2ZWw6OndoZXJlSGFzKCdjaGFydE9mQWNjb3VudHMnLCBmdW5jdGlvbigkcXVlcnkpIHVzZSgkZW50cnlJdGVtcyl7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmVJbignY2hhcnRfb2ZfYWNjb3VudF9pZCcsIGNvbGxlY3QoJGVudHJ5SXRlbXMpLT5wbHVjaygnY2hhcnRfb2ZfYWNjb3VudF9pZCcpLT50b0FycmF5KCkpOwogICAgICAgICAgICAgICAgfSktPmdldCgpOwogICAgICAgICAgICAgICAgaWYoaXNzZXQoJGFwcHJvdmFsTGV2ZWxzWzBdKSl7CiAgICAgICAgICAgICAgICAgICAgJGxldmVscyA9IFtdOwogICAgICAgICAgICAgICAgICAgIGZvcmVhY2goJGFwcHJvdmFsTGV2ZWxzIGFzICRsZXZlbCl7CiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5X3B1c2goJGxldmVscywgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2VudHJ5X2lkJyA9PiAkZW50cnktPmlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FwcHJvdmFsX2xldmVsX2lkJyA9PiAkbGV2ZWwtPmlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N0YXR1cycgPT4gKCRpc19tYW51YWwgPT0gMSA/ICdwZW5kaW5nJyA6ICdhcHByb3ZlZCcpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xvZ3MnID0+IGpzb25fZW5jb2RlKFtdKSwKICAgICAgICAgICAgICAgICAgICAgICAgXSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIFxBcHBcTW9kZWxzXFBtc01vZGVsc1xBY2NvdW50c1xFbnRyeUFwcHJvdmFsOjppbnNlcnQoJGxldmVscyk7CiAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAkZW50cnktPmlzX2FwcHJvdmVkID0gJ2FwcHJvdmVkJzsKICAgICAgICAgICAgICAgICAgICAkZW50cnktPnNhdmUoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLyoKICAgICAgICAgICAgaWYoJGVudHJ5LT5pc19yZXZpZXdlZCA9PSAncGVuZGluZycpewogICAgICAgICAgICAgICAgJHJldmlld2VyID0gXEFwcFxVc2VyOjpyb2xlKCdBY2NvdW50cy1SZXZpZXdlcicpLT5maXJzdCgpOwogICAgICAgICAgICAgICAgaWYoaXNzZXQoJHJldmlld2VyLT5pZCkpewogICAgICAgICAgICAgICAgICAgICRtZXNzYWdlID0gJzxzcGFuIGNsYXNzPSJub3RpZmljYXRpb24tbGlua3MiIGRhdGEtdGl0bGU9IldhaXRpbmcgZm9yIFJldmlldyI+QSBOZXcgJy4kZW50cnlUeXBlLT5uYW1lLicgRW50cnkgd2l0aCBjb2RlICMnLiRlbnRyeS0+Y29kZS4nIGhhcyBiZWVuIHN1Ym1pdHRlZCBhbmQgd2FpdGluZyBmb3IgcmV2aWV3PC9zcGFuPic7CiAgICAgICAgICAgICAgICAgICAgQ3JlYXRlT3JVcGRhdGVOb3RpZmljYXRpb24oJG1lc3NhZ2UsICd1bnJlYWQnLCAnYWNjb3VudGluZy1yZXZpZXcnLCcnLCAkcmV2aWV3ZXItPmlkKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAqLwoKICAgICAgICAgICAgREI6OmNvbW1pdCgpOwogICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnID0+IHRydWUsCiAgICAgICAgICAgICAgICAnbWVzc2FnZScgPT4gIkVudHJ5IEhhcyBiZWVuIHNhdmVkIHN1Y2Nlc3NmdWxseS4iLAogICAgICAgICAgICAgICAgJ2VudHJ5JyA9PiAkZW50cnkKICAgICAgICAgICAgXTsKICAgICAgICB9Y2F0Y2ggKFxUaHJvd2FibGUgJHRoKXsKICAgICAgICAgICAgXERCOjpyb2xsYmFjaygpOwogICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnID0+IGZhbHNlLAogICAgICAgICAgICAgICAgJ21lc3NhZ2UnID0+ICR0aC0+Z2V0TWVzc2FnZSgpCiAgICAgICAgICAgIF07CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiBbCiAgICAgICAgJ3N1Y2Nlc3MnID0+IGZhbHNlLAogICAgICAgICdtZXNzYWdlJyA9PiAiTm8gSXRlbXMgQXZhaWxhYmxlISIKICAgIF07Cn0KCmZ1bmN0aW9uIHNhdmVTdXBwbGllckxlZGdlcigkc3VwcGxpZXJfaWQsICRkYXRlLCAkZGViaXQsICRjcmVkaXQsICRwYXltZW50X3R5cGUgPSAnY2FzaCcsICRwYXltZW50X2RldGFpbHMgPSAnJywgJG5vdGVzID0gJycsICRiYW5rX2FjY291bnRfaWQgPSAwLCAkc3VwcGxpZXJfcGF5bWVudF9pZCA9IDAsICRleGNoYW5nZV9yYXRlX2lkID0gZmFsc2UsICRlbnRyeV9pZCA9IG51bGwpewogICAgJG9wZW5pbmdfYmFsYW5jZSA9IHN1cHBsaWVyT3BlbmluZ0JhbGFuY2UoJHN1cHBsaWVyX2lkKTsKICAgICRjbG9zaW5nX2JhbGFuY2UgPSAoKCgkZGViaXQqLTEpKyRjcmVkaXQpKSskb3BlbmluZ19iYWxhbmNlWydiYWxhbmNlJ107CgogICAgcmV0dXJuIFxBcHBcTW9kZWxzXFBtc01vZGVsc1xTdXBwbGllckxlZGdlcnM6OmNyZWF0ZShbCiAgICAgICAgJ3N1cHBsaWVyX2lkJyA9PiAkc3VwcGxpZXJfaWQsCiAgICAgICAgJ2VudHJ5X2lkJyA9PiAkZW50cnlfaWQsCiAgICAgICAgJ3N1cHBsaWVyX3BheW1lbnRfaWQnID0+ICRzdXBwbGllcl9wYXltZW50X2lkLAogICAgICAgICdkYXRlJyA9PiAkZGF0ZSwKICAgICAgICAnZXhjaGFuZ2VfcmF0ZV9pZCcgPT4gJGV4Y2hhbmdlX3JhdGVfaWQsCiAgICAgICAgJ29wZW5pbmdfYmFsYW5jZScgPT4gJG9wZW5pbmdfYmFsYW5jZVsnYmFsYW5jZSddLAogICAgICAgICdkZWJpdCcgPT4gJGRlYml0LAogICAgICAgICdjcmVkaXQnID0+ICRjcmVkaXQsCiAgICAgICAgJ2Nsb3NpbmdfYmFsYW5jZScgPT4gJGNsb3NpbmdfYmFsYW5jZSwKICAgICAgICAncGF5bWVudF90eXBlJyA9PiAkcGF5bWVudF90eXBlLAogICAgICAgICdwYXltZW50X2RldGFpbHMnID0+ICRwYXltZW50X2RldGFpbHMsCiAgICAgICAgJ25vdGVzJyA9PiAkbm90ZXMsCiAgICAgICAgJ2JhbmtfYWNjb3VudF9pZCcgPT4gJGJhbmtfYWNjb3VudF9pZCwKICAgIF0pOwp9CgpmdW5jdGlvbiBzYXZlQ3VzdG9tZXJMZWRnZXIoJGN1c3RvbWVyX2lkLCAkZGF0ZSwgJGRlYml0LCAkY3JlZGl0LCAkcGF5bWVudF90eXBlID0gJ2Nhc2gnLCAkcGF5bWVudF9kZXRhaWxzID0gJycsICRub3RlcyA9ICcnLCAkYmFua19hY2NvdW50X2lkID0gMCwgJGN1c3RvbWVyX3BheW1lbnRfaWQgPSAwLCAkZXhjaGFuZ2VfcmF0ZV9pZCA9IGZhbHNlKXsKICAgICRvcGVuaW5nX2JhbGFuY2UgPSBjdXN0b21lck9wZW5pbmdCYWxhbmNlKCRjdXN0b21lcl9pZCk7CiAgICAkY2xvc2luZ19iYWxhbmNlID0gKCgoJGRlYml0Ki0xKSskY3JlZGl0KSkrJG9wZW5pbmdfYmFsYW5jZVsnYmFsYW5jZSddOwoKICAgIHJldHVybiBcQXBwXE1vZGVsc1xTYWxlc1xDdXN0b21lckxlZGdlcjo6Y3JlYXRlKFsKICAgICAgICAnY3VzdG9tZXJfaWQnID0+ICRjdXN0b21lcl9pZCwKICAgICAgICAnY3VzdG9tZXJfcGF5bWVudF9pZCcgPT4gJGN1c3RvbWVyX3BheW1lbnRfaWQsCiAgICAgICAgJ2RhdGUnID0+ICRkYXRlLAogICAgICAgICdleGNoYW5nZV9yYXRlX2lkJyA9PiAkZXhjaGFuZ2VfcmF0ZV9pZCwKICAgICAgICAnb3BlbmluZ19iYWxhbmNlJyA9PiAkb3BlbmluZ19iYWxhbmNlWydiYWxhbmNlJ10sCiAgICAgICAgJ2RlYml0JyA9PiAkZGViaXQsCiAgICAgICAgJ2NyZWRpdCcgPT4gJGNyZWRpdCwKICAgICAgICAnY2xvc2luZ19iYWxhbmNlJyA9PiAkY2xvc2luZ19iYWxhbmNlLAogICAgICAgICdwYXltZW50X3R5cGUnID0+ICRwYXltZW50X3R5cGUsCiAgICAgICAgJ3BheW1lbnRfZGV0YWlscycgPT4gJHBheW1lbnRfZGV0YWlscywKICAgICAgICAnbm90ZXMnID0+ICRub3RlcywKICAgICAgICAnYmFua19hY2NvdW50X2lkJyA9PiAkYmFua19hY2NvdW50X2lkLAogICAgXSk7Cn0KCmZ1bmN0aW9uIHNhdmVHTEZvck9iamVjdHMoJHBhcmVudCwgJG9iamVjdCwgJHJlcXVlc3QsICRmaWVsZCwgJGFjY291bnRfZ3JvdXBfaWQpewogICAgJHN5c3RlbUN1cnJlbmN5ID0gc3lzdGVtQ3VycmVuY3koKTsKICAgIGlmKCFlbXB0eSgkcmVxdWVzdC0+bGVkZ2VyX25hbWVbJGZpZWxkXSkpewogICAgICAgIGlmKGlzc2V0KCRvYmplY3QtPmlkKSl7CiAgICAgICAgICAgICRvYmplY3QtPm5hbWUgPSAkcmVxdWVzdC0+bGVkZ2VyX25hbWVbJGZpZWxkXTsKICAgICAgICAgICAgJG9iamVjdC0+dHlwZSA9ICRyZXF1ZXN0LT5sZWRnZXJfdHlwZVskZmllbGRdOwogICAgICAgICAgICAkb2JqZWN0LT5leGNoYW5nZV9yYXRlX2lkID0gZ2V0RXhjaGFuZ2VSYXRlcygkc3lzdGVtQ3VycmVuY3ktPmlkLCBkYXRlKCdZLW0tZCcpLCBkYXRlKCdIOmk6cycpKVsncmF0ZSddLT5pZDsKICAgICAgICAgICAgJG9iamVjdC0+b3BlbmluZ19iYWxhbmNlID0gJHJlcXVlc3QtPm9wZW5pbmdfYmFsYW5jZVskZmllbGRdOwogICAgICAgICAgICAkb2JqZWN0LT5zYXZlKCk7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICRvYmplY3QgPSBDaGFydE9mQWNjb3VudDo6Y3JlYXRlKFsKICAgICAgICAgICAgICAgICdhY2NvdW50X2dyb3VwX2lkJyA9PiAkYWNjb3VudF9ncm91cF9pZCwKICAgICAgICAgICAgICAgICdjb2RlJyA9PiB1bmlxdWVDb2RlV2l0aG91dFByZWZpeCg0LCAnY2hhcnRfb2ZfYWNjb3VudHMnLCAnY29kZScpLAogICAgICAgICAgICAgICAgJ25hbWUnID0+ICRyZXF1ZXN0LT5sZWRnZXJfbmFtZVskZmllbGRdLAogICAgICAgICAgICAgICAgJ3R5cGUnID0+ICRyZXF1ZXN0LT5sZWRnZXJfdHlwZVskZmllbGRdLAogICAgICAgICAgICAgICAgJ2V4Y2hhbmdlX3JhdGVfaWQnID0+IGdldEV4Y2hhbmdlUmF0ZXMoJHN5c3RlbUN1cnJlbmN5LT5pZCwgZGF0ZSgnWS1tLWQnKSwgZGF0ZSgnSDppOnMnKSlbJ3JhdGUnXS0+aWQsCiAgICAgICAgICAgICAgICAnb3BlbmluZ19iYWxhbmNlJyA9PiAkcmVxdWVzdC0+b3BlbmluZ19iYWxhbmNlWyRmaWVsZF0sCiAgICAgICAgICAgICAgICAnbm90ZXMnID0+ICRyZXF1ZXN0LT5sZWRnZXJfbmFtZVskZmllbGRdLAogICAgICAgICAgICBdKTsKICAgICAgICB9CgogICAgICAgICRwYXJlbnQtPiRmaWVsZCA9ICRvYmplY3QtPmlkOwogICAgICAgICRwYXJlbnQtPnNhdmUoKTsKICAgIH0KfQoKZnVuY3Rpb24gY2FsY3VsYXRlRGVwcmVjaWF0aW9uQW1vdW50KCRpdGVtLCAkZnJvbSwgJHRvKXsKICAgICRmcm9tID0gKHN0cnRvdGltZSgkaXRlbS0+ZGVwcmVjaWF0aW9uX3N0YXJ0X2RhdGUpID4gc3RydG90aW1lKCRmcm9tKSA/ICRpdGVtLT5kZXByZWNpYXRpb25fc3RhcnRfZGF0ZSA6ICRmcm9tKTsKCiAgICAkYW1vdW50ID0gMDsKICAgICRkZXByaWNpYXRlZEFtb3VudCA9ICRpdGVtLT5kZXByZWNpYXRpb25zLT5zdW0oJ2Ftb3VudCcpOwoKICAgICRwZXJjZW50YWdlID0gJGl0ZW0tPmRlcHJlY2lhdGlvbl9yYXRlOwoKICAgICRwcmljZSA9IGFzc2V0VmFsdWUoJGl0ZW0pOwoKICAgICRwZXJEYXkgPSAoJHByaWNlID4gMCAmJiAkcGVyY2VudGFnZSA+IDAgPyAoKCRwcmljZSooJHBlcmNlbnRhZ2UvMTAwKSkvMzY1KSA6IDApOwoKICAgICRkYXRlMSA9IG5ldyBcRGF0ZVRpbWUoJGZyb20pOwogICAgJGRhdGUyID0gbmV3IFxEYXRlVGltZSgkdG8pOwogICAgJGRheXMgID0gJGRhdGUyLT5kaWZmKCRkYXRlMSktPmZvcm1hdCgnJWEnKSsxOwogICAgCiAgICAkYW1vdW50ID0gJGRheXMqJHBlckRheTsKCiAgICAkZHVlID0gJHByaWNlLSRkZXByaWNpYXRlZEFtb3VudDsKCiAgICByZXR1cm4gc3lzdGVtRG91YmxlVmFsdWUoJGFtb3VudCA+ICRkdWUgPyAkZHVlIDogJGFtb3VudCk7Cn0KCmZ1bmN0aW9uIGFzc2V0VmFsdWUoJGl0ZW0pewogICAgcmV0dXJuICRpdGVtLT5hc3NldF92YWx1ZTsKfQoKZnVuY3Rpb24gZW50cnlJdGVtQ29kZXMoJGVudHJ5LCAkdHlwZSl7CiAgICByZXR1cm4gQ2hhcnRPZkFjY291bnQ6OndoZXJlSW4oJ2lkJywgJGVudHJ5LT5pdGVtcy0+d2hlcmUoJ2RlYml0X2NyZWRpdCcsICR0eXBlKS0+cGx1Y2soJ2NoYXJ0X29mX2FjY291bnRfaWQnKS0+dG9BcnJheSgpKS0+cGx1Y2soJ2NvZGUnKS0+aW1wbG9kZSgnLCAnKTsKfQoKZnVuY3Rpb24gc3lzdGVtRG91YmxlVmFsdWUoJHZhbHVlLCAkZGlnaXRzID0gNCl7CiAgICByZXR1cm4gc3ByaW50ZignJS4nLiRkaWdpdHMuJ2YnLCBmbG9vcigkdmFsdWUqMTAwMDAqKCR2YWx1ZT4wPzE6LTEpKS8xMDAwMCooJHZhbHVlPjA/MTotMSkpOwp9CgpmdW5jdGlvbiBzYXZlUE9FbnRyeSgkZW50cnksICRzdXBwbGllcl9pZCwgJHBvX2lkLCAkdHlwZSl7CiAgICBpZigkZW50cnlbJ3N1Y2Nlc3MnXSl7CiAgICAgICAgUHVyY2hhc2VPcmRlckVudHJ5Ojp1cGRhdGVPckNyZWF0ZShbCiAgICAgICAgICAgICdzdXBwbGllcl9pZCcgPT4gJHN1cHBsaWVyX2lkLAogICAgICAgICAgICAncHVyY2hhc2Vfb3JkZXJfaWQnID0+ICRwb19pZCwKICAgICAgICAgICAgJ3R5cGUnID0+ICR0eXBlLAogICAgICAgICAgICAnZW50cnlfaWQnID0+ICRlbnRyeVsnZW50cnknXS0+aWQsCiAgICAgICAgXSxbCiAgICAgICAgICAgICd1cGRhdGVkX2F0JyA9PiBkYXRlKCdZLW0tZCBIOmk6cycpCiAgICAgICAgXSk7CiAgICB9Cn0KCmZ1bmN0aW9uIHN5c3RlbU1vbmV5Rm9ybWF0KCRhbW91bnQgPSAwLCAkc3ltYm9sID0gJycpewogICAgcmV0dXJuIGltcGxvZGUoJy4nLCBleHBsb2RlKCcuJywgbnVtYmVyX2Zvcm1hdCgkYW1vdW50LCAyKSkpLiRzeW1ib2w7Cn0KCmZ1bmN0aW9uIGdldEV4Y2hhbmdlUmF0ZXMoJGN1cnJlbmN5X2lkLCAkZGF0ZSA9IGZhbHNlLCAkdGltZSA9IGZhbHNlLCAkaWQgPSBmYWxzZSl7CiAgICAkY3VycmVuY3kgPSBcQXBwXE1vZGVsc1xQbXNNb2RlbHNcQWNjb3VudHNcQ3VycmVuY3k6OmZpbmQoJGN1cnJlbmN5X2lkKTsKCiAgICAkZGF0ZSA9ICgkZGF0ZSA/ICRkYXRlIDogZGF0ZSgnWS1tLWQnKSk7CiAgICAkdGltZSA9ICgkdGltZSA/ICR0aW1lIDogZGF0ZSgnSDppOnMnKSk7CiAgICAkcmF0ZSA9IFxBcHBcTW9kZWxzXFBtc01vZGVsc1xBY2NvdW50c1xFeGNoYW5nZVJhdGU6OndoZXJlKCdjdXJyZW5jeV9pZCcsICRjdXJyZW5jeV9pZCkKICAgIC0+d2hlbigkaWQsIGZ1bmN0aW9uKCRxdWVyeSkgdXNlKCRpZCl7CiAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ2lkJywgJGlkKTsKICAgIH0pCiAgICAtPndoZW4oISRpZCwgZnVuY3Rpb24oJHF1ZXJ5KSB1c2UoJGRhdGUsICR0aW1lKXsKICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnZGF0ZXRpbWUnLCAnPD0nLCAkZGF0ZS4nICcuJHRpbWUpOwogICAgfSkKICAgIC0+b3JkZXJCeSgnZGF0ZXRpbWUnLCAnZGVzYycpCiAgICAtPmZpcnN0KCk7CgogICAgJHJhdGVzID0gZmFsc2U7CiAgICBpZihpc3NldCgkcmF0ZS0+aWQpKXsKICAgICAgICAkZXhjaGFuZ2VSYXRlcyA9IGpzb25fZGVjb2RlKCRyYXRlLT5yYXRlcywgdHJ1ZSk7CiAgICAgICAgaWYoaXNfYXJyYXkoJGV4Y2hhbmdlUmF0ZXMpICYmIGNvdW50KCRleGNoYW5nZVJhdGVzKSA+IDApewogICAgICAgICAgICAkcmF0ZXMgPSBbXTsKICAgICAgICAgICAgZm9yZWFjaCgkZXhjaGFuZ2VSYXRlcyBhcyAkdGhpc19jdXJyZW5jeV9pZCA9PiAkdGhpc19yYXRlKXsKICAgICAgICAgICAgICAgICR0aGlzX2N1cnJlbmN5ID0gXEFwcFxNb2RlbHNcUG1zTW9kZWxzXEFjY291bnRzXEN1cnJlbmN5OjpmaW5kKCR0aGlzX2N1cnJlbmN5X2lkKTsKICAgICAgICAgICAgICAgIGlmKGlzc2V0KCR0aGlzX2N1cnJlbmN5LT5pZCkpewogICAgICAgICAgICAgICAgICAgICRyYXRlc1skdGhpc19jdXJyZW5jeV9pZF0gPSBbCiAgICAgICAgICAgICAgICAgICAgICAgICdjdXJyZW5jeScgPT4gJHRoaXNfY3VycmVuY3ksCiAgICAgICAgICAgICAgICAgICAgICAgICdyYXRlJyA9PiAkdGhpc19yYXRlWydyYXRlJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICdkZXNjcmlwdGlvbicgPT4gJHRoaXNfcmF0ZVsnZGVzY3JpcHRpb24nXQogICAgICAgICAgICAgICAgICAgIF07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgcmV0dXJuIFsKICAgICAgICAnY3VycmVuY3knID0+ICRjdXJyZW5jeSwKICAgICAgICAncmF0ZScgPT4gaXNzZXQoJHJhdGUtPmlkKSA/ICRyYXRlIDogZmFsc2UsCiAgICAgICAgJ3JhdGVzJyA9PiAkcmF0ZXMKICAgIF07Cn0KCmZ1bmN0aW9uIHN5c3RlbUN1cnJlbmN5KCRjdXJyZW5jeV9pZCA9IDAsICRhY2NvdW50RGVmYXVsdFNldHRpbmdzID0gZmFsc2UpewogICAgaWYoISRhY2NvdW50RGVmYXVsdFNldHRpbmdzKXsKICAgICAgICAkYWNjb3VudERlZmF1bHRTZXR0aW5ncyA9IGFjY291bnREZWZhdWx0U2V0dGluZ3MoKTsKICAgIH0KICAgIAogICAgaWYoJGN1cnJlbmN5X2lkID09IDApewogICAgICAgICRjdXJyZW5jeV9pZCA9ICRhY2NvdW50RGVmYXVsdFNldHRpbmdzWydjdXJyZW5jeV9pZCddOwogICAgfQogICAgcmV0dXJuIFxBcHBcTW9kZWxzXFBtc01vZGVsc1xBY2NvdW50c1xDdXJyZW5jeTo6ZmluZCgkY3VycmVuY3lfaWQpOwp9CgpmdW5jdGlvbiBleGNoYW5nZVJhdGUoJGV4Y2hhbmdlUmF0ZSwgJGN1cnJlbmN5X2lkKXsKICAgICRyYXRlcyA9IGpzb25fZGVjb2RlKCRleGNoYW5nZVJhdGUtPnJhdGVzLCB0cnVlKTsKICAgIHJldHVybiBpc3NldCgkcmF0ZXNbJGN1cnJlbmN5X2lkXVsncmF0ZSddKSA/ICRyYXRlc1skY3VycmVuY3lfaWRdWydyYXRlJ10gOiAxOwp9CgpmdW5jdGlvbiBsb2FuQ3ljbGVzKCl7CiAgICByZXR1cm4gWwogICAgICAgICdtb250aGx5JyA9PiBbCiAgICAgICAgICAgICduYW1lJyA9PiAnTW9udGhseScsCiAgICAgICAgICAgICdkYXlzJyA9PiAzMCwKICAgICAgICBdLAogICAgICAgICdxdWFydGVybHknID0+IFsKICAgICAgICAgICAgJ25hbWUnID0+ICdRdWFydGVybHknLAogICAgICAgICAgICAnZGF5cycgPT4gOTAsCiAgICAgICAgXSwKICAgICAgICAnc2VtaWFudWFsbHknID0+IFsKICAgICAgICAgICAgJ25hbWUnID0+ICdTZW1pLWFudWFsbHknLAogICAgICAgICAgICAnZGF5cycgPT4gMTgwLAogICAgICAgIF0sCiAgICAgICAgJ2FubnVhbGx5JyA9PiBbCiAgICAgICAgICAgICduYW1lJyA9PiAnYW5udWFsbHknLAogICAgICAgICAgICAnZGF5cycgPT4gMzYwLAogICAgICAgIF0KICAgIF07Cn0KCmZ1bmN0aW9uIHN1bU9mU2VuZFJGUCgkcHJvZHVjdF9pZCwgJHJlcXVpc2l0aW9uX2lkLCAkZGVsaXZlcnkgPSB0cnVlKXsKICAgIHJldHVybiBcQXBwXE1vZGVsc1xQbXNNb2RlbHNcUmVxdWlzaXRpb25EZWxpdmVyeUl0ZW06OndoZXJlKCdwcm9kdWN0X2lkJywgJHByb2R1Y3RfaWQpCiAgICAgICAgLT53aGVuKCRkZWxpdmVyeSwgZnVuY3Rpb24oJHF1ZXJ5KSB1c2UoJHJlcXVpc2l0aW9uX2lkKXsKICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmVIYXMoJ3JlbFJlcXVpc2l0aW9uRGVsaXZlcnknLCBmdW5jdGlvbigkcXVlcnkpIHVzZSgkcmVxdWlzaXRpb25faWQpewogICAgICAgICAgICAgICAgJHF1ZXJ5LT53aGVyZSgncmVxdWlzaXRpb25faWQnLCAkcmVxdWlzaXRpb25faWQpOwogICAgICAgICAgICB9KTsKICAgICAgICB9KQogICAgICAgIC0+d2hlcmVIYXMoJ3JlbFJlcXVpc2l0aW9uRGVsaXZlcnkucmVsUmVxdWlzaXRpb24nLCBmdW5jdGlvbigkcXVlcnkpewogICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnc3RhdHVzJywgMSkKICAgICAgICAgICAgICAgICAgICAgICAgIC0+d2hlcmUoJ3JlcXVlc3Rfc3RhdHVzJywnc2VuZF9yZnAnKQogICAgICAgICAgICAgICAgICAgICAgICAgLT53aGVyZUhhcygncmVxdWlzaXRpb25JdGVtcycsIGZ1bmN0aW9uKCRxdWVyeSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcXVlcnktPndoZXJlKCdpc19zZW5kJywnbm8nKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgIH0pCiAgICAgICAgLT5zdW0oJ2RlbGl2ZXJ5X3F0eScpOwp9CgpmdW5jdGlvbiBGaXhlZEFzc2V0QmF0Y2hJdGVtVXNlckRhdGEoJGl0ZW0pCnsKICAgIHJldHVybiBGaXhlZEFzc2V0QmF0Y2hJdGVtVXNlcjo6d2hlcmUoWwogICAgICAgICdmaXhlZF9hc3NldF9iYXRjaF9pdGVtX2lkJyA9PiAkaXRlbS0+aWQsCiAgICAgICAgJ2lzX3Rha2VuJyA9PiAwLAogICAgXSktPm9yZGVyQnkoJ2Zyb20nLCAnZGVzYycpLT5maXJzdCgpOwp9CgpmdW5jdGlvbiBzYXZlQ2hlcXVlKCRiYW5rX2FjY291bnRfaWQsICRlbnRyeV9pZCwgJHN1cHBsaWVyX2xlZGdlcl9pZCA9IDAsICRkYXRldGltZSA9IGZhbHNlLCAkc291cmNlID0gJycsICR0eXBlID0gJycsICRjaGVxdWVfbnVtYmVyID0gJycsICRkZWJpdF9jcmVkaXQgPSAnQycsICRhbW91bnQgPSAwLCAkbmFycmF0aW9uID0gJycpewogICAgJHJlZ2lzdGVyID0gQ2hlcXVlUmVnaXN0ZXI6OnVwZGF0ZU9yQ3JlYXRlKFsKICAgICAgICAnYmFua19hY2NvdW50X2lkJyA9PiAkYmFua19hY2NvdW50X2lkLAogICAgICAgICdlbnRyeV9pZCcgPT4gJGVudHJ5X2lkLAogICAgICAgICdzdXBwbGllcl9sZWRnZXJfaWQnID0+ICRzdXBwbGllcl9sZWRnZXJfaWQsCiAgICBdLCBbCiAgICAgICAgJ2NoZXF1ZV9udW1iZXInID0+ICRjaGVxdWVfbnVtYmVyLAogICAgICAgICdkYXRldGltZScgPT4gJGRhdGV0aW1lID8gJGRhdGV0aW1lIDogZGF0ZSgnWS1tLWQgSDppOnMnKSwKICAgICAgICAnc291cmNlJyA9PiAkc291cmNlLAogICAgICAgICd0eXBlJyA9PiAkdHlwZSwKICAgICAgICAnZGViaXRfY3JlZGl0JyA9PiAkZGViaXRfY3JlZGl0LAogICAgICAgICdhbW91bnQnID0+ICRhbW91bnQsCiAgICAgICAgJ25hcnJhdGlvbicgPT4gJG5hcnJhdGlvbiwKICAgIF0pOwogICAgCiAgICBcQXBwXE1vZGVsc1xQbXNNb2RlbHNcQWNjb3VudHNcQ2hlcXVlQm9va1BhZ2VFbnRyeTo6dXBkYXRlT3JDcmVhdGUoWwogICAgICAgICdjaGVxdWVfYm9va19wYWdlX2lkJyA9PiBcQXBwXE1vZGVsc1xQbXNNb2RlbHNcQWNjb3VudHNcQ2hlcXVlQm9va1BhZ2U6OndoZXJlKCdwYWdlX251bWJlcicsICRjaGVxdWVfbnVtYmVyKS0+Zmlyc3QoKS0+aWQsCiAgICAgICAgJ2VudHJ5X2lkJyA9PiAkZW50cnlfaWQKICAgIF0pOwoKICAgIHJldHVybiAkcmVnaXN0ZXI7Cn0KCmZ1bmN0aW9uIHRyYW5zYWN0aW9uU291cmNlKCRpdGVtKXsKICAgICRzb3VyY2UgPSAnJzsKICAgIHRyeXsKICAgICAgICBpZihpc3NldCgkaXRlbS0+dHlwZSkgJiYgIWVtcHR5KCRpdGVtLT50eXBlKSl7CiAgICAgICAgICAgICRkYXRhID0gW107CiAgICAgICAgICAgIGlmKCRpdGVtLT50eXBlID09ICdncm4nKXsKICAgICAgICAgICAgICAgICRtb2RlbCA9IFxBcHBcTW9kZWxzXFBtc01vZGVsc1xHcm5cR29vZHNSZWNlaXZlZEl0ZW1TdG9ja0luOjpmaW5kT3JGYWlsKCRpdGVtLT5zb3VyY2UpOwogICAgICAgICAgICB9ZWxzZWlmKCRpdGVtLT50eXBlID09ICdwcm9kdWN0LWRlbGl2ZXJ5Jyl7CiAgICAgICAgICAgICAgICAkbW9kZWwgPSBcQXBwXE1vZGVsc1xQbXNNb2RlbHNcUmVxdWlzaXRpb25EZWxpdmVyeUl0ZW06OmZpbmRPckZhaWwoJGl0ZW0tPnNvdXJjZSk7CiAgICAgICAgICAgIH1lbHNlaWYoJGl0ZW0tPnR5cGUgPT0gJ3BvLWJpbGwnKXsKICAgICAgICAgICAgICAgICRtb2RlbCA9IFxBcHBcTW9kZWxzXFBtc01vZGVsc1xQdXJjaGFzZVxQdXJjaGFzZU9yZGVyQXR0YWNobWVudDo6ZmluZE9yRmFpbCgkaXRlbS0+c291cmNlKTsKICAgICAgICAgICAgfWVsc2VpZihpbl9hcnJheSgkaXRlbS0+dHlwZSwgWydhZHZhbmNlLXBheW1lbnQnLCAnYWR2YW5jZS1jbGVhcmluZycsICdzdXBwbGllci1wYXltZW50J10pKXsKICAgICAgICAgICAgICAgICRtb2RlbCA9IFxBcHBcTW9kZWxzXFBtc01vZGVsc1xTdXBwbGllclBheW1lbnQ6OmZpbmRPckZhaWwoJGl0ZW0tPnNvdXJjZSk7CiAgICAgICAgICAgIH1lbHNlaWYoJGl0ZW0tPnR5cGUgPT0gJ2Fzc2V0LWNvc3QtZW50cnknKXsKICAgICAgICAgICAgICAgICRtb2RlbCA9IFxBcHBcTW9kZWxzXEZpeGVkQXNzZXRzXEFzc2V0Q29zdGluZ0VudHJ5OjpmaW5kT3JGYWlsKCRpdGVtLT5zb3VyY2UpOwogICAgICAgICAgICB9ZWxzZWlmKCRpdGVtLT50eXBlID09ICdjd2lwLXRvLWFzc2V0Jyl7CiAgICAgICAgICAgICAgICAkbW9kZWwgPSBcQXBwXE1vZGVsc1xGaXhlZEFzc2V0c1xGaXhlZEFzc2V0QmF0Y2g6OmZpbmRPckZhaWwoJGl0ZW0tPnNvdXJjZSk7CiAgICAgICAgICAgIH1lbHNlaWYoJGl0ZW0tPnR5cGUgPT0gJ2ZpbmFsLWFzc2V0Jyl7CiAgICAgICAgICAgICAgICAkbW9kZWwgPSBcQXBwXE1vZGVsc1xGaXhlZEFzc2V0c1xGaXhlZEFzc2V0QmF0Y2hJdGVtOjp3aGVyZSgnYXNzZXRfY29kZScsICRpdGVtLT5zb3VyY2UpLT5maXJzdCgpOwogICAgICAgICAgICB9ZWxzZWlmKCRpdGVtLT50eXBlID09ICdkZXByZWNpYXRpb24nKXsKICAgICAgICAgICAgICAgICRzb3VyY2VzID0gaXNzZXQoanNvbl9kZWNvZGUoJGl0ZW0tPnNvdXJjZSwgdHJ1ZSlbJ2Fzc2V0X2NvZGUnXSkgPyBqc29uX2RlY29kZSgkaXRlbS0+c291cmNlLCB0cnVlKSA6IFsKICAgICAgICAgICAgICAgICAgICAnYXNzZXRfY29kZScgPT4gJycsCiAgICAgICAgICAgICAgICAgICAgJ2Zyb20nID0+ICcnLAogICAgICAgICAgICAgICAgICAgICd0bycgPT4gJycsCiAgICAgICAgICAgICAgICBdOwogICAgICAgICAgICAgICAgJG1vZGVsID0gXEFwcFxNb2RlbHNcRml4ZWRBc3NldHNcRml4ZWRBc3NldEJhdGNoSXRlbTo6d2hlcmUoJ2Fzc2V0X2NvZGUnLCAkc291cmNlc1snYXNzZXRfY29kZSddKS0+Zmlyc3QoKTsKICAgICAgICAgICAgICAgICRkYXRhWydzb3VyY2VzJ10gPSAkc291cmNlczsKCiAgICAgICAgICAgIH1lbHNlaWYoJGl0ZW0tPnR5cGUgPT0gJ2Rpc3Bvc2FsJyl7CiAgICAgICAgICAgICAgICAkbW9kZWwgPSBcQXBwXE1vZGVsc1xGaXhlZEFzc2V0c1xGaXhlZEFzc2V0QmF0Y2hJdGVtOjp3aGVyZSgnYXNzZXRfY29kZScsICRpdGVtLT5zb3VyY2UpLT5maXJzdCgpOwogICAgICAgICAgICB9ZWxzZWlmKCRpdGVtLT50eXBlID09ICdkZWxpdmVyeScpewogICAgICAgICAgICAgICAgJG1vZGVsID0gXEFwcFxNb2RlbHNcU2FsZXNcU2FsZXNPcmRlckRlbGl2ZXJ5RGV0YWlsOjpmaW5kKCRpdGVtLT5zb3VyY2UpOwogICAgICAgICAgICB9ZWxzZWlmKCRpdGVtLT50eXBlID09ICdpbnZvaWNlJyl7CiAgICAgICAgICAgICAgICAkbW9kZWwgPSBcQXBwXE1vZGVsc1xTYWxlc1xTYWxlc09yZGVyQmlsbDo6ZmluZCgkaXRlbS0+c291cmNlKTsKICAgICAgICAgICAgfWVsc2VpZigkaXRlbS0+dHlwZSA9PSAnaW52b2ljZS1wYXltZW50Jyl7CiAgICAgICAgICAgICAgICAkbW9kZWwgPSBcQXBwXE1vZGVsc1xTYWxlc1xTYWxlc09yZGVyOjpmaW5kKCRpdGVtLT5zb3VyY2UpOwogICAgICAgICAgICB9ZWxzZWlmKCRpdGVtLT50eXBlID09ICdjdXN0b21lci1wYXltZW50Jyl7CiAgICAgICAgICAgICAgICAkbW9kZWwgPSBcQXBwXE1vZGVsc1xTYWxlc1xDdXN0b21lcjo6ZmluZCgkaXRlbS0+c291cmNlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJGRhdGFbJ21vZGVsJ10gPSAkbW9kZWw7CgogICAgICAgICAgICAkc291cmNlID0gdmlldygnYWNjb3VudGluZy5iYWNrZW5kLnBhZ2VzLnRyYW5zYW5jdGlvblNvdXJjZXMuJy4kaXRlbS0+dHlwZSwgJGRhdGEpLT5yZW5kZXIoKTsKICAgICAgICB9CiAgICB9IGNhdGNoIChcVGhyb3dhYmxlICR0aCkgewogICAgICAgICRzb3VyY2UgPSBmYWxzZTsKICAgIH0KCiAgICByZXR1cm4gJHNvdXJjZTsKfQoKZnVuY3Rpb24gdHJhbnNhY3Rpb25WZW5kb3IoJGl0ZW0pewogICAgJHZlbmRvciA9IGZhbHNlOwogICAgJGFjY291bnREZWZhdWx0U2V0dGluZ3MgPSBhY2NvdW50RGVmYXVsdFNldHRpbmdzKCk7CiAgICAkY29hID0gWyRhY2NvdW50RGVmYXVsdFNldHRpbmdzWyd2YXRfcGF5YWJsZSddLCAkYWNjb3VudERlZmF1bHRTZXR0aW5nc1sndGF4X3BheWFibGUnXV07CiAgICB0cnl7CiAgICAgICAgaWYoaXNzZXQoJGl0ZW0tPnR5cGUpICYmICFlbXB0eSgkaXRlbS0+dHlwZSkpewogICAgICAgICAgICBpZigkaXRlbS0+dHlwZSA9PSAncG8tYmlsbCcpewogICAgICAgICAgICAgICAgJG1vZGVsID0gXEFwcFxNb2RlbHNcUG1zTW9kZWxzXFB1cmNoYXNlXFB1cmNoYXNlT3JkZXJBdHRhY2htZW50OjpmaW5kT3JGYWlsKCRpdGVtLT5zb3VyY2UpOwogICAgICAgICAgICAgICAgYXJyYXlfcHVzaCgkY29hLCAkbW9kZWwtPnJlbFB1cmNoYXNlT3JkZXItPnJlbFF1b3RhdGlvbi0+cmVsU3VwcGxpZXJzLT5wYXlhYmxlX2FjY291bnRfaWQgPiAwID8gJG1vZGVsLT5yZWxQdXJjaGFzZU9yZGVyLT5yZWxRdW90YXRpb24tPnJlbFN1cHBsaWVycy0+cGF5YWJsZV9hY2NvdW50X2lkIDogJGFjY291bnREZWZhdWx0U2V0dGluZ3NbJ3N1cHBsaWVyX3BheWFibGVfYWNjb3VudCddKTsKICAgICAgICAgICAgICAgIGFycmF5X3B1c2goJGNvYSwgJG1vZGVsLT5yZWxQdXJjaGFzZU9yZGVyLT5yZWxRdW90YXRpb24tPnJlbFN1cHBsaWVycy0+YWR2YW5jZV9hY2NvdW50X2lkID4gMCA/ICRtb2RlbC0+cmVsUHVyY2hhc2VPcmRlci0+cmVsUXVvdGF0aW9uLT5yZWxTdXBwbGllcnMtPmFkdmFuY2VfYWNjb3VudF9pZCA6ICRhY2NvdW50RGVmYXVsdFNldHRpbmdzWydzdXBwbGllcl9hZHZhbmNlX2FjY291bnQnXSk7CiAgICAgICAgICAgICAgICBpZihpbl9hcnJheSgkaXRlbS0+Y2hhcnRfb2ZfYWNjb3VudF9pZCwgJGNvYSkpewogICAgICAgICAgICAgICAgICAgICR2ZW5kb3IgPSAnPGJyPlsnLiRtb2RlbC0+cmVsUHVyY2hhc2VPcmRlci0+cmVsUXVvdGF0aW9uLT5yZWxTdXBwbGllcnMtPmNvZGUgLiddICcuJG1vZGVsLT5yZWxQdXJjaGFzZU9yZGVyLT5yZWxRdW90YXRpb24tPnJlbFN1cHBsaWVycy0+bmFtZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfWVsc2VpZihpbl9hcnJheSgkaXRlbS0+dHlwZSwgWydhZHZhbmNlLXBheW1lbnQnLCAnYWR2YW5jZS1jbGVhcmluZycsICdzdXBwbGllci1wYXltZW50J10pKXsKICAgICAgICAgICAgICAgICRtb2RlbCA9IFxBcHBcTW9kZWxzXFBtc01vZGVsc1xTdXBwbGllclBheW1lbnQ6OmZpbmRPckZhaWwoJGl0ZW0tPnNvdXJjZSk7CiAgICAgICAgICAgICAgICBhcnJheV9wdXNoKCRjb2EsICRtb2RlbC0+cmVsU3VwcGxpZXItPnBheWFibGVfYWNjb3VudF9pZCA+IDAgPyAkbW9kZWwtPnJlbFN1cHBsaWVyLT5wYXlhYmxlX2FjY291bnRfaWQgOiAkYWNjb3VudERlZmF1bHRTZXR0aW5nc1snc3VwcGxpZXJfcGF5YWJsZV9hY2NvdW50J10pOwogICAgICAgICAgICAgICAgYXJyYXlfcHVzaCgkY29hLCAkbW9kZWwtPnJlbFN1cHBsaWVyLT5hZHZhbmNlX2FjY291bnRfaWQgPiAwID8gJG1vZGVsLT5yZWxTdXBwbGllci0+YWR2YW5jZV9hY2NvdW50X2lkIDogJGFjY291bnREZWZhdWx0U2V0dGluZ3NbJ3N1cHBsaWVyX2FkdmFuY2VfYWNjb3VudCddKTsKICAgICAgICAgICAgICAgIGlmKGluX2FycmF5KCRpdGVtLT5jaGFydF9vZl9hY2NvdW50X2lkLCAkY29hKSl7CiAgICAgICAgICAgICAgICAgICAgJHZlbmRvciA9ICc8YnI+WycuJG1vZGVsLT5yZWxTdXBwbGllci0+Y29kZS4nXSAnLiRtb2RlbC0+cmVsU3VwcGxpZXItPm5hbWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1lbHNlaWYoJGl0ZW0tPnR5cGUgPT0gJ2Fzc2V0LWNvc3QtZW50cnknKXsKICAgICAgICAgICAgICAgICRtb2RlbCA9IFxBcHBcTW9kZWxzXEZpeGVkQXNzZXRzXEFzc2V0Q29zdGluZ0VudHJ5OjpmaW5kT3JGYWlsKCRpdGVtLT5zb3VyY2UpOwogICAgICAgICAgICAgICAgYXJyYXlfcHVzaCgkY29hLCAkbW9kZWwtPnB1cmNoYXNlT3JkZXItPnJlbFF1b3RhdGlvbi0+cmVsU3VwcGxpZXJzLT5wYXlhYmxlX2FjY291bnRfaWQgPiAwID8gJG1vZGVsLT5wdXJjaGFzZU9yZGVyLT5yZWxRdW90YXRpb24tPnJlbFN1cHBsaWVycy0+cGF5YWJsZV9hY2NvdW50X2lkIDogJGFjY291bnREZWZhdWx0U2V0dGluZ3NbJ3N1cHBsaWVyX3BheWFibGVfYWNjb3VudCddKTsKICAgICAgICAgICAgICAgIGFycmF5X3B1c2goJGNvYSwgJG1vZGVsLT5wdXJjaGFzZU9yZGVyLT5yZWxRdW90YXRpb24tPnJlbFN1cHBsaWVycy0+YWR2YW5jZV9hY2NvdW50X2lkID4gMCA/ICRtb2RlbC0+cHVyY2hhc2VPcmRlci0+cmVsUXVvdGF0aW9uLT5yZWxTdXBwbGllcnMtPmFkdmFuY2VfYWNjb3VudF9pZCA6ICRhY2NvdW50RGVmYXVsdFNldHRpbmdzWydzdXBwbGllcl9hZHZhbmNlX2FjY291bnQnXSk7CiAgICAgICAgICAgICAgICBpZihpbl9hcnJheSgkaXRlbS0+Y2hhcnRfb2ZfYWNjb3VudF9pZCwgJGNvYSkpewogICAgICAgICAgICAgICAgICAgICR2ZW5kb3IgPSAkbW9kZWwtPnN1cHBsaWVyID8gJzxicj5bJy4kbW9kZWwtPnN1cHBsaWVyLT5jb2RlLiddICcuJG1vZGVsLT5zdXBwbGllci0+bmFtZSA6ICgnPGJyPlsnLiRtb2RlbC0+cHVyY2hhc2VPcmRlci0+cmVsUXVvdGF0aW9uLT5yZWxTdXBwbGllcnMtPmNvZGUuJ10gJy4kbW9kZWwtPnB1cmNoYXNlT3JkZXItPnJlbFF1b3RhdGlvbi0+cmVsU3VwcGxpZXJzLT5uYW1lKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0gY2F0Y2ggKFxUaHJvd2FibGUgJHRoKSB7CiAgICAgICAgCiAgICB9CgogICAgcmV0dXJuICR2ZW5kb3I7Cn0KCmZ1bmN0aW9uIGdldEVudHJ5VmVuZG9yKCRlbnRyeSl7CiAgICAkc3VwcGxpZXIgPSAnJzsKICAgIGlmKGlzc2V0KCRlbnRyeS0+cHVyY2hhc2VPcmRlci0+aWQpKXsKICAgICAgICBpZihpc3NldCgkZW50cnktPnB1cmNoYXNlT3JkZXItPnN1cHBsaWVyLT5pZCkpewogICAgICAgICAgICAkc3VwcGxpZXIgPSAkZW50cnktPnB1cmNoYXNlT3JkZXItPnN1cHBsaWVyLT5uYW1lLicgKCcuJGVudHJ5LT5wdXJjaGFzZU9yZGVyLT5zdXBwbGllci0+Y29kZS4nKSc7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICRzdXBwbGllciA9ICRlbnRyeS0+cHVyY2hhc2VPcmRlci0+cHVyY2hhc2VPcmRlci0+cmVsUXVvdGF0aW9uLT5yZWxTdXBwbGllcnMtPm5hbWUuJyAoJy4kZW50cnktPnB1cmNoYXNlT3JkZXItPnB1cmNoYXNlT3JkZXItPnJlbFF1b3RhdGlvbi0+cmVsU3VwcGxpZXJzLT5jb2RlLicpJzsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gJHN1cHBsaWVyOwp9CgoKZnVuY3Rpb24gZW50cnlDb21wYW5pZXMoJGVudHJ5LCAkbmFtZSA9IHRydWUpewogICAgJGNvbXBhbmllcyA9IFtdOwogICAgaWYoJGVudHJ5LT5pdGVtcy0+Y291bnQoKSA+IDApewogICAgICAgIGZvcmVhY2goJGVudHJ5LT5pdGVtcyBhcyAka2V5ID0+ICRpdGVtKXsKICAgICAgICAgICAgaWYoJG5hbWUpewogICAgICAgICAgICAgICAgJGNvbXBhbnkgPSAnWycuJGl0ZW0tPmNvc3RDZW50cmUtPnByb2ZpdENlbnRyZS0+Y29tcGFueS0+Y29kZS4nXSAnLiRpdGVtLT5jb3N0Q2VudHJlLT5wcm9maXRDZW50cmUtPmNvbXBhbnktPm5hbWU7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgJGNvbXBhbnkgPSAkaXRlbS0+Y29zdENlbnRyZS0+cHJvZml0Q2VudHJlLT5jb21wYW55LT5jb2RlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICBpZighaW5fYXJyYXkoJGNvbXBhbnksICRjb21wYW5pZXMpKXsKICAgICAgICAgICAgICAgIGFycmF5X3B1c2goJGNvbXBhbmllcywgJGNvbXBhbnkpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiBpbXBsb2RlKCcsICcsICRjb21wYW5pZXMpOwp9CgpmdW5jdGlvbiBnZXRUb2tlbigkdG9rZW4pewogICAgdHJ5ewogICAgICAgIGlmKCFzZXNzaW9uKCktPmhhcygndG9rZW4nKSl7CiAgICAgICAgICAgICR1c2VyID0gXEFwcFxVc2VyOjp3aGVyZSgndG9rZW4nLCAkdG9rZW4pLT5maXJzdCgpOwogICAgICAgICAgICBpZihpc3NldCgkdXNlci0+aWQpKXsKICAgICAgICAgICAgICAgIGF1dGgoKS0+bG9naW5Vc2luZ0lkKCR1c2VyLT5pZCk7CiAgICAgICAgICAgICAgICBcREI6OnRhYmxlKCdwZXJzb25hbF9hY2Nlc3NfdG9rZW5zJyktPndoZXJlKCd0b2tlbmFibGVfaWQnLCAkdXNlci0+aWQpLT5kZWxldGUoKTsKICAgICAgICAgICAgICAgIHNlc3Npb24oKS0+cHV0KCd0b2tlbicsICR1c2VyLT5jcmVhdGVUb2tlbignYml6ei1lcnAtZmluYW5jZS1hcGknKS0+cGxhaW5UZXh0VG9rZW4pOwogICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgIHJldHVybiBbCiAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnID0+IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICdtZXNzYWdlJyA9PiAiSW52YWxpZCBUb2tlbiEiLAogICAgICAgICAgICAgICAgICAgICd0b2tlbicgPT4gZmFsc2UKICAgICAgICAgICAgICAgIF07CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgIHJldHVybiBbCiAgICAgICAgICAgICdzdWNjZXNzJyA9PiB0cnVlLAogICAgICAgICAgICAnbWVzc2FnZScgPT4gIkxvZ2dlZCBpbiBTdWNjZXNzZnVsbHkhIiwKICAgICAgICAgICAgJ3Rva2VuJyA9PiBzZXNzaW9uKCktPmdldCgndG9rZW4nKQogICAgICAgIF07CiAgICB9Y2F0Y2ggKFxFeGNlcHRpb24gJGUpewogICAgICAgIHJldHVybiBbCiAgICAgICAgICAgICdzdWNjZXNzJyA9PiBmYWxzZSwKICAgICAgICAgICAgJ21lc3NhZ2UnID0+ICRlLT5nZXRNZXNzYWdlKCksCiAgICAgICAgICAgICd0b2tlbicgPT4gZmFsc2UKICAgICAgICBdOwogICAgfQp9CgpmdW5jdGlvbiBhcHByb3ZhbExldmVsQ2xhc3MoKXsKICAgIHJldHVybiBbCiAgICAgICAgJ3BlbmRpbmcnID0+ICd3YXJuaW5nJywKICAgICAgICAnYXBwcm92ZWQnID0+ICdzdWNjZXNzJywKICAgICAgICAnZGVuaWVkJyA9PiAnZGFuZ2VyJwogICAgXTsKfQoKZnVuY3Rpb24gY2FsY3VsYXRlUE1UKCRhbW91bnQsICRyYXRlLCAkeWVhcil7CiAgJHllYXIgPSAkeWVhciAqIDEyOwogICRyYXRlID0gJHJhdGUgLyAxMjAwOwogICRpbnN0YWxsbWVudCA9ICRyYXRlICogLSRhbW91bnQgKiBwb3coKDEgKyAkcmF0ZSksICR5ZWFyKSAvICgxIC0gcG93KCgxICsgJHJhdGUpLCAkeWVhcikpOwogIHJldHVybiBbCiAgICAnaW5zdGFsbG1lbnQnID0+ICRpbnN0YWxsbWVudCwKICAgICd0b3RhbCcgPT4gJGluc3RhbGxtZW50KiR5ZWFyCiAgXTsKfQoKZnVuY3Rpb24gbGVhc2VQYXlJbnRlcnZhbHMoKXsKICAgIHJldHVybiBbCiAgICAgICAgJ21vbnRobHknID0+IFsKICAgICAgICAgICAgJ2Rpdmlzb3InID0+IDEyLAogICAgICAgICAgICAnaW50ZXJ2YWwnID0+ICcrMSBtb250aHMnLAogICAgICAgIF0sCiAgICAgICAgLy8gJ3llYXJseScgPT4gWwogICAgICAgIC8vICAgICAnZGl2aXNvcicgPT4gMSwKICAgICAgICAvLyAgICAgJ2ludGVydmFsJyA9PiAnKzEgeWVhcnMnLAogICAgICAgIC8vIF0sCiAgICBdOwp9CgpmdW5jdGlvbiBzaG93U3ViTGVkZ2VyKCRpdGVtKXsKICAgIHJldHVybiBpc3NldCgkaXRlbS0+c3ViTGVkZ2VyLT5pZCkgPyAnIHwgWycuJGl0ZW0tPnN1YkxlZGdlci0+Y29kZS4nXSAnLiRpdGVtLT5zdWJMZWRnZXItPm5hbWUgOiAnJzsKfQoKZnVuY3Rpb24gZ2V0Q29tcGFueUluZm9ybWF0aW9uKCRlbnRyeSl7CiAgICBpZihpc3NldCgkZW50cnktPmlkKSAmJiBpc3NldCgkZW50cnktPmxvZ3MtPmZpcnN0KCktPnZhbHVlKSl7CiAgICAgICAgJGxvZyA9IGpzb25fZGVjb2RlKCRlbnRyeS0+bG9ncy0+Zmlyc3QoKS0+dmFsdWUpOwogICAgICAgIGlmKGlzc2V0KCRsb2dbMV0tPmNvbXBhbnlfY29kZSkpewogICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgICAgJ2NvZGUnID0+ICRsb2dbMV0tPmNvbXBhbnlfY29kZSwKICAgICAgICAgICAgICAgICduYW1lJyA9PiAkbG9nWzFdLT5jb21wYW55X25hbWUsCiAgICAgICAgICAgIF07CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiBbCiAgICAgICAgJ2NvZGUnID0+ICcnLAogICAgICAgICduYW1lJyA9PiAnJywKICAgIF07Cn0KCmZ1bmN0aW9uIGFnZWluZ0RheXMoKXsKICAgIHJldHVybiBhcnJheSgKICAgICAgICBbMSwgMzBdLAogICAgICAgIFszMCwgNjBdLAogICAgICAgIFs2MCwgOTBdLAogICAgICAgIFs5MCwgMTgwXSwKICAgICAgICBbMTgwLCAzNjVdLAogICAgICAgIFszNjUsIDUwMF0sCiAgICAgICAgWzUwMCwgZmFsc2VdLAogICAgKTsKfQoKZnVuY3Rpb24gcmVwb3J0VGl0bGUoJGRhdGEsICR0aXRsZSA9ICcnKXsKICAgIGlmKCFpc3NldCgkZGF0YVsnY29tcGFueV9pZCddKSl7CiAgICAgICAgcmV0dXJuICR0aXRsZTsKICAgIH0KICAgIAogICAgJGNvbXBhbnkgPSAnJzsKICAgIGlmKGlzc2V0KCRkYXRhWydjb21wYW55X2lkJ10pICYmICRkYXRhWydjb21wYW55X2lkJ10gPiAwKXsKICAgICAgICAkY29tcGFueSA9IENvbXBhbnk6OmZpbmQoJGRhdGFbJ2NvbXBhbnlfaWQnXSktPmNvZGU7CiAgICB9CgogICAgJHByb2ZpdF9jZW50cmUgPSAnJzsKICAgIGlmKGlzc2V0KCRkYXRhWydwcm9maXRfY2VudHJlX2lkJ10pICYmICRkYXRhWydwcm9maXRfY2VudHJlX2lkJ10gPiAwKXsKICAgICAgICAkcHJvZml0X2NlbnRyZSA9IFByb2ZpdENlbnRyZTo6ZmluZCgkZGF0YVsncHJvZml0X2NlbnRyZV9pZCddKS0+bmFtZTsKICAgIH0KCiAgICAkY29zdF9jZW50cmUgPSAnJzsKICAgIGlmKGlzc2V0KCRkYXRhWydjb3N0X2NlbnRyZV9pZCddKSAmJiAkZGF0YVsnY29zdF9jZW50cmVfaWQnXSA+IDApewogICAgICAgICRjb3N0X2NlbnRyZSA9IENvc3RDZW50cmU6OmZpbmQoJGRhdGFbJ2Nvc3RfY2VudHJlX2lkJ10pLT5uYW1lOwogICAgfQoKICAgICRmaXNjYWxfeWVhciA9ICcnOwogICAgaWYoaXNzZXQoJGRhdGFbJ2Zpc2NhbF95ZWFyX2lkJ10pICYmICRkYXRhWydmaXNjYWxfeWVhcl9pZCddID4gMCl7CiAgICAgICAgJGZpc2NhbF95ZWFyID0gRmlzY2FsWWVhcjo6ZmluZCgkZGF0YVsnZmlzY2FsX3llYXJfaWQnXSktPnRpdGxlOwogICAgfQogICAgcmV0dXJuICR0aXRsZS4nIHwgJy4oIWVtcHR5KCRjb21wYW55KSA/ICRjb21wYW55IDogJycpLicgfCAnLighZW1wdHkoJHByb2ZpdF9jZW50cmUpID8gJHByb2ZpdF9jZW50cmUgOiAnQWxsIFByb2ZpdCBDZW50cmUnKS4nIHwgJy4oIWVtcHR5KCRjb3N0X2NlbnRyZSkgPyAkY29zdF9jZW50cmUgOiAnQWxsIENvc3QgQ2VudHJlJykuJyB8ICcuKCFlbXB0eSgkZmlzY2FsX3llYXIpID8gJGZpc2NhbF95ZWFyIDogJycpLicgfCAnLiRkYXRhWydmcm9tJ10uJyB0byAnLiRkYXRhWyd0byddOwp9