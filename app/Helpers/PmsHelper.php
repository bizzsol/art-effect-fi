<?php
bolt_decrypt( __FILE__ , 'BdBo6s'); return 0;
##!!!##

use App\Models\PmsModels\InventoryModels\InventoryLogs;
use App\Models\PmsModels\Requisition;
use App\Models\PmsModels\Category;
use App\Models\PmsModels\SupplierLog;
use App\Models\PmsModels\SupplierRatings;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\Models\PmsModels\Attribute;
use App\Models\PmsModels\AttributeOption;
use App\Models\PmsModels\ProductAttribute;
use App\Models\PmsModels\Product;
use App\Models\PmsModels\Notification;
use App\Models\PmsModels\Accounts\CostCentre;
use App\Models\MyProject\Program;
use App\Models\PmsModels\Menu\SubMenu;
use App\Models\PmsModels\Accounts\Menu\AccountsSubMenu;
use App\Models\PmsModels\Menu\Menu;
use \App\Models\MyProject\Dependency;
use App\User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Request;

include 'DashboardHelper.php';

function saveSupplierLog($supplier_id, $date, $topic, $text, $id = 0){
	$log = SupplierLog::find($id);
	if(isset($log->id)){
		$log->date = $date;
		$log->topic = $topic;
		$log->log = $text;
		$log->save();
	}else{
		$log = SupplierLog::create([
			'supplier_id' => $supplier_id,
			'date' => $date,
			'topic' => $topic,
			'log' => $text,
		]);
	}

	return $log;
}

function getMergedRequisisionID($condition1, $condition2){
	return array_unique(array_merge(Requisition::where($condition1)->pluck('id')->toArray(), Requisition::where($condition2)->pluck('id')->toArray()));
}

function getTypeWiseRequisistionCount($type='')
{
	return Requisition::when(isset(Auth()->user()->employee->as_department_id),
		function($query){
			return $query->whereHas('relUsersList.employee',function($query){
				return $query->where('as_department_id',Auth()->user()->employee->as_department_id);
			});
		})
	->where('status',$type)
	->count();
}

function inventoryStatus($type = '', $warehouse_id = 0)
{
	return InventoryLogs::where('type', $type)
	->when($warehouse_id > 0, function($query) use($warehouse_id){
		return $query->where('warehouse_id', $warehouse_id);
	})
	->count();
}

function QualityEnsureList($type)
{
	return PurchaseOrder::where('is_send','yes')
	->whereHas('relGoodReceiveNote.relGoodsReceivedItems',function ($query) use($type){
		return $query->where('quality_ensure',$type);
	})->count();
}


function spaces($value, $extra = 0, $noSpaces = true){
	if($noSpaces){
		return ($value+$extra)+2;
	}
	
	$spaces = '';
	for ($i=0; $i < ($value+$extra)*6; $i++) { 
		$spaces .= "&nbsp;";
	}
	return $spaces;
}

function categoryList(){
	return Category::where('parent_id',null)->get();
}

function categoryOptions($subCategories, $chosen = 0, $step = 0, $is_fixed_asset = 0, $is_cwip = 0, $allSubCategories = [], $allCategoryAttributes = []){
	if($step == 0){
		$allSubCategories = Category::with([
			'category', 'subCategory',
		])
		// ->where('is_fixed_asset', $is_fixed_asset)
		// ->where('is_cwip', $is_cwip)
		->orderBy('code')->get();
		$allCategoryAttributes = \App\Models\PmsModels\CategoryAttribute::all();

		$subCategories = $allSubCategories->where('parent_id', 0);
	}

	$data = '';
	if($subCategories->count() > 0){
		foreach ($subCategories as $key => $subCategory) {
			$categoryAttributes = $allCategoryAttributes->where('category_id', $subCategory->id);
			$attributes = [];
			$attributeOptions = [];
			if($categoryAttributes->count() > 0){
				foreach($categoryAttributes as $key => $categoryAttribute){
					array_push($attributes, $categoryAttribute->attribute_id);
					$attributeOptions = array_merge($attributeOptions, (is_array(json_decode($categoryAttribute->options, true)) ? json_decode($categoryAttribute->options, true) : []));
				}
			}
			$attributes = implode(',', $attributes);
			$attributeOptions = implode(',', $attributeOptions);
			$subCategories = $allSubCategories->where('parent_id', $subCategory->id);
			$data .=    '<option value="'.$subCategory->id.'" '.($chosen == $subCategory->id ? 'selected' : '').' '.($subCategory->subCategory->count() > 0 ? 'disabled' : '').' data-attributes="'.$attributes.'" data-attribute-options="'.$attributeOptions.'" inventory_account_id="'.$subCategory->inventory_account_id.'" cwip_asset_account_id="'.$subCategory->cwip_asset_account_id.'" cogs_account_id="'.$subCategory->cogs_account_id.'" inventory_adjustments_account_id="'.$subCategory->inventory_adjustments_account_id.'" is_fixed_asset="'.$subCategory->is_fixed_asset.'" is_cwip="'.$subCategory->is_cwip.'" depreciation_rate="'.$subCategory->depreciation_rate.'" sales_account_id="'.$subCategory->sales_account_id.'" depreciation_cost_account_id="'.$subCategory->depreciation_cost_account_id.'" depreciation_disposal_account_id="'.$subCategory->depreciation_disposal_account_id.'" data-product-type="'.($subCategory->is_fixed_asset == 1 ? 'fixed_asset' : ($subCategory->is_cwip == 1 ? 'cwip' : 'products')).'" data-service="'.($subCategory->is_service).'">'.spaces($step).$subCategory->name.' '.($subCategories->count() > 0 ? '('.($subCategory->is_fixed_asset == 1 ? 'Fixed Asset' : ($subCategory->is_cwip == 1 ? 'CWIP' : 'Products')).')' : '').'</option>';
			if($subCategories->count() > 0){
				$data .= categoryOptions($subCategories, $chosen, $step+1, $is_fixed_asset, $is_cwip, $allSubCategories, $allCategoryAttributes);
			}
		}
	}

	return $data;
}

function getProductAttributes($product_id){
	$attributes = ProductAttribute::with(['attributeOption', 'attributeOption.attribute'])
	->where('product_id', $product_id)
	->orderBy('serial_no', 'asc')
	->get();
	$options = [];
	if(isset($attributes[0])){
		foreach($attributes as $key => $attribute){
			if(isset($attribute->attributeOption->attribute->code)){
				array_push($options, (isset($attribute->attributeOption->attribute->code)?$attribute->attributeOption->attribute->code:'').':'.(isset($attribute->attributeOption->name)?$attribute->attributeOption->name:''));
			}
		}
	}
	return isset($options[0]) ? '('.implode(', ', $options).')' : '';
}

function getProductAttributesFaster($product){
	$options = [];
	if(isset($product->attributes[0])){
		foreach($product->attributes as $key => $attribute){
			if(isset($attribute->attributeOption->attribute->code)){
				array_push($options, (isset($attribute->attributeOption->attribute->code)?$attribute->attributeOption->attribute->code:'').':'.(isset($attribute->attributeOption->name)?$attribute->attributeOption->name:''));
			}
		}
	}
	return isset($options[0]) ? '('.implode(', ', $options).')' : '';
}

function selectedProductAttributes($product_id, $attributeOptions){
	$productAttributes = ProductAttribute::where('product_id', $product_id)->orderBy('serial_no', 'asc')->get();
	$data = '';
	if(isset($productAttributes[0])){
		foreach($productAttributes as $key => $attribute){
			$data .= ($key > 0 ? ', ' : '');
			$data .= (in_array($attribute->attribute_option_id, $attributeOptions) ? '<strong>'.(isset($attribute->attributeOption->attribute->code)?$attribute->attributeOption->attribute->code:'').':'.(isset($attribute->attributeOption->name)?$attribute->attributeOption->name:'').'</strong>' : (isset($attribute->attributeOption->name)?$attribute->attributeOption->name:''));
		}
	}

	return $data;
}

function unitName($id){
	return \App\Models\Hr\Unit::where('hr_unit_id',$id)->first();
}

function unreadNotification(){
	return Notification::where('user_id',auth()->user()->id)
	->where('type','unread')
	->orderBy('id', 'desc')
	->get();
}

// function CreateOrUpdateNotification($messages, $type, $status=null, $item_id=null, $user_id=null, $id = 0){
// 	if($user_id > 0){
// 		$model = Notification::find($id);
// 		if(isset($model->id)){
// 			$model->user_id = $model->user_id;
// 			$model->requisition_item_id = $item_id;
// 			$model->messages = $messages;
// 			$model->type = $type;
// 			$model->status = $status;
// 			$model->save();
// 		}else{
// 			$model = new Notification();
// 			$model->user_id = $user_id;
// 			$model->requisition_item_id = $item_id;
// 			$model->messages = $messages;
// 			$model->type = $type;
// 			$model->status = $status;
// 			$model->save();
// 		}

// 		return $model;
// 	}
	
// 	return false;
// }

function CreateOrUpdateNotification( $messages, $type, $item_id=null, $user_id=null, $status=null, $id = 0){
	if($user_id > 0){
		$notification = Notification::find($id);
		$model = $notification ? $notification : new Notification();
		$model->user_id = $model->user_id ? $model->user_id : $user_id;
		$model->requisition_item_id = $item_id;
		$model->messages = $messages;
		$model->type = $type;
		$model->status = $status;
		$model->save();
		return $model;
	}
	
	return false;
}




function checkPoAttachment($po_id, $bill_type=null, $grn_id=null){
	$po = \App\Models\PmsModels\Purchase\PurchaseOrder::findOrFail($po_id);
	if($po->is_closed == 0){
		$nonBilled = \App\Models\PmsModels\Grn\GoodsReceivedNote::whereDoesntHave('relPoAttachment', function($query){
			return $query->whereIn('status', ['approved'])->where('bill_type','po'); 
		})
		->where('purchase_order_id', $po_id)
		->count();
		if($nonBilled > 0){
			$count = \App\Models\PmsModels\Purchase\PurchaseOrderAttachment::where('purchase_order_id',$po_id)->whereIn('status', ['pending','halt'])->where('bill_type','po')->count();

			if ($count > 0) {
				return ($bill_type == "po" ? true : (\App\Models\PmsModels\Purchase\PurchaseOrderAttachment::where('purchase_order_id',$po_id)->whereIn('status', ['pending','approved'])->where('bill_type','po')->count() >= 1 ? false : true));
			}else{
				return (\App\Models\PmsModels\Purchase\PurchaseOrderAttachment::where('purchase_order_id',$po_id)->whereIn('status', ['pending','approved'])->where('bill_type','po')->count() >= 1 ? false : true);
			}

			return true;
		}
	}

	return false;
}

function checkPoGrnAttachment($po_id, $grn_id){
	$po = \App\Models\PmsModels\Purchase\PurchaseOrder::findOrFail($po_id);
	if($po->is_closed == 0){
		$count = \App\Models\PmsModels\Purchase\PurchaseOrderAttachment::where('purchase_order_id', $po_id)
		->where('goods_received_note_id', $grn_id)
		->where('status','approved')
		->where('bill_type','grn')
		->count();

		return ($count > 0 ? false : true);
	}

	return false;
}


function calculateGrnQtyAgainstPurchaseOrder($purchaseOrder){
	foreach ($purchaseOrder as $key=>$val){
		if (isset($val->relGoodReceiveNote)){
			$grnQty = $val->relGoodReceiveNote->each(function ($item,$i){
				$item['grn_qty']= $item->relGoodsReceivedItems->sum('qty');
			});
			$val['total_grn_qty']=$val->relGoodReceiveNote->sum('grn_qty');
		}
	}

	return $purchaseOrder;
}

function status(){
	return array(
		"active"=>'Active',
		"inactive"=>'Inactive',
		"cancel"=>'Cancel',
	);
}

function statusArray(){
	return array(
		0 => "Pending",
		1 => "Approved",
		2 => "Halt",
	);
}

function requisitionStatus(){
	return array(
		3 => "Draft",
		0 => "Pending",
		1 => "Approved",
	);
}

function statusArrayForHead(){
	return array(
		0 => "Pending",
		1 => "Acknowledge",
		2 => "Halt",
	);
}

function stringStatusArray($audited = false){
	if($audited){
		return array(
			'pending' => "Pending",
			'audited' => "Approved",
			'canceled' => "Halt",
		);
	}else{
		return array(
			'pending' => "Pending",
			'approved' => "Approved",
			'halt' => "Halt",
		);
	}
}

function deliveryStatus(){
	return array(
		'processing' => "Processing",
		'confirmed' => "Confirmed",
		'purchase' => "Purchase",
		'delivered' => "Delivered",
		'partial-delivered' => "Percial-Delivery",
		'cencel' => "Cencel",
	);
}

function maritalStatus(){
	return array(
		'Single',
		'Married',
		'Divorced',
	);
}

function bloodGroups(){
	return array(
		'N/A',
		'A+',
		'A-',
		'B+',
		'B-',
		'O+',
		'O-',
		'AB+',
		'AB-',
	);
}

function weekDays(){
	return array(
		"Saturday",
		"Sunday",
		"Monday",
		"Tuesday",
		"Wednesday",
		"Thursday",
		"Friday",
	);
}

function weekDaysIndex(){
	return array(
		"Saturday" => 0,
		"Sunday" => 1,
		"Monday" => 2,
		"Tuesday" => 3,
		"Wednesday" => 4,
		"Thursday" => 5,
		"Friday" => 6,
	);
}

function daysDifference($from, $to)
{
	$from = new DateTime($from);
	$to = new DateTime($to);
	$difference = $from->diff($to);
	return $difference->days+1;
}

function minutesDifference($from,$to)
{
	$start_date = new DateTime($from);
	$since_start = $start_date->diff(new DateTime($to));
	$minutes = $since_start->days * 24 * 60;
	$minutes += $since_start->h * 60;
	$minutes += $since_start->i;
	return $minutes;
}

function primaryApprovals(){
	return [
		[
			'name' => 'Processing',
			'class' => 'warning'
		],
		[
			'name' => 'Approved',
			'class' => 'success'
		],
		[
			'name' => 'Rejected',
			'class' => 'danger'
		],
	];
}

function uniqueCode($length,$prefix,$table,$field){
	$prefix_length = strlen($prefix);
	$max_id = DB::table($table)->max($field);
	$new = (int)($max_id);
	$new++;
	$number_of_zero = $length-$prefix_length-strlen($new);
	$zero = str_repeat("0", $number_of_zero);
	$made_id = $prefix.$zero.$new;
	return $made_id;
}

function entryUniqueCode($length,$prefix,$table,$field){
	$prefix_length = strlen($prefix);
	$max_id = DB::table($table)->where(DB::raw('substr(`'.$field.'`, 1, '.strlen($prefix).')'), $prefix)->max($field);
	$new = (int)(str_replace($prefix, '', $max_id));
	$new++;
	$number_of_zero = $length-$prefix_length-strlen($new);
	$zero = str_repeat("0", $number_of_zero);
	$made_id = $prefix.$zero.$new;
	return $made_id;
}

function uniqueCodeWithoutPrefix($length,$table,$field){
	$max = DB::table($table)->max($field);
	$new=(int)($max);
	$new++;
	$number_of_zero=$length-strlen($new);
	$zero=str_repeat("0", $number_of_zero < 0 ? 0 : $number_of_zero);
	$made_id=$zero.$new;
	return $made_id;
}


function uniqueStringGenerator(){
	$s = 'abcdefghijklmnopqrstuvwxyz';
	$s = str_shuffle($s);
	$l = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	$l = str_shuffle($l);
	$spc = '@_#-';
	$spc = str_shuffle($spc);
	$num = '0123456789';
	$num = str_shuffle($num);
	return $num.substr($spc,0,1).str_shuffle(substr($l,0,2).substr($s,0,2)).time();  
}

function ratingGenerate($totalScore='',$totalCount='',$isPdf=false)
{
	if ($totalScore > 0 && $totalCount >0) {
		//$totalMaxDecinalScore = $totalScore/ColumnCount('supplier_rattings');
		$averageRating = $totalScore/$totalCount;
	}else{
		$averageRating = 0.00;
	}

	$formatedVal = number_format($averageRating,2);
	$pieces = explode(".", $formatedVal);

	if ($isPdf) {
		$star_list = str_repeat('&#9733;', number_format($pieces[0]));
	}else{

		$star_list = str_repeat('<i class="fa fa-star rating-color" aria-hidden="true"></i>', number_format($pieces[0]));
	}

	if ($pieces[1]>0) {
		$halfStart = ($isPdf)? '&#10031;' : '<i class="fa fa-star-half-o rating-color" aria-hidden="true"></i>';
	}else{
		$halfStart='';
	}

	$blankStar=(5-$formatedVal);

	$printRating='';

	for($j=1; $j <=$blankStar;$j++){
		$printRating .=($isPdf)? '&#9734;':'<i class="fa fa-star"></i>';
	}
	
	return $star_list.''.$halfStart.''.$printRating;
}

function singleRatingGenerate($totalScore='',$totalCount='')
{
	if ($totalScore > 0 && $totalCount >0) {
		$averageRating = $totalScore/$totalCount;
	}else{
		$averageRating = 0.00;
	}

	$formatedVal = number_format($averageRating,2);
	$pieces = explode(".", $formatedVal);

	$star_list = str_repeat('<i class="fa fa-star rating-color" aria-hidden="true"></i>', number_format($pieces[0]));

	if ($pieces[1]>0) {
		$halfStart = '<i class="fa fa-star-half-o rating-color" aria-hidden="true"></i>';
	}else{
		$halfStart='';
	}

	$blankStar=(5-$formatedVal);

	$printRating='';

	for($j=1; $j <=$blankStar;$j++){
		$printRating .='<i class="fa fa-star"></i>';
	}

	return $star_list.''.$halfStart.''.$printRating;
}

function ColumnCount($table)
{
	$column = count(\Illuminate\Support\Facades\Schema::getColumnListing($table));
	return $removeExtraColumn=$column-10;
}


function supplierPaymentTerm(){

	return \App\Models\PmsModels\PaymentTerm::select('term','id')->get();
}

function supplierReceivedTerm(){
	return [
		'partial'=>'Partial Received',
		'full'=>'Full Received',
	];
}

function supplierCriteria($supplier)
{
	$data = Illuminate\Support\Facades\Schema::getColumnListing('supplier_rattings');
	$deleteDefault = [0,1,9,10,11,12,13,14,15,16];
	$keys = array_diff(array_keys($data),$deleteDefault);
	$columns = [];
	$loop=0;
	foreach ($keys as $i=> $value){
		$loop++;
		$supplierData = (object)[
			'name' => ucwords(str_replace('_',' ',$data[$value])),
			'rating' => singleRatingGenerate($supplier->SupplierRatings()->sum($data[$value]),$supplier->SupplierRatings()->count()),
			'point' => number_format(($supplier->SupplierRatings()->sum($data[$value])/$supplier->SupplierRatings()->count()),2)
		];
		$view = '<tr>
		<th>'.$loop.'</th>
		<td>'.$supplierData->name.'</td>
		<td>'.$supplierData->rating.'</td>
		<td>'.$supplierData->point.'</td>
		</tr>';
		$columns[] = $view;
	}
	return implode(' ',$columns);
}

function supplierCriteriaColumns(){
	$data = \Illuminate\Support\Facades\Schema::getColumnListing('supplier_rattings');

	$deleteDefault = [0,1,9,10,11,12,13,14,15,16,17,18, 19];
	$keys = array_diff(array_keys($data),$deleteDefault);
	$columns = [];
	foreach ($keys as $key=>$v){
		$columns[$key]= $data[$v];
	}

	return $columns;
}

function supplierOpeningBalance($supplier_id, $date = null){
	$query = \App\Models\PmsModels\SupplierLedgers::where('supplier_id', $supplier_id);

	return [
		'debit' => $query->sum('debit'),
		'credit' => $query->sum('credit'),
		'balance' => (-1*$query->sum('debit'))+$query->sum('credit'),
	];
}

function customerOpeningBalance($customer_id, $date = null){
	$query = \App\Models\Sales\CustomerLedger::where('customer_id', $customer_id);

	return [
		'debit' => $query->sum('debit'),
		'credit' => $query->sum('credit'),
		'balance' => (-1*$query->sum('debit'))+$query->sum('credit'),
	];
}

function deliverableWiseBudget($project_id, $deliverable_id)
{
	$totalCost = 0;
	$cdr = [];
	//$requisitions = Requisition::where(['project_id' => $project_id, 'deliverable_id' => $deliverable_id])->get();

	$requisitions = Requisition::whereHas('projectTask.subDeliverable.deliverable', function($query) 
		use($project_id){ 
			return $query->where('project_id', $project_id);
        })
		->whereHas('projectTask.subDeliverable.deliverable', function($query) 
		use($deliverable_id){ 
			return $query->where('id', $deliverable_id);
        })->get();

	if($requisitions->count() > 0) {
		foreach ($requisitions as $requisition) {
			foreach ($requisition->relRequisitionDelivery as $delivery) {
				$cdr[] = $delivery->reference_no;
			}
		}
		$cd = array_unique($cdr);
		$totalCost = InventoryLogs::whereIn('reference', $cd)->sum('total_price');
	}
	return $totalCost;
}

function consumedBudget($project_id)
{
	$totalCost = 0;
	$cdr = [];

	//$requisitions = Requisition::where('project_id', $project_id)->get();
	$requisitions = Requisition::whereHas('projectTask.subDeliverable.deliverable', function($query) 
		use($project_id){ 
			return $query->where('project_id', $project_id);
        })->get();

	if($requisitions->count() > 0) {
		foreach ($requisitions as $requisition) {
			foreach ($requisition->relRequisitionDelivery as $delivery) {
				$cdr[] = $delivery->reference_no;
			}
		}
		$cd = array_unique($cdr);
		$totalCost = InventoryLogs::whereIn('reference', $cd)->sum('total_price');
	}
	return $totalCost;
}

function downloadPDF($name,$data,$view,$paper,$orientation){
	return \PDF::loadView($view, $data)->setPaper($paper, $orientation)->setOptions(['defaultFont' => 'sans-serif'])->setOptions(array('isRemoteEnabled' => true))->setOptions(array('DOMPDF_ENABLE_CSS_FLOAT ' => true))->download($name.'-('.date('F j,Y g:i a').').pdf');
}

function downloadExcel($view, $data, $name, $type = 'xlsx'){
    return \Excel::download(new \App\Exports\Excel($view, $data), $name.'('.date('F j,Y g:i a').')'.'.'.$type);
}

function getDepartmentHead($user_id){
	$user = User::find($user_id);
	$users = User::whereHas('employee', function($query) use($user){
		return $query->where('as_unit_id', $user->employee->as_unit_id)
		->where('as_department_id', $user->employee->as_department_id);
	})->get();

	$heads = [];
	if(isset($users[0])){
		foreach($users as $user){
			if($user->hasRole('Department-Head')){
				array_push($heads, $user->id);
			}
		}
	}

	$userData = User::whereIn('id', $heads)->whereHas('employee', function($query) use($user){
		return $query->where('as_unit_id', $user->employee->as_unit_id)
		->where('as_department_id', $user->employee->as_department_id);
	})->first();

	return isset($userData->id) ? $userData->id : 0;
}

function getManagerInfo($roles_name,$unit_id=null)
{
	$superPermission=['Purchase-Department','Management','Billing','Audit','Accounts','Gate Permission','Quality-Ensure', 'Store-Manager', 'SBU Head','Sponsor'];

	if(in_array($roles_name,$superPermission)){
		$users=User::when(!empty($unit_id),function ($query) use($unit_id){
			return $query->whereHas('priorities', function ($query) use($unit_id){
				return $query->where('hr_unit_id', $unit_id);
			});
		})->get();
	}else{
		$users=User::when(isset(auth()->user()->employee->as_unit_id),function ($query){
			return $query->whereHas('priorities', function ($query){
				return $query->where('hr_unit_id', auth()->user()->employee->as_unit_id)
				->where('hr_department_id', auth()->user()->employee->as_department_id);
			});
		})->get();
	}
	
	$heads = [];
	if(isset($users[0])){
		foreach($users as $user){
			if($user->hasRole($roles_name)){
				array_push($heads, $user->id);
			}
		}
	}

	$userData=User::whereIn('id', $heads)->first();
	
	return isset($userData->id) ? $userData->id : 0;
}

function getDepartmentHeadInfo($unit_id, $department_id)
{
	$users = User::whereHas('priorities', function ($query) use($unit_id, $department_id){
			return $query->where([
				'hr_unit_id' => $unit_id,
				'hr_department_id' => $department_id,
			]);
	})->get();
	
	$heads = [];
	if(isset($users[0])){
		foreach($users as $user){
			if($user->hasRole('Department-Head')){
				array_push($heads, $user->id);
			}
		}
	}

	$userData = User::whereIn('id', $heads)->first();
	
	return isset($userData->id) ? $userData->id : 0;
}

function inWord($number) {
    $hyphen      = '-';
    $conjunction = ' and ';
    $separator   = ', ';
    $negative    = 'negative ';
    $decimal     = ' point ';
    $dictionary  = array(
        0                   => 'zero',
        1                   => 'one',
        2                   => 'two',
        3                   => 'three',
        4                   => 'four',
        5                   => 'five',
        6                   => 'six',
        7                   => 'seven',
        8                   => 'eight',
        9                   => 'nine',
        10                  => 'ten',
        11                  => 'eleven',
        12                  => 'twelve',
        13                  => 'thirteen',
        14                  => 'fourteen',
        15                  => 'fifteen',
        16                  => 'sixteen',
        17                  => 'seventeen',
        18                  => 'eighteen',
        19                  => 'nineteen',
        20                  => 'twenty',
        30                  => 'thirty',
        40                  => 'fourty',
        50                  => 'fifty',
        60                  => 'sixty',
        70                  => 'seventy',
        80                  => 'eighty',
        90                  => 'ninety',
        100                 => 'hundred',
        1000                => 'thousand',
        1000000             => 'million',
        1000000000          => 'billion',
        1000000000000       => 'trillion',
        1000000000000000    => 'quadrillion',
        1000000000000000000 => 'quintillion'
    );

    if (!is_numeric($number)) {
        return false;
    }

    if (($number >= 0 && (int) $number < 0) || (int) $number < 0 - PHP_INT_MAX) {
        // overflow
        trigger_error(
            'System only accepts numbers between -' . PHP_INT_MAX . ' and ' . PHP_INT_MAX,
            E_USER_WARNING
        );
        return false;
    }

    if ($number < 0) {
        return $negative . inWord(abs($number));
    }

    $string = $fraction = null;

    if (strpos($number, '.') !== false) {
        list($number, $fraction) = explode('.', $number);
    }

    switch (true) {
        case $number < 21:
            $string = $dictionary[$number];
            break;
        case $number < 100:
            $tens   = ((int) ($number / 10)) * 10;
            $units  = $number % 10;
            $string = $dictionary[$tens];
            if ($units) {
                $string .= $hyphen . $dictionary[$units];
            }
            break;
        case $number < 1000:
            $hundreds  = $number / 100;
            $remainder = $number % 100;
            $string = $dictionary[$hundreds] . ' ' . $dictionary[100];
            if ($remainder) {
                $string .= $conjunction . inWord($remainder);
            }
            break;
        default:
            $baseUnit = pow(1000, floor(log($number, 1000)));
            $numBaseUnits = (int) ($number / $baseUnit);
            $remainder = $number % $baseUnit;
            $string = inWord($numBaseUnits) . ' ' . $dictionary[$baseUnit];
            if ($remainder) {
                $string .= $remainder < 100 ? $conjunction : $separator;
                $string .= inWord($remainder);
            }
            break;
    }

    if (null !== $fraction && is_numeric($fraction)) {
        $string .= $decimal;
        $words = array();
        foreach (str_split((string) $fraction) as $number) {
            $words[] = $dictionary[$number];
        }
        $string .= implode(' ', $words);
    }

    return ucfirst($string);
}

function inWordBn($number, $taka = true, $currency = 'taka', $currency_hundreds = 'paisa') 
{ 
    if (($number < 0) || ($number > 999999999999)) { 
    	return '';
    }

    $fraction = null;
    if (strpos($number, '.') !== false) {
        list($number, $fraction) = explode('.', $number);
    }

    $bl = floor($number / 1000000000); /* billion */
    $number -= $bl * 10000000;
    $Kt = floor($number / 10000000); /* Koti */
    $number -= $Kt * 10000000;
    $Gn = floor($number / 100000);  /* lakh  */ 
    $number -= $Gn * 100000; 
    $kn = floor($number / 1000);     /* Thousands (kilo) */ 
    $number -= $kn * 1000; 
    $Hn = floor($number / 100);      /* Hundreds (hecto) */ 
    $number -= $Hn * 100; 
    $Dn = floor($number / 10);       /* Tens (deca) */ 
    $n = $number % 10;               /* Ones */

    $res = ""; 

    if ($bl) { 
        $res .= inWordBn($bl, false, $currency, $currency_hundreds) . " billion "; 
    } 

    if ($Kt) { 
        $res .= inWordBn($Kt, false, $currency, $currency_hundreds) . " core "; 
    } 

    if ($Gn) { 
        $res .= inWordBn($Gn, false, $currency, $currency_hundreds) . " lac"; 
    } 

    if ($kn) { 
        $res .= (empty($res) ? "" : " ") . 
            inWordBn($kn, false, $currency, $currency_hundreds) . " Thousand"; 
    } 

    if ($Hn) { 
        $res .= (empty($res) ? "" : " ") . 
            inWordBn($Hn, false, $currency, $currency_hundreds) . " Hundred"; 
    } 

    $ones = array("", "One", "Two", "Three", "Four", "Five", "Six", 
        "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", 
        "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eightteen", 
        "Nineteen"); 
    $tens = array("", "", "Twenty", "Thirty", "Fourty", "Fifty", "Sixty", 
        "Seventy", "Eigthy", "Ninety"); 

    if ($Dn || $n) { 
        if (!empty($res)) { 
            $res .= " "; 
        } 

        if ($Dn < 2) { 
            $res .= $ones[$Dn * 10 + $n]; 
        } else { 
            $res .= $tens[$Dn]; 
            if ($n) { 
                $res .= "-" . $ones[$n]; 
            } 
        } 
    } 

    if (empty($res)){ 
        $res = "zero"; 
    } 

    if($taka){
    	$res .= ' '.$currency.' ';
    }

    if (null !== $fraction && is_numeric($fraction) && $fraction > 0) {
    	$res .= ' and ';
    	$fraction = substr($fraction, 0, 2);
    	$fraction = strlen($fraction) == 1 ? (int)($fraction)*10 : (int)($fraction);
    	if($fraction > 0){
        	$res .= inWordBn($fraction, false, $currency, $currency_hundreds).' '.$currency_hundreds;
    	}
    }

    return ucwords(str_replace('-', ' ', $res)); 
}

function viewMPDF($view, $data, $title, $filename, $format = 'a4', $orientation = 'P'){
	\PDF::loadView($view, $data, [], [
      'title'      => $title,
      'margin_top' => 0,
      'showImageErrors' => true,
      'format' => $format,
      'orientation' => $orientation,
      //'show_watermark_image' => true,
      //'display_mode' => 'fullpage',
      //'watermark_image_path' => public_path('/assets/idcard/letterhead/mbm_letterhead.png'),
      //'watermark_image_size'       => 'D',
    ])->stream($filename.'.pdf');
}

function outputMPDF($view, $data, $title, $filename, $format = 'a4', $orientation = 'P'){
	return \PDF::loadView($view, $data, [], [
      'title'      => $title,
      'margin_top' => 0,
      'showImageErrors' => true,
      'format' => $format,
    ])->output();
}

function downloadMPDF($view, $data, $title, $filename, $format = 'a4', $orientation = 'P'){
	\PDF::loadView($view, $data, [], [
      'title'      => $title,
      'margin_top' => 0,
      'showImageErrors' => true,
      'orientation' => $orientation
    ])->download($filename.'_'.date('Y-m-d g:i a').'.pdf');
}

function printBarcode($barcode, $style='', $letter_spacing='12px'){
	return '<div class="text-center" style="'.$style.'">
		<img src="data:image/png;base64,'.DNS1D::getBarcodePNG($barcode, 'C39',1,33).'" alt="'.$barcode.'"/>
		<br>
		<span style="letter-spacing: '.$letter_spacing.';">'.$barcode.'</span>
	</div>';
}

function wordRestrictions(){
	$words = [];
	$roles = \Spatie\Permission\Models\Role::whereIn('name', auth()->user()->getRoleNames())->get();
	if(isset($roles[0])){
		foreach($roles as $key => $role){
			$restrictions = array_map(function($value){
                            return strtolower($value);
                        }, isset(json_decode($role->word_restrictions, true)[0]) ? json_decode($role->word_restrictions, true) : []);
			if(isset($restrictions[0])){
				foreach($restrictions as $key => $restriction){
					array_push($words, $restriction);
				}
			}
		}
	}

	return array_unique($words);
}



function isSupplierRating($key,$value, $type)
{
	$supplierRatings=SupplierRatings::where('key', $key)->where('value',$value)->where('type',$type)->first();
	if(isset($supplierRatings->id)){
		return true;
	}
	return false;
}

function requisitionHasStock($requisition_id){
	$requisition = \App\Models\PmsModels\Requisition::find($requisition_id);
	if(!isset($requisition->id)){
		return false;
	}
	
	if($requisition->is_send_to_rfp == 'yes'){
		$stocks = \App\Models\PmsModels\Grn\GoodsReceivedItemStockIn::whereHas('relPurchaseOrder.purchaseOrderRequisitions', function($query) use($requisition){
			return $query->where('requisition_id', $requisition->id);
		})
		->sum('received_qty');
		if($stocks <= 0){
			return false;
		}
	}

	return true;
}

function latestProductPriceUpdate($productId,$unitPrice){
	$product=Product::findOrFail($productId);
	if (isset($product->id)) {
		$product->update(['unit_price'=>$unitPrice]);
		return true;
	}
	return false;
}

function includeUsers(){
	$userUnits = auth()->user()->priorities->pluck('hr_unit_id')->toArray();
	$userDepartments = auth()->user()->priorities->pluck('hr_department_id')->toArray();
	$userSections = auth()->user()->priorities->pluck('hr_section_id')->toArray();

	if(auth()->user()->hasRole('Department-Head')){
		return \App\User::whereNotIn('id', [auth()->user()->id])
		->whereHas('employee',function($query) use($userUnits, $userDepartments, $userSections){
			return $query->whereIn('as_unit_id', $userUnits)
			->whereIn('as_department_id', $userDepartments);
			// ->whereIn('as_section_id', $userSections);
        })
		->whereDoesntHave('modelHasRoles.role', function($query){
			return $query->whereIn('name', ['Department-Head', 'SBU Head', 'Management']);
		})
        ->pluck('id')->toArray();
	}elseif(auth()->user()->hasRole('SBU Head')){
		return \App\User::whereNotIn('id', [auth()->user()->id])
		->whereHas('employee',function($query) use($userUnits){
			return $query->whereIn('as_unit_id', $userUnits);
        })
        ->whereHas('modelHasRoles.role', function($query){
			return $query->where('name', 'Department-Head');
		})
		->pluck('id')->toArray();
	}else{
		return \App\User::whereNotIn('id', [auth()->user()->id])
		->whereHas('modelHasRoles.role', function($query){
			return $query->whereIn('name', ['SBU Head', 'Management']);
		})->pluck('id')->toArray();
	}

	return [];
}

function getDuration($from, $to){
    $days = round(((strtotime($to) - strtotime($from))) / (60 * 60 * 24));
    return ($days >= 1 ? ($from == $to ? 1 : $days+1) : 1);
}

function getProgressFaster($tasks, $needles = [0, 0, 0, 0]){
	$tasks = collect($tasks);

	if($needles[0] > 0){
		$tasks = $tasks->filter(function ($task, $key) use($needles) {
		    return $task->subDeliverable->deliverable->project_id == $needles[0];
		});
		 
		$tasks->all();
	}

	if($needles[1] > 0){
		$tasks = $tasks->filter(function ($task, $key) use($needles) {
		    return $task->subDeliverable->deliverable_id == $needles[1];
		});
		 
		$tasks->all();
	}

	if($needles[2] > 0){
		$tasks = $tasks->filter(function ($task, $key) use($needles) {
		    return $task->sub_deliverable_id == $needles[2];
		});
		 
		$tasks->all();
	}

	if($needles[3] > 0){
		$tasks = $tasks->filter(function ($task, $key) use($needles) {
		    return $task->id == $needles[3];
		});
		 
		$tasks->all();
	}
	
    $totalTasks = $tasks->count();
    $completedTasks = $tasks->where('status', 'done')->count();

    return $totalTasks > 0 && $completedTasks > 0 ? ($completedTasks/$totalTasks) : 0;
}

function listOfMonthsBetweenDates($from, $to){
	$start    = (new \DateTime($from))->modify('first day of this month');
	$end      = (new \DateTime($to))->modify('first day of next month');
	$interval = \DateInterval::createFromDateString('1 month');
	$period   = new \DatePeriod($start, $interval, $end);

	$dates = [];
	foreach ($period as $dt) {
		array_push($dates, $dt->format("Y-m-d"));
	}

	return $dates;
}


function projectStatusList($status = false){
	$array = [
		'waiting_for_submit' => [
			'name' => 'Draft',
			'background' => 'rgb(85,85,85,0.4)',
			'show' => auth()->user()->hasAnyRole(['Super Admin', 'Management', 'PMO']),
		],
		'approved' => [
			'name' => 'Ongoing',
			'background' => 'rgb(35,108,98,0.4)',
			'show' => auth()->user()->hasAnyRole(['Super Admin', 'Management', 'PMO','Sponsor','PM','Primary-User','Project-Board']),
		],
		'pending' => [
			'name' => 'Waiting For Approval',
			'background' => 'rgb(255,220,0,0.4)',
			'show' => auth()->user()->hasAnyRole(['Super Admin', 'Management', 'PMO','Sponsor','Project-Board']),
		],
		'reapproval' => [
			'name' => 'Waiting For Reapproval',
			'background' => 'rgb(239,117,70,0.4)',
			'show' => auth()->user()->hasAnyRole(['Super Admin', 'Management', "PMO",'Sponsor','Project-Board']),
		],
		
		'planned' => [
			'name' => 'Planned',
			'background' => 'rgb(95,173,232,0.4)',
			'show' => auth()->user()->hasAnyRole(['Super Admin', 'Management', "PMO",'Sponsor','Project-Board']),
		]
	];

	if($status){
		if(array_key_exists($status, $array)){
			return $array[$status];
		}
	}

	return $array;
}

function randomColor() {
   $chars = 'ABCDEF0123456789';
   $color = '#';
   for ( $i = 0; $i < 6; $i++ ) {
      $color .= $chars[rand(0, strlen($chars) - 1)];
   }
   return $color;
}

function formatBytes($size, $precision = 2){
    $base = log($size, 1024);
    $suffixes = array('', 'KB', 'MB', 'GB', 'TB');   

    return round(pow(1024, $base - floor($base)), $precision) .' '. $suffixes[floor($base)];
}

function getProjectTasks($project_id){
	return \App\Models\MyProject\ProjectTask::whereHas('subDeliverable.deliverable', function($query) use($project_id){
			return $query->where('project_id', $project_id);
		})
	->when((auth()->user()->hasRole('Primary-User') || auth()->user()->hasRole('Employee')), function($query){
		return $query->where('user_id', auth()->user()->id);
	})->pluck('id')->toArray();
}

function getHolidays($full = false, $from = false, $to = false){
	if($full){
		return \App\Models\MyProject\Holiday::select(\DB::raw("name, STR_TO_DATE(full_date, '%Y-%m-%d') as date, STR_TO_DATE(full_date, '%Y-%m-%d') as `from`, STR_TO_DATE(full_date, '%Y-%m-%d') as `to`"))
		->when($from, function($query) use($from){
			return $query->where(\DB::raw("STR_TO_DATE(full_date, '%Y-%m-%d')"), '>=', $from);
		})
		->when($to, function($query) use($to){
			return $query->where(\DB::raw("STR_TO_DATE(full_date, '%Y-%m-%d')"), '<=', $to);
		})
		->get();
	}

	return \App\Models\MyProject\Holiday::select(\DB::raw("STR_TO_DATE(full_date, '%Y-%m-%d') as date"))->groupBy('date')->pluck('date')->toArray();
}

function numberOfholidays($from, $to){
	return \App\Models\MyProject\Holiday::where(\DB::raw("STR_TO_DATE(full_date, '%Y-%m-%d')"), '>=', $from)->where(\DB::raw("STR_TO_DATE(full_date, '%Y-%m-%d')"), '<=', $to)->groupBy('full_date')->count();
}


function projectHolidays($project, $from = false, $to = false){
	$holidays = [];
	if($project->holidays->count() > 0){
		foreach($project->holidays as $key => $holiday){
			$holidays = array_merge($holidays, dateRange($holiday->from, $holiday->to));
		}
	}

	$workingDays = $project->workingDays->pluck('day')->toArray();

	$from = ($from ? $from : $project->start_date);
	$to = ($to ? $to : $project->end_date);

	$days = [];
	$dateRange = dateRange($from, $to);
	foreach($dateRange as $key => $date){
		if(in_array($date, $holidays) || !in_array(date('l', strtotime($date)), $workingDays)){
			array_push($days, $date);
		}
	}
	
	return $days;
}

function paymentTypes($ap = false){
	$types = [
		'cash' => [
			'name' => "Cash",
			'title' => "Payment Details",
			'placeholder' => "Write Payment Details",
		],
		'cheque' => [
			'name' => "Cheque",
			'title' => "Cheque Number",
			'placeholder' => "No Cheque Available!",
		],
		'fund-transfer' => [
			'name' => "Fund Transfer (RTGS)",
			'title' => "RTGS Number",
			'placeholder' => "Write RTGS Reference Number",
		],
		'others-gl' => [
			'name' => "Others (Choose GL)",
			'title' => "Narration",
			'placeholder' => "Write a Narration",
		],
	];

	if($ap){
		$types['supplier-payable'] = [
			'name' => "Supplier Payable",
			'title' => "Invoice",
			'placeholder' => "Write Invoice number",
		];
	}

	return $types;
}

function poAdvance($po_id){
	$gross_price = \App\Models\PmsModels\Purchase\PurchaseOrder::where('id', $po_id)->sum('gross_price');
	$advance = \App\Models\PmsModels\SupplierPayment::where([
		'bill_type' => 'po-advance',
		'purchase_order_id' => $po_id
	])->sum('pay_amount');
	$percentage = 0;
	if($gross_price > 0 && $advance > 0){
		$percentage = (($advance*100)/$gross_price);
	}
	
	return [
		'gross_price' => $gross_price,
		'percentage' => $percentage,
		'advance' => $advance,
	];
}

function supplierStatus($supplier){
	return [
		'approved_text' => ucwords(str_replace('-', ' ', $supplier->approved_by)),
		'approved_class' => in_array($supplier->approved_by, ['purchase-approved', 'management-approved']) ? 'success' : (in_array($supplier->approved_by, ['purchase-declined', 'management-declined']) ? 'danger' : 'warning'),
		'approved_icon' =>  in_array($supplier->approved_by, ['purchase-approved', 'management-approved']) ? 'lar la-check-circle' : (in_array($supplier->approved_by, ['purchase-declined', 'management-declined']) ? 'la la-ban' : 'las la-question-circle'),
		'approval' => (auth()->user()->hasRole('Purchase-Department') && in_array($supplier->approved_by, ['sent-to-purchase', 'purchase-declined']) ? true : (auth()->user()->hasRole('Management') && in_array($supplier->approved_by, ['purchase-approved', 'management-declined']) ? true : false)),
	];
}

function getUserCostCenter($userId)
{
	$user = User::with('employee')->find($userId);

	$costCenter = CostCentre::where('hr_unit_id',$user->employee->as_unit_id)
					 ->where('hr_department_id',$user->employee->as_department_id)->first();

	if ($costCenter->id) {
		return $costCenter;
	}
	return false;
}

function getCostCenterUsers($costCenterId)
{
	$costCenter = CostCentre::find($costCenterId);

	return User::whereHas('employee',function ($query) use($costCenter)
	{	
		return $query->where('as_unit_id',$costCenter->hr_unit_id)
					 ->where('as_department_id',$costCenter->hr_department_id);
	})->get(['id']);
}

function checkTotalWeightage($portfolio_id,$weightage,$id='')
{	
	if ($id !=null) {
		$current_weightage = Program::whereNotIn('id',[$id])->where('portfolio_id',$portfolio_id)->sum('weightage');
	}else{
		$current_weightage = Program::where('portfolio_id',$portfolio_id)->sum('weightage');
	}

	$total_weightage = $current_weightage+$weightage;
	
	if ($total_weightage > 100) {
		return true;
	}
	return false;
}

function getEnumOptions($table_name, $column_name) {
    $type = DB::select(DB::raw('SHOW COLUMNS FROM '.$table_name.' WHERE Field = "'.$column_name.'"'))[0]->Type;
    preg_match('/^enum\((.*)\)$/', $type, $matches);
    $values = array();
    foreach(explode(',', $matches[1]) as $value){
        $values[] = trim($value, "'");
    }
    return $values;
}

function getAvailableDate($date, $holidays, $type = 'forward'){
	if(in_array($date, $holidays)){
		$date = date('Y-m-d', strtotime($date.' '.($type == 'forward' ? '+' : '-').'1 days'));
		return getAvailableDate($date, $holidays, $type);
	}
	return $date;
}

function estimatedValue($requisition){
	$estimated = 0;
    if($requisition->items->count() > 0){
        foreach($requisition->items as $key => $item){
            $estimated += ($item->qty*$item->product->unit_price);
        }
    }

    return $estimated;
}

function projectDurationTolerance($project){
	if($project->status == 'approved'){
		$days = daysDifference($project->initial_end_date, $project->end_date);
	    if(strtotime($project->end_date) > strtotime($project->initial_end_date) && $days > $project->days_tolerance){
	        return [
	            'success' => false,
	            'message' => "Sorry! Project Duration Tolerance Level (".$project->days_tolerance." days) has been exceeded by ".($days)." days."
	        ];
	    }

	    $days = daysDifference($project->start_date, $project->initial_start_date);
	    if(strtotime($project->initial_start_date) > strtotime($project->start_date) && $days > $project->days_tolerance){
	        return [
	            'success' => false,
	            'message' => "Sorry! Project Duration Tolerance Level (".$project->days_tolerance." days) has been exceeded by ".($days)." days."
	        ];
	    }
	}

    return [
        'success' => true,
    ];
}

function getThisPageMenus(){
	$url = explode('?', Request::path())[0];

	$permission = [];
	foreach(auth()->user()->getPermissionsViaRoles() as $data){
		array_push($permission, $data->name);
	}

	$submenu = SubMenu::where('url', $url)->first();
	$links = [];
	if(isset($submenu->menu_id)){
		 $links = collect(SubMenu::where('menu_id', $submenu->menu_id)->where('url', '!=', $url)->get())->mapWithKeys(function ($item) use($permission) {
				$arrDiff = array_intersect($permission, isset(json_decode($item['slug'],true)[0]) ? json_decode($item['slug'],true) : []);

				return [url($item['url']) => [
					'name' => $item['name'],
					'icon' => $item['icon_class'],
					'permission' => $arrDiff,
				]];
		})->toArray();
	}

	// $project_submenu = ProjectSubMenu::where('url', $url)->first();
	// $links3 = [];
	// if(isset($project_submenu->menu_id)){
	// 	 $links3 = collect(ProjectSubMenu::where('menu_id', $project_submenu->menu_id)->where('url', '!=', $url)->get())->mapWithKeys(function ($item) use($permission) {
	// 			$arrDiff = array_intersect($permission, isset(json_decode($item['slug'],true)[0]) ? json_decode($item['slug'],true) : []);

	// 			return [url($item['url']) => [
	// 				'name' => $item['name'],
	// 				'icon' => $item['icon_class'],
	// 				'permission' => $arrDiff,
	// 			]];
	// 	})->toArray();
	// }

	// return array_merge($links,$links3);

	return $links;
}

function getUnitPad($unit){
	$main = getModules()['main'];
	return isset($unit->pad) ? $main->url.'/'.$unit->pad : session()->get('system-information')['pad'];
}

function getCompanyPad($company){
	$main = getModules()['main'];
	return isset($company->units[0]) ? $main->url.'/'.$company->units->first()->pad : session()->get('system-information')['pad'];
}

function makePaymentTermsString($id){
	try{
		$paymentTerm = \App\Models\PmsModels\SupplierPaymentTerm::with(['relPaymentTerm'])->findOrFail($id);
		$term = $paymentTerm->relPaymentTerm->term.' ('.$paymentTerm->payment_percent.'% '.($paymentTerm->type == 'paid' ? 'Account Payee-cheque' : 'Cash Cheque').' in '.$paymentTerm->day_duration.' days';

		$terms = \App\Models\PmsModels\SupplierPaymentTerm::where('parent_id', $paymentTerm->id)->get();
		if(isset($terms[0])){
			foreach($terms as $key => $this_term){
				$term .= ', '.$this_term->payment_percent.'% '.($this_term->type == 'paid' ? 'Account Pay-cheque' : 'Cash Cheque').' in '.$this_term->day_duration.' days';
			}
		}

		$term .= ')';

		return $term;
	}catch(\Throwable $th){
        return $th->getMessage();
    }
}

function userColumnVisibilities(){
	$columnVisibilities = \App\Models\UserColumnVisibility::where([
		'user_id' => auth()->user()->id,
		'url' => request()->fullUrl()
	])->first();
	if(isset($columnVisibilities->id)){
		$columns = (!empty($columnVisibilities->columns) && is_array(json_decode($columnVisibilities->columns, true)) ? json_decode($columnVisibilities->columns, true) : []);
		$hidden = [];
		if(isset($columns[0])){
			foreach ($columns as $key => $column) {
				if($column == "false"){
					array_push($hidden, $key);
				}
			}
		}

		return $hidden;
	}

	return [];
}

function freezeProduct($product){
	return ($product->status == 'approved' && $product->requisitionItem->count() > 0);
}

function freezeSupplier($supplier){
	return ($supplier->approved_by == 'management-approved' && $supplier->relQuotations->count() > 0);
}

function datatableOrdering(){
	$order = false;
	if(isset(request()->order[0])){
		foreach(request()->order as $key => $ordering){
			if($ordering['column'] != 0){
				$order = $ordering;
			}
		}
	}

	return $order;
}

function pleaseSortMe($query, $order, $orderByQuery){
	return $query->when($order == 'asc', function($query) use($orderByQuery){
        return $query->orderBy($orderByQuery);
    })
    ->when($order == 'desc', function($query) use($orderByQuery){
        return $query->orderByDesc($orderByQuery);
    });
}

function required(){
	return '<strong class="text-danger">*</strong>';
}

function getProjectProgress($object, $type){
	$start_date = '';
	$end_date = '';
	if($type == 'project'){
		$start_date = $object->start_date;
		$end_date = $object->end_date;
	}elseif($type == 'phase' || $type == 'milestone'){
		$start_date = $object->start_at;
		$end_date = $object->end_at;
	}elseif($type == 'task'){
		$start_date = $object->initiate_time_line;
		$end_date = $object->end_time_line;
	}
	
	$weightage = getChartColor($object, $start_date, $end_date , $type, 'done');
	$parent_weightage = (isset($object->sponsor_id) ? 100 : $object->weightage);
	return systemDoubleValue(($weightage > 0 && $parent_weightage > 0 ? 100*($weightage/$parent_weightage) : 0), 2);
}

function getColor($value){
    $colors = [
    	'background' => '#38c172',
    	'color' => 'white',
    ];
    
    if($value == "upcoming"){
        $colors['background'] = '#3490dc';
    }

    if($value == "ongoing"){
        $colors['background'] = '#ffed4a';
        $colors['color'] = 'black';
    }

    if($value == "delay"){
        $colors['background'] = '#e3342f';
    }
        
    return $colors;
}

function getChartColors($object, $start_date, $end_date, $type = 'project'){
	$array = ['done', 'delay', 'ongoing', 'upcoming'];
	$conditions = [];
	foreach($array as $key => $value){
		$weightage = getChartColor($object, $start_date, $end_date, $type, $value);
		$parent_weightage = (isset($object->sponsor_id) ? 100 : $object->weightage);
		$conditions[$value] = systemDoubleValue(($weightage > 0 && $parent_weightage > 0 ? 100*($weightage/$parent_weightage) : 0), 2);
	}

	return $conditions;
}

function getChartColor($object, $start_date, $end_date, $type = 'project', $condition = 'done'){
	if($type == 'project'){
		$percentage = 0;
		if($object->deliverables->count() > 0){
			foreach($object->deliverables as $key => $deliverable){
				$percentage += getChartColor($deliverable, $deliverable->start_at, $deliverable->end_at ,'phase', $condition);
			}
		}
		return $percentage;
	}elseif($type == 'phase'){
		$percentage = 0;
		if($object->subDeliverables->count() > 0){
			foreach($object->subDeliverables as $key => $subDeliverable){
				$percentage += getChartColor($subDeliverable, $subDeliverable->start_at, $subDeliverable->end_at ,'milestone', $condition);
			}
		}else{
			$percentage = getChartColor($object, $object->start_at, $object->end_at ,'task', $condition);
			$percentage = ($percentage > 0 ? 100 : 0);
		}
		return ($percentage > 0 && $object->weightage > 0 ? ($object->weightage*($percentage/100)) : 0);
	}elseif($type == 'milestone'){
		$percentage = 0;
		if($object->projectTasks->where('parent_id', 0)->count() > 0){
			foreach($object->projectTasks->where('parent_id', 0) as $key => $projectTask){
				$percentage += getChartColor($projectTask, $projectTask->initiate_time_line, $projectTask->end_time_line ,'task', $condition);
			}
		}else{
			$percentage = getChartColor($object, $object->start_at, $object->end_at ,'task', $condition);
			$percentage = ($percentage > 0 ? 100 : 0);
		}
		return ($percentage > 0 && $object->weightage > 0 ? ($object->weightage*($percentage/100)) : 0);
	}elseif($type == 'task'){
		$percentage = 0;
		if($condition == 'done'){
			
			$percentage = ($object->status == 'done' ? ($object->weightage) : 0);

		}elseif($condition == 'delay' && $object->status != 'done'){
			if(!(strtotime(date('Y-m-d')) < strtotime($start_date)) && !(strtotime(date('Y-m-d')) >= strtotime($start_date) && strtotime(date('Y-m-d')) <= strtotime($end_date))){
				$percentage = (strtotime(date('Y-m-d')) > strtotime($end_date) ? ($object->weightage) : 0);
			}

		}elseif($condition == 'upcoming' && $object->status != 'done'){
			if(!(strtotime(date('Y-m-d')) > strtotime($end_date)) && !(strtotime(date('Y-m-d')) >= strtotime($start_date) && strtotime(date('Y-m-d')) <= strtotime($end_date))){
				$percentage = (strtotime(date('Y-m-d')) < strtotime($start_date) ? ($object->weightage) : 0);
			}

		}elseif($condition == 'ongoing' && $object->status != 'done'){
			if(!(strtotime(date('Y-m-d')) > strtotime($end_date)) && !(strtotime(date('Y-m-d')) < strtotime($start_date))){
				$percentage = (strtotime(date('Y-m-d')) >= strtotime($start_date) && strtotime(date('Y-m-d')) <= strtotime($end_date) ? ($object->weightage) : 0);
			}
		}

		return $percentage;
	}
}

function updateSupplierProducts($supplier_id){
	if($supplier_id == 12){
		$supplier = \App\Models\PmsModels\Suppliers::with([
	        'products'
	    ])->findOrFail($supplier_id);

	    $products = \App\Models\PmsModels\Product::whereNotIn('id', $supplier->products->pluck('id')->toArray())->pluck('id')->toArray();
	    $array = [];
	    if(isset($products[0])){
	        foreach($products as $key => $product_id){
	            array_push($array, [
	                'supplier_id' => $supplier->id,
	                'product_id' => $product_id,
	            ]);
	        }
	    }

	    if(isset($array[0])){
	        DB::table('products_supplier')->insert($array);
	    }
	}
}

function getPODueAmount($purchaseOrder){
	$advanceBooked = \App\Models\PmsModels\SupplierPayment::doesntHave('relSupplierLedgers')
	->where('purchase_order_id', $purchaseOrder->id)
    ->where('supplier_id', $purchaseOrder->relQuotation->supplier_id)
	->where('bill_type', 'po-advance')
	->sum('pay_amount');
    $paid = \App\Models\PmsModels\SupplierLedgers::whereHas('relSupplierPayment', function($query) use($purchaseOrder){
        return $query->where('purchase_order_id', $purchaseOrder->id)
                     ->where('supplier_id', $purchaseOrder->relQuotation->supplier_id);
    })->sum('debit');
    return systemDoubleValue($purchaseOrder->gross_price-($advanceBooked+$paid), 2);
}

function menuModules(){
	return [
		'procurement',
		'project-management',
		'finance',
		'sales',
		'manufacturing'
	];
}