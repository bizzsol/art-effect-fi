<?php
bolt_decrypt( __FILE__ , 'AvKeGI'); return 0;
##!!!##