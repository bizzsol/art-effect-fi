<?php
bolt_decrypt( __FILE__ , 'i3QJrW'); return 0;
##!!!##

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use DB;

use \App\Models\PmsModels\Accounts\AccountClass;
use \App\Models\PmsModels\Accounts\AccountGroup;
use \App\Models\PmsModels\Accounts\ChartOfAccount;

use \App\Models\PmsModels\Accounts\Company;
use \App\Models\PmsModels\Accounts\ProfitCentre;
use \App\Models\PmsModels\Accounts\CostCentre;
use \App\Models\PmsModels\Accounts\EntryType;

use \App\Models\FixedAssets\FixedAssetLocation;

use \App\Models\FixedAssets\DepreciationMethod;

class SettingsController extends Controller
{
    /**
     * Accounts Settings
     * 
     * Get List of all Accounts Settings.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * 
     * @group Accounts Settings
     * @return \Illuminate\Http\Response
     */
    public function settings(Request $request){
        try{
            $settings = accountDefaultSettings();

            $settings['balance_sheet_items'] = AccountClass::whereIn('id', json_decode($settings['balance_sheet_items'], true))->get([
                'id', 'name', 'desc'
            ]);

            $settings['profit_loss_items'] = AccountClass::whereIn('id', json_decode($settings['profit_loss_items'], true))->get([
                'id', 'name', 'desc'
            ]);

            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => $settings,
            ], 200);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Companies
     * 
     * Get List of Companies.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @queryParam id integer Company ID  Example: 0
     * 
     * @group Companies
     * @return \Illuminate\Http\Response
     */
    public function companies(Request $request){
        try{
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => Company::has('profitCentres.costCentres')
                ->with([
                    'profitCentres.costCentres.chartOfAccount'
                ])
                ->when(isset($request->id) && $request->id > 0, function($query) use($request){
                    return $query->where('id', $request->id);
                })
                ->get()
            ], 200);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Profit Centres
     * 
     * Get List of Profit Centres.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @queryParam id integer Cost Centre ID  Example: 0
     * @queryParam company_id integer Company ID  Example: 0
     * @queryParam hr_unit_id integer Unit ID  Example: 0
     * @queryParam hr_department_id integer Department ID  Example: 0
     * 
     * @group Profit Centres
     * @return \Illuminate\Http\Response
     */
    public function profitCentres(Request $request){
        try{
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => ProfitCentre::with([
                    'company' => function($query){
                        return $query->select('id', 'code', 'name', 'owner_name', 'phone', 'email', 'address', 'logo', 'banner');
                    },
                ])
                ->when(isset($request->id) && $request->id > 0, function($query) use($request){
                    return $query->where('id', $request->id);
                })
                ->when(isset($request->company_id) && $request->company_id > 0, function($query) use($request){
                    return $query->where('company_id', $request->company_id);
                })
                ->get()
            ], 200);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Cost Centres
     * 
     * Get List of Cost Centres.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @queryParam id integer Cost Centre ID  Example: 0
     * @queryParam company_id integer Company ID  Example: 0
     * @queryParam profit_centre_id integer Profit Centre ID  Example: 0
     * @queryParam hr_unit_id integer Unit ID  Example: 0
     * @queryParam hr_department_id integer Department ID  Example: 0
     * 
     * @group Cost Centres
     * @return \Illuminate\Http\Response
     */
    public function costCentres(Request $request){
        try{
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => CostCentre::with([
                    'chartOfAccount',
                    'profitCentre.company' => function($query){
                        return $query->select('id', 'code', 'name', 'owner_name', 'phone', 'email', 'address', 'logo', 'banner');
                    },
                    'unit' => function($query){
                        return $query->select('hr_unit_id', 'hr_unit_short_name', 'hr_unit_name');
                    },
                    'department' => function($query){
                        return $query->select('hr_department_id', 'hr_department_code', 'hr_department_name');
                    },
                ])
                ->when(isset($request->id) && $request->id > 0, function($query) use($request){
                    return $query->where('id', $request->id);
                })
                ->when(isset($request->company_id) && $request->company_id > 0, function($query) use($request){
                    return $query->whereHas('profitCentre', function($query) use($request){
                        return $query->where('company_id', $request->company_id);
                    });
                })
                ->when(isset($request->profit_centre_id) && $request->profit_centre_id > 0, function($query) use($request){
                    return $query->where('profit_centre_id', $request->profit_centre_id);
                })
                ->when(isset($request->hr_unit_id) && $request->hr_unit_id > 0, function($query) use($request){
                    return $query->where('hr_unit_id', $request->hr_unit_id);
                })
                ->when(isset($request->hr_department_id) && $request->hr_department_id > 0, function($query) use($request){
                    return $query->where('hr_department_id', $request->hr_department_id);
                })
                ->get()
            ], 200);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    public function getCostCentres(Request $request){
        try{
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => getCostCentres($request->ledger, $request->id)
            ], 200);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    public function getAllGroupAndLedgers(Request $request){
        try{
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => getAllGroupAndLedgers()
            ], 200);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    public function chartOfAccountsOptions(Request $request){
        try{
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => chartOfAccountsOptions($request->groups, $request->chosen, $request->step, $request->all, false, '', false, false, false)
            ], 200);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Entry Types
     * 
     * Get List of Entry Types.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @queryParam id integer Entry Type ID  Example: 0
     * 
     * @group Entry Types
     * @return \Illuminate\Http\Response
     */
    public function entryTypes(Request $request){
        try{
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => EntryType::when(isset($request->id) && $request->id > 0, function($query) use($request){
                    return $query->where('id', $request->id);
                })
                ->get([
                    'id', 'label', 'name', 'description', 'prefix', 'suffix',
                ])
            ], 200);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Fixed Asset Locations
     * 
     * Get List of Fixed Asset Locations.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @queryParam id integer Entry Type ID  Example: 0
     * @queryParam unit_id integer Unit ID  Example: 0
     * @queryParam category_id integer Category ID  Example: 0
     * 
     * @group Fixed Asset Locations
     * @return \Illuminate\Http\Response
     */
    public function fixedAssetLocations(Request $request){
        try{
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => FixedAssetLocation::with([
                    'unit' => function($query){
                        return $query->select('hr_unit_id', 'hr_unit_short_name', 'hr_unit_name');
                    },
                    'category' => function($query){
                        return $query->select('id', 'code', 'name', 'parent_id', 'type');
                    },
                ])
                ->when(isset($request->id) && $request->id > 0, function($query) use($request){
                    return $query->where('id', $request->id);
                })
                ->when(isset($request->unit_id) && $request->unit_id > 0, function($query) use($request){
                    return $query->where('unit_id', $request->unit_id);
                })
                ->when(isset($request->category_id) && $request->category_id > 0, function($query) use($request){
                    return $query->where('category_id', $request->category_id);
                })
                ->get()
            ], 200);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Depreciation Methods
     * 
     * Get List of Depreciation Methods.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * 
     * @group Depreciation Methods
     * @return \Illuminate\Http\Response
     */
    public function depreciationMethods(Request $request){
        try{
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => DepreciationMethod::where('status', 1)->get()
            ], 200);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }
}
