<?php
bolt_decrypt( __FILE__ , 'Y3YLtS'); return 0;
##!!!##