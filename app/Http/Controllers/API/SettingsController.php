<?php
bolt_decrypt( __FILE__ , 'gW80ad'); return 0;
##!!!##