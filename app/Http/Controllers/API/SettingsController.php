<?php
bolt_decrypt( __FILE__ , 'xzHB4G'); return 0;
##!!!##