<?php
bolt_decrypt( __FILE__ , 'iUuPC1'); return 0;
##!!!##