<?php
bolt_decrypt( __FILE__ , 'RK0mlZ'); return 0;
##!!!##

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use DB;

use \App\Models\PmsModels\Accounts\AccountClass;
use \App\Models\PmsModels\Accounts\AccountGroup;
use \App\Models\PmsModels\Accounts\ChartOfAccount;

use \App\Models\PmsModels\Accounts\Company;
use \App\Models\PmsModels\Accounts\CostCentre;
use \App\Models\PmsModels\Accounts\EntryType;
use \App\Models\PmsModels\Accounts\Entry;
use \App\Models\PmsModels\Accounts\Entrylog;

class EntryController extends Controller
{
    /**
     * Save Entry
     * 
     * Get List of Save Entry.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * 
     * @bodyParam company_id integer required Company ID Example: 5
     * @bodyParam entry_type_id integer required Entry Type ID Example: 5
     * @bodyParam number text Reference Example: 12345678
     * @bodyParam datetime datetime required Date & Time Example: 2024-03-27 10:00:00
     * @bodyParam exchange_rate_id integer required Exchange Rate ID Example: 1
     * @bodyParam notes text required Notes Example: Lorem Imsum Doller sit emet...
     * @bodyParam items text required GL Items Example: 
     * items[0][cost_centre_id] => 1007
     * items[0][chart_of_account_id] => 1363
     * items[0][debit] => 1000
     * items[0][credit] => 0
     * items[0][narration] => Bank Debit
     * items[1][cost_centre_id] => 1007
     * items[1][chart_of_account_id] => 1664
     * items[1][debit] => 0
     * items[1][credit] => 1000
     * items[1][narration] => Receivable Credit
     * items[1][debit] => 0
     * @bodyParam logs[product] text key => value Example: 5000
     * 
     * @response {
     *       "success": true,
     *       "status": true,
     *       "status_code": 200,
     *       "data": {
     *           "code": "JNL-240101-0002",
     *           "fiscal_year_id": 5,
     *           "entry_type_id": 5,
     *           "tag_id": 1,
     *           "number": "12345678",
     *           "date": "2024-01-01",
     *           "time": "10:00:00",
     *           "exchange_rate_id": "3",
     *           "debit": 1000,
     *           "credit": 1000,
     *           "is_advance": 0,
     *           "advance_category_id": 0,
     *           "notes": "Lorem Imsum Doller sit emet...",
     *           "is_manual": 0,
     *           "created_by": 1,
     *           "updated_at": "2024-01-29T10:41:09.000000Z",
     *           "created_at": "2024-01-29T10:41:09.000000Z",
     *           "id": 12,
     *           "prepared_by": 1,
     *           "reviewed_by": 1,
     *           "assessed_by": 1,
     *           "approved_by": 1,
     *           "is_reviewed": "approved",
     *           "is_assessed": "approved",
     *           "is_approved": "approved",
     *           "updated_by": 1
     *       }
     *   }
     * 
     * @group Save Entry
     * @return \Illuminate\Http\Response
     */
    public function entry(Request $request){
        $validator = \Validator::make($request->all(), [
            'entry_type_id' => 'required',
            'datetime' => 'required',
            'notes' => 'required',
            'items' => 'required',
            'items.*' => 'required',
        ]);

        if ($validator->passes()) {
            try{
                $entry = saveLedgerEntries($request->entry_type_id, $request->datetime, isset($request->tag_id) ? $request->tag_id : 1, $request->number, $request->notes, $request->items, isset($request->exchange_rate_id) ? $request->exchange_rate_id : 3, isset($request->is_advance) ? $request->is_advance : 0, isset($request->advance_category_id) ? $request->advance_category_id : 0, 0, isset($request->company_id) ? $request->company_id : 0, $request->fiscalYear);

                if(isset($entry['entry']) && (isset($request->logs) && is_array($request->logs) && count($request->logs))){
                    $logs = [];
                    foreach($request->logs as $key => $value){
                        array_push($logs, [
                            'entry_id' => $entry['entry']->id,
                            'key' => $key,
                            'value' => $value,
                        ]);
                    }

                    Entrylog::insert($logs);
                }

                return response()->json([
                    'success' => $entry['success'],
                    'status' => $entry['success'],
                    'status_code' => $entry['success'] ? 200 : 500,
                    'data' => isset($entry['entry']) ? $entry : false,
                    'message' => isset($entry['message']) ? $entry['message'] : false,
                ], $entry['success'] ? 200 : 500);
            }catch (\Throwable $th){
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 500,
                    'message' => $th->getMessage()
                ], 500);
            }
        }

        return response()->json([
            'success' => false,
            'status' => false,
            'status_code' => 422,
            'message' => implode(', ', $validator->errors()->all())
        ], 422);
    }

    /**
     * Save Supplier Ledger
     * 
     * Get List of Save Supplier Ledger.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @bodyParam supplier_id integer required Supplier ID Example: 2
     * @bodyParam date date required Date Example: 2024-01-01
     * @bodyParam debit integer required Debit Amount Example: 100
     * @bodyParam credit integer required Credit Amount Example: 100
     * @bodyParam payment_type text  Payment Type ('ash, cheque, bank-transfer, others-gl) Example: cash
     * @bodyParam payment_details text  Payment Details Example: Hello World
     * @bodyParam notes text Notes Example: Hello World
     * @bodyParam bank_account_id integer Bank Account ID Example: 0
     * @bodyParam supplier_payment_id integer Supplier Payment ID Example: 0
     * @bodyParam exchange_rate_id integer required Exchange Rate ID Example: 1
     * 
     * @group Save Supplier Ledger
     * @return \Illuminate\Http\Response
     */
    public function saveSupplierLedger(Request $request){
        $validator = \Validator::make($request->all(), [
            'supplier_id' => 'required',
            'date' => 'required',
            'debit' => 'required',
            'credit' => 'required',
        ]);

        if ($validator->passes()) {
            try{
                return response()->json([
                    'success' => true,
                    'status' => true,
                    'status_code' => 200,
                    'data' => saveSupplierLedger($request->supplier_id, $request->date, $request->debit, $request->credit, $request->payment_type, $request->payment_details, $request->notes, $request->bank_account_id, $request->supplier_payment_id, $request->exchange_rate_id, isset($request->entry_id) ? $request->entry_id : null),
                ], 200);
            }catch (\Throwable $th){
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 500,
                    'message' => $th->getMessage()
                ], 500);
            }
        }

        return response()->json([
            'success' => false,
            'status' => false,
            'status_code' => 422,
            'message' => implode(', ', $validator->errors()->all())
        ], 422);
    }

    /**
     * Save Cheque
     * 
     * Get List of Save Cheque.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @bodyParam bank_account_id integer required Bank Account ID  Example: 12
     * @bodyParam entry_id integer required Entry ID  Example: 1
     * @bodyParam supplier_ledger_id integer Supplier Ledger ID  Example: 0
     * @bodyParam datetime datetime Date and Time  Example: 2024-01-01 10:00:00
     * @bodyParam source integer Source  Example: 12
     * @bodyParam type integer Type  Example: 12
     * @bodyParam cheque_number string Cheque Number  Example: 1000
     * @bodyParam debit_credit string Debit/Credit (D for Debit and C for Credit)  Example: D
     * @bodyParam amount number amount  Example: 100
     * @bodyParam narration text narration  Example: Hello World
     * 
     * @group Save Cheque
     * @return \Illuminate\Http\Response
     */
    public function saveCheque(Request $request){
        $validator = \Validator::make($request->all(), [
            'bank_account_id' => 'required',
            'entry_id' => 'required',
        ]);

        if ($validator->passes()) {
            try{
                return response()->json([
                    'success' => true,
                    'status' => true,
                    'status_code' => 200,
                    'data' => saveCheque($request->bank_account_id, $request->entry_id, $request->supplier_ledger_id, $request->datetime, $request->source, $request->type, $request->cheque_number, $request->debit_credit, $request->amount, $request->narration),
                ], 200);
            }catch (\Throwable $th){
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 500,
                    'message' => $th->getMessage()
                ], 500);
            }
        }

        return response()->json([
            'success' => false,
            'status' => false,
            'status_code' => 422,
            'message' => implode(', ', $validator->errors()->all())
        ], 422);
    }

    public function saveCustomerLedger(Request $request){
        $validator = \Validator::make($request->all(), [
            'customer_id' => 'required',
            'date' => 'required',
            'debit' => 'required',
            'credit' => 'required',
        ]);

        if ($validator->passes()) {
            try{
                return response()->json([
                    'success' => true,
                    'status' => true,
                    'status_code' => 200,
                    'data' => saveCustomerLedger($request->customer_id, $request->date, $request->debit, $request->credit, $request->payment_type, $request->payment_details, $request->notes, $request->bank_account_id, $request->customer_payment_id, $request->exchange_rate_id),
                ], 200);
            }catch (\Throwable $th){
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 500,
                    'message' => $th->getMessage()
                ], 500);
            }
        }

        return response()->json([
            'success' => false,
            'status' => false,
            'status_code' => 422,
            'message' => implode(', ', $validator->errors()->all())
        ], 422);
    }
}
