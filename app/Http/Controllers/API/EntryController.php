<?php
bolt_decrypt( __FILE__ , '5q5qe7'); return 0;
##!!!##