<?php
bolt_decrypt( __FILE__ , 'NJIrBM'); return 0;
##!!!##