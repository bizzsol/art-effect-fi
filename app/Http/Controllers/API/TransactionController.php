<?php
bolt_decrypt( __FILE__ , 'OKqEkE'); return 0;
##!!!##

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use DB;

use \App\Models\PmsModels\Accounts\AccountClass;
use \App\Models\PmsModels\Accounts\AccountGroup;
use \App\Models\PmsModels\Accounts\ChartOfAccount;

use \App\Models\PmsModels\Accounts\Company;
use \App\Models\PmsModels\Accounts\CostCentre;
use \App\Models\PmsModels\Accounts\EntryType;
use \App\Models\PmsModels\Accounts\FiscalYear;
use \App\Models\PmsModels\Accounts\Entry;
use \App\Models\PmsModels\Accounts\EntryLog;
use \App\Models\PmsModels\Accounts\Currency;

use \App\Models\Integration\Process;
use \App\Models\Integration\SubProcess;
use \App\Models\Integration\EntryPoint;
use \App\Models\Integration\Transaction;
use \App\Models\Integration\TransactionEntry;
use \App\Models\Integration\TransactionLog;


class TransactionController extends Controller
{
    /**
     * Entry Points
     * 
     * Get List of Entry Points.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * 
     * @group Entry Points
     * @return \Illuminate\Http\Response
     */
    public function entryPoints(Request $request){
        try{
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => EntryPoint::with([
                    'subProcesses',
                    'ledgers.chartOfAccount'
                ])
                ->get()
            ], 200);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Process
     * 
     * Get List of Process.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * 
     * @group Process
     * @return \Illuminate\Http\Response
     */
    public function process(Request $request){
        try{
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => Process::with([
                    'subProcesses',
                ])
                ->get()
            ], 200);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Sub Process
     * 
     * Get List of Sub Process.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @bodyParam process_id integer Process ID Example: 1
     * @bodyParam code string Sub Process Code Example: 001
     * @bodyParam entry_point_id integer Process ID Example: 1
     
     * @group Sub Process
     * @return \Illuminate\Http\Response
     */
    public function subProcess(Request $request){
        try{
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => SubProcess::with([
                    'process',
                    'ledgers.chartOfAccount'
                ])
                ->when(isset($request->process_id) && $request->process_id > 0, function($query) use($request){
                    return $query->where('process_id', $request->process_id);
                })
                ->when(isset($request->code) && $request->code > 0, function($query) use($request){
                    return $query->where('code', $request->code);
                })
                ->when(isset($request->entry_point_id) && $request->entry_point_id > 0, function($query) use($request){
                    return $query->where('entry_point_id', $request->entry_point_id);
                })
                ->get()
            ], 200);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Transaction
     * 
     * API Integration of Transactions
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * 
     * @bodyParam company_code string required Company Code Example: SSL
     * @bodyParam cost_centre_code string required Cost Centre Code Example: SSLBU1000SF1000
     * @bodyParam entry_type_label string required Entry Type Label Example: journal
     * @bodyParam number text Reference Example: 12345678
     * @bodyParam datetime datetime required Date & Time Example: 2024-01-01 10:00:00
     * @bodyParam currency_code string required Currency Code Example: BDT
     * @bodyParam notes text required Notes Example: Lorem Imsum Doller sit emet...
     * @bodyParam sub_process_code text required Sub-Process Code Example: 001
     * @bodyParam amount double required Amount of Transaction Example: 5000
     * @bodyParam debit_ledgers Object JSON Object of PHP Array Example: [{"chart_of_account_code": 1020203001,"amount": 5000}]
     * @bodyParam credit_ledgers Object JSON Object of PHP Array Example: [{"chart_of_account_code": 1010100200,"amount": 5000}]
     * @bodyParam logs Object JSON Object of PHP Array Example: {"product": "bKash", "agent": "Kuddus Mia"}
     * 
     * @response {
     *       "success": true,
     *       "status": true,
     *       "status_code": 200,
     *       "data": {
     *           "code": "JNL-240101-0002",
     *           "fiscal_year_id": 5,
     *           "entry_type_id": 5,
     *           "tag_id": 1,
     *           "number": "12345678",
     *           "date": "2024-01-01",
     *           "time": "10:00:00",
     *           "exchange_rate_id": "3",
     *           "debit": 1000,
     *           "credit": 1000,
     *           "is_advance": 0,
     *           "advance_category_id": 0,
     *           "notes": "Lorem Imsum Doller sit emet...",
     *           "is_manual": 0,
     *           "created_by": 1,
     *           "updated_at": "2024-01-29T10:41:09.000000Z",
     *           "created_at": "2024-01-29T10:41:09.000000Z",
     *           "id": 12,
     *           "prepared_by": 1,
     *           "reviewed_by": 1,
     *           "assessed_by": 1,
     *           "approved_by": 1,
     *           "is_reviewed": "approved",
     *           "is_assessed": "approved",
     *           "is_approved": "approved",
     *           "updated_by": 1
     *       }
     *   }
     * 
     * @group Transaction
     * @return \Illuminate\Http\Response
     */
    public function transaction(Request $request){
        $validator = \Validator::make($request->all(), [
            'company_code' => 'required',
            'cost_centre_code' => 'required',
            'entry_type_label' => 'required',
            'currency_code' => 'required',
            'number' => 'required',
            'datetime' => 'required',
            'notes' => 'required',
            'sub_process_code' => 'required',
            'amount' => 'required',
        ]);

        if($request->has('debit_ledgers')){
            if(!isset(collect($request->debit_ledgers)->first()['chart_of_account_code'])){
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 422,
                    'message' => "Debit Ledgers are required."
                ], 422);
            }

            if(!isset(collect($request->debit_ledgers)->first()['amount'])){
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 422,
                    'message' => "Debit Ledger Amounts are required."
                ], 422);
            }
        }

        if($request->has('credit_ledgers')){
            if(!isset(collect($request->credit_ledgers)->first()['chart_of_account_code'])){
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 422,
                    'message' => "Credit Ledgers are required."
                ], 422);
            }

            if(!isset(collect($request->credit_ledgers)->first()['amount'])){
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 422,
                    'message' => "Credit Ledger Amounts are required."
                ], 422);
            }
        }

        if((isset($request->debit_ledgers) && is_array($request->debit_ledgers) && count($request->debit_ledgers) > 0)){
            if(collect($request->debit_ledgers)->sum('amount') <= 0){
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 422,
                    'message' => "Total Debit Amount can not be Zero, Please enter Some Debit Amount"
                ], 422);
            }
        }

        if((isset($request->credit_ledgers) && is_array($request->credit_ledgers) && count($request->credit_ledgers) > 0)){
            if(collect($request->credit_ledgers)->sum('amount') <= 0){
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 422,
                    'message' => "Total Credit Amount can not be Zero, Please enter Some Credit Amount"
                ], 422);
            }
        }

        if((isset($request->debit_ledgers) && is_array($request->debit_ledgers) && count($request->debit_ledgers) > 0) && (isset($request->credit_ledgers) && is_array($request->credit_ledgers) && count($request->credit_ledgers) > 0)){
            if(systemDoubleValue(collect($request->debit_ledgers)->sum('amount'), 2) != systemDoubleValue(collect($request->credit_ledgers)->sum('amount'), 2)){
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 422,
                    'message' => "Debit & Credit Amount is not equal!"
                ], 422);
            }
        }

        if ($validator->passes()) {
            DB::beginTransaction();
            try{

                $company = Company::where('code', $request->company_code)->first();
                if(!isset($company->id)){
                    return response()->json([
                        'success' => false,
                        'status' => false,
                        'status_code' => 422,
                        'message' => "Company Code is Invalid!"
                    ], 422);
                }

                $fiscalYear = getActiveFiscalYear($company->id);
                if((strtotime(date('Y-m-d', strtotime($request->datetime))) < strtotime(date('Y-m-d', strtotime($fiscalYear->start)))) || (strtotime(date('Y-m-d', strtotime($request->datetime))) > strtotime(date('Y-m-d', strtotime($fiscalYear->end))))){
                    return response()->json([
                        'success' => false,
                        'status' => false,
                        'status_code' => 422,
                        'message' => "Date Selection (".date('Y-m-d', strtotime($request->datetime)).") is invalid. Date must be between ".date('Y-m-d', strtotime($fiscalYear->start))." to ".date('Y-m-d', strtotime($fiscalYear->end))
                    ], 422);
                }

                $costCentre = CostCentre::whereHas('profitCentre.company', function($query) use($request){
                    return $query->where('code', $request->company_code);
                })->where('code', $request->cost_centre_code)->first();
                if(!isset($costCentre->id)){
                    return response()->json([
                        'success' => false,
                        'status' => false,
                        'status_code' => 422,
                        'message' => "Cost Centre Code is Invalid!"
                    ], 422);
                }

                $entryType = EntryType::where('label', $request->entry_type_label)->first();
                if(!isset($entryType->id)){
                    return response()->json([
                        'success' => false,
                        'status' => false,
                        'status_code' => 422,
                        'message' => "Entry Type Label is Invalid!"
                    ], 422);
                }

                $currency = Currency::where('code', $request->currency_code)->first();
                if(!isset($currency->id)){
                    return response()->json([
                        'success' => false,
                        'status' => false,
                        'status_code' => 422,
                        'message' => "Currency Code is Invalid!"
                    ], 422);
                }

                $accounts = ChartOfAccount::whereHas('companies.company', function($query) use($request){
                    return $query->where('code', $request->company_code);
                })->pluck('code')->toArray();

                $accountWithID = ChartOfAccount::whereHas('companies.company', function($query) use($request){
                    return $query->where('code', $request->company_code);
                })
                ->get([
                    'id', 'code'
                ]);

                $items = [];
                $subProcess = SubProcess::with([
                    'ledgers'
                ])->where('code', $request->sub_process_code)->first();
                if(!isset($subProcess->id)){
                    return response()->json([
                        'success' => false,
                        'status' => false,
                        'status_code' => 422,
                        'message' => "Sub Process Code is Invalid!"
                    ], 422);
                }

                if(isset($subProcess->id)){
                    if(isset($request->debit_ledgers) && is_array($request->debit_ledgers) && count($request->debit_ledgers) > 0){
                        foreach ($request->debit_ledgers as $key => $value) {
                            if(!in_array($value['chart_of_account_code'], $accounts)){
                                return response()->json([
                                    'success' => false,
                                    'status' => false,
                                    'status_code' => 422,
                                    'message' => "Ledger Code #".$value['chart_of_account_code'].' not available for this Company'
                                ], 422);
                            }

                            array_push($items, [
                                'cost_centre_id' => $costCentre->id,
                                'chart_of_account_id' => $accountWithID->where('code', $value['chart_of_account_code'])->first()->id,
                                'debit' => $value['amount'],
                                'credit' => 0,
                                'narration' => $subProcess->name.' :: '.$request->notes.' :: Debit',
                                'type' => 'api-integration',
                                'source' => $subProcess->id
                            ]);
                        }
                    }else{
                        if($subProcess->ledgers->where('type', 'D')->count() > 0){
                            foreach ($subProcess->ledgers->where('type', 'D') as $key => $ledger) {
                                $amount = 0;
                                if($request->amount > 0 && $ledger->percentage > 0){
                                    $amount = floor($request->amount*($ledger->percentage/100));
                                }

                                array_push($items, [
                                    'cost_centre_id' => $costCentre->id,
                                    'chart_of_account_id' => $ledger->chart_of_account_id,
                                    'debit' => $amount,
                                    'credit' => 0,
                                    'narration' => $subProcess->name.' :: '.$request->notes.' :: Debit',
                                    'type' => 'api-integration',
                                    'source' => $subProcess->id
                                ]);
                            }
                        }
                    }

                    if(isset($request->credit_ledgers) && is_array($request->credit_ledgers) && count($request->credit_ledgers) > 0){
                        foreach ($request->credit_ledgers as $key => $value) {
                            if(!in_array($value['chart_of_account_code'], $accounts)){
                                return response()->json([
                                    'success' => false,
                                    'status' => false,
                                    'status_code' => 422,
                                    'message' => "Ledger Code #".$value['chart_of_account_code'].' not available for this Company'
                                ], 422);
                            }

                            array_push($items, [
                                'cost_centre_id' => $costCentre->id,
                                'chart_of_account_id' => $accountWithID->where('code', $value['chart_of_account_code'])->first()->id,
                                'debit' => 0,
                                'credit' => $value['amount'],
                                'narration' => $subProcess->name.' :: '.$request->notes.' :: Credit',
                                'type' => 'api-integration',
                                'source' => $subProcess->id
                            ]);
                        }
                    }else{
                        if($subProcess->ledgers->where('type', 'C')->count() > 0){
                            foreach ($subProcess->ledgers->where('type', 'C') as $key => $ledger) {
                                $amount = 0;
                                if($request->amount > 0 && $ledger->percentage > 0){
                                    $amount = floor($request->amount*($ledger->percentage/100));
                                }

                                array_push($items, [
                                    'cost_centre_id' => $costCentre->id,
                                    'chart_of_account_id' => $ledger->chart_of_account_id,
                                    'debit' => 0,
                                    'credit' => $amount,
                                    'narration' => $subProcess->name.' :: '.$request->notes.' :: Credit',
                                    'type' => 'api-integration',
                                    'source' => $subProcess->id
                                ]);
                            }
                        }
                    }
                }

                if(systemDoubleValue(collect($items)->sum('debit'), 2) != systemDoubleValue(collect($items)->sum('credit'), 2)){
                    return response()->json([
                        'success' => false,
                        'status' => false,
                        'status_code' => 422,
                        'message' => "Debit & Credit Amount is not equal!"
                    ], 422);
                }

                $exchangeRate = getExchangeRates($currency->id, date('Y-m-d', strtotime($request->datetime)), date('H:i:s', strtotime($request->datetime)))['rate'];
                if(isset($exchangeRate->id)){
                    $exchange_rate_id = $exchangeRate->id;
                }else{
                    return response()->json([
                        'success' => false,
                        'status' => false,
                        'status_code' => 422,
                        'message' => "No Exchange Rate found on this timeline #".date('Y-m-d g:i a', strtotime($request->datetime))
                    ], 422);
                }

                $entry = saveLedgerEntries($entryType->id, $request->datetime, isset($request->tag_id) ? $request->tag_id : 1, $request->number, $request->notes, $items, $exchange_rate_id, isset($request->is_advance) ? $request->is_advance : 0, isset($request->advance_category_id) ? $request->advance_category_id : 0, 0, $company->id);

                $response = [
                    'success' => $entry['success'],
                    'status_code' => $entry['success'] ? 200 : 422,
                    'data' => isset($entry['entry']) ? $entry['entry'] : [],
                    'message' => isset($entry['message']) ? $entry['message'] : '',
                ];

                if(isset($entry['entry']) && isset($request->logs)){
                    /*
                        $logs = [];
                        foreach($request->logs as $key => $value){
                            array_push($logs, [
                                'entry_id' => $entry['entry']->id,
                                'key' => $key,
                                'value' => $request->logs,
                            ]);
                        }
                    */

                    EntryLog::insert([
                        'entry_id' => $entry['entry']->id,
                        'key' => 'logs',
                        'value' => $request->logs,
                    ]);
                }

                $transaction = Transaction::create([
                    'sub_process_id' => $subProcess->id,
                    'datetime' => $request->datetime,
                    'exchange_rate_id' => $exchange_rate_id,
                    'amount' => $request->amount,
                ]);

                if(isset($entry['entry']->id)){
                    TransactionEntry::create([
                        'transaction_id' => $transaction->id,
                        'entry_id' => $entry['entry']->id,
                    ]);
                }

                TransactionLog::create([
                    'transaction_id' => $transaction->id,
                    'request' => json_encode($request->all()),
                    'response' => json_encode($response),
                    'logs' => "Posted by ".auth()->user()->name,
                ]);
                
                DB::commit();
                return response()->json($response, $entry['success'] ? 200 : 422);
            }catch (\Throwable $th){
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 500,
                    'message' => $th->getMessage()
                ], 500);
            }
        }

        return response()->json([
            'success' => false,
            'status' => false,
            'status_code' => 422,
            'message' => implode(', ', $validator->errors()->all())
        ], 422);
    }

    /**
     * Reversal
     * 
     * API Integration of Transaction Reversal
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * 
     * @bodyParam transaction_code string required Transaction Code Example: JNL-240101-0002
     * @bodyParam notes text required Notes Example: Lorem Imsum Doller sit emet...
     * 
     * @response {
     *       "success": true,
     *       "status": true,
     *       "status_code": 200,
     *       "data": {
     *           "code": "JNL-240101-0002",
     *           "fiscal_year_id": 5,
     *           "entry_type_id": 5,
     *           "tag_id": 1,
     *           "number": "12345678",
     *           "date": "2024-01-01",
     *           "time": "10:00:00",
     *           "exchange_rate_id": "3",
     *           "debit": 1000,
     *           "credit": 1000,
     *           "is_advance": 0,
     *           "advance_category_id": 0,
     *           "notes": "Lorem Imsum Doller sit emet...",
     *           "is_manual": 0,
     *           "created_by": 1,
     *           "updated_at": "2024-01-29T10:41:09.000000Z",
     *           "created_at": "2024-01-29T10:41:09.000000Z",
     *           "id": 12,
     *           "prepared_by": 1,
     *           "reviewed_by": 1,
     *           "assessed_by": 1,
     *           "approved_by": 1,
     *           "is_reviewed": "approved",
     *           "is_assessed": "approved",
     *           "is_approved": "approved",
     *           "updated_by": 1
     *       }
     *   }
     * 
     * @group Transaction
     * @return \Illuminate\Http\Response
     */
    public function reverse(Request $request){
        $validator = \Validator::make($request->all(), [
            'transaction_code' => 'required',
        ]);

        if ($validator->passes()) {
            DB::beginTransaction();
            try{
                $entry = Entry::where('code', $request->transaction_code)->first();
                if (!isset($entry->id)) {
                    return response()->json([
                        'success' => false,
                        'status' => false,
                        'status_code' => 422,
                        'message' => "No Transaction found with code #".$request->transaction_code
                    ]);
                }

                if ($entry->is_reversed == 1) {
                    return response()->json([
                        'success' => false,
                        'status' => false,
                        'status_code' => 422,
                        'message' => "This Transaction cannot be reversed!"
                    ]);
                }

                $items = [];
                if ($entry->items->count() > 0) {
                    foreach ($entry->items as $key => $item) {
                        array_push($items, [
                            'cost_centre_id' => $item->cost_centre_id,
                            'chart_of_account_id' => $item->chart_of_account_id,
                            'debit' => ($item->debit_credit == 'C' ? $item->amount : 0),
                            'credit' => ($item->debit_credit == 'D' ? $item->amount : 0),
                            'amount' => $item->amount,
                            'debit_credit' => ($item->debit_credit == 'C' ? 'D' : 'C'),
                            'narration' => $item->narration.' :: reversed',
                        ]);
                    }
                }

                $fiscalYear = FiscalYear::with([
                    'fiscalYearOpenings'
                ])->findOrFail($entry->fiscal_year_id);

                $newEntry = saveLedgerEntries($entry->entry_type_id, $entry->date . ' ' . $entry->time, 1, $entry->number, $request->notes, $items, $entry->exchange_rate_id, $entry->is_advance, $entry->advance_category_id, $entry->is_manual, $entry->items[0]->costCentre->profitCentre->company_id, $fiscalYear);

                if($newEntry['success']){
                    $entry->is_reversed = 1;
                    $entry->save();
                }
                

                $response = [
                    'success' => $newEntry['success'],
                    'status_code' => $newEntry['success'] ? 200 : 422,
                    'message' => $newEntry['success'] ? "Transaction #".$request->transaction_code." has been reversed successfully." : (isset($newEntry['message']) ? $newEntry['message'] : ''),
                    'data' => isset($newEntry['entry']) ? $newEntry['entry'] : [],
                ];
                
                DB::commit();
                return response()->json($response, $newEntry['success'] ? 200 : 422);
            }catch (\Throwable $th){
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 500,
                    'message' => $th->getMessage()
                ], 500);
            }
        }

        return response()->json([
            'success' => false,
            'status' => false,
            'status_code' => 422,
            'message' => implode(', ', $validator->errors()->all())
        ], 422);
    }
}
