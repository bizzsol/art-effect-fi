<?php
bolt_decrypt( __FILE__ , '0L0chq'); return 0;
##!!!##