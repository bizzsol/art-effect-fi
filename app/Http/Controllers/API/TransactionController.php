<?php
bolt_decrypt( __FILE__ , 'jkP3AR'); return 0;
##!!!##