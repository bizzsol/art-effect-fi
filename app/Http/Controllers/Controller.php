<?php
bolt_decrypt( __FILE__ , 'HrvL0K'); return 0;
##!!!##