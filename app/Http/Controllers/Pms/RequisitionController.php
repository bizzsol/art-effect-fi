<?php
bolt_decrypt( __FILE__ , '9kJrQ1'); return 0;
##!!!##