<?php
bolt_decrypt( __FILE__ , 'PQW8Es'); return 0;
##!!!##