<?php
bolt_decrypt( __FILE__ , 'APAiiG'); return 0;
##!!!##