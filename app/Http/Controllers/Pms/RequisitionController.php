<?php
bolt_decrypt( __FILE__ , 'CUjVVJ'); return 0;
##!!!##