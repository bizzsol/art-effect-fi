<?php
bolt_decrypt( __FILE__ , 'OxRu91'); return 0;
##!!!##