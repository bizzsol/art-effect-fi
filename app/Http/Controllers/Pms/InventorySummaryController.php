<?php
bolt_decrypt( __FILE__ , 'ah0BNn'); return 0;
##!!!##