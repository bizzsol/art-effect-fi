<?php
bolt_decrypt( __FILE__ , 'mxD82t'); return 0;
##!!!##