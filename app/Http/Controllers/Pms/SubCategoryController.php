<?php
bolt_decrypt( __FILE__ , '7GNsDg'); return 0;
##!!!##