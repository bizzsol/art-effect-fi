<?php
bolt_decrypt( __FILE__ , '0dvoI6'); return 0;
##!!!##