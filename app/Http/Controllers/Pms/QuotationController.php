<?php
bolt_decrypt( __FILE__ , 'Om7l3X'); return 0;
##!!!##