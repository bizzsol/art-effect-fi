<?php
bolt_decrypt( __FILE__ , 'I0cmXJ'); return 0;
##!!!##