<?php
bolt_decrypt( __FILE__ , 'kmJ2KI'); return 0;
##!!!##