<?php
bolt_decrypt( __FILE__ , '7xx81X'); return 0;
##!!!##