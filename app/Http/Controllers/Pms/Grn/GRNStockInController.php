<?php
bolt_decrypt( __FILE__ , 'EGlHWT'); return 0;
##!!!##