<?php
bolt_decrypt( __FILE__ , 'jCIga9'); return 0;
##!!!##