<?php
bolt_decrypt( __FILE__ , 'YWBULm'); return 0;
##!!!##CgpuYW1lc3BhY2UgQXBwXEh0dHBcQ29udHJvbGxlcnNcUG1zOwoKdXNlIEFwcFxIdHRwXENvbnRyb2xsZXJzXENvbnRyb2xsZXI7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xQcm9kdWN0VW5pdDsKdXNlIElsbHVtaW5hdGVcSHR0cFxSZXF1ZXN0Owp1c2UgRGF0YVRhYmxlczsKCmNsYXNzIFByb2R1Y3RVbml0Q29udHJvbGxlciBleHRlbmRzIENvbnRyb2xsZXIKeyAgIAoKICAgIHB1YmxpYyBmdW5jdGlvbiBoZWFkZXJDb2x1bW5zKCR2YWx1ZT0nJykKICAgIHsKICAgICAgICAkcm93PSBhcnJheSgKICAgICAgICAgICAgWydTTCcsICdTTCddLCAKICAgICAgICAgICAgWyd1bml0X25hbWUnLCAndW5pdF9uYW1lJywgJ3RleHQtY2VudGVyJ10sCiAgICAgICAgICAgIFsndW5pdF9jb2RlJywgJ3VuaXRfY29kZScsICd0ZXh0LWNlbnRlciddLAogICAgICAgICAgICBbJ3N0YXR1cycsICdzdGF0dXMnLCAndGV4dC1jZW50ZXInXSwgCiAgICAgICAgICAgIFsnYWN0aW9ucycsICdhY3Rpb25zJywgJ3RleHQtY2VudGVyJywnd2lkdGg6MTUlJ10KICAgICAgICApOwogICAgICAgIHJldHVybiAkcm93OwogICAgfQogICAgLyoqCiAgICAgKiBEaXNwbGF5IGEgbGlzdGluZyBvZiB0aGUgcmVzb3VyY2UuCiAgICAgKgogICAgICogQHJldHVybiBcSWxsdW1pbmF0ZVxIdHRwXFJlc3BvbnNlCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBpbmRleCgpCiAgICB7CiAgICAgICAgdHJ5IHsKCiAgICAgICAgICAgICR0aXRsZSA9ICdQcm9kdWN0IFVuaXQnOwogICAgICAgICAgICAkc3RhdHVzPXN0YXR1cygpOwogICAgICAgICAgICAkcHJlZml4PSdQVS0nLmRhdGUoJ3knLCBzdHJ0b3RpbWUoZGF0ZSgnWS1tLWQnKSkpLictTUJNLSc7CiAgICAgICAgICAgICR1bml0X2NvZGU9dW5pcXVlQ29kZSgxNCwkcHJlZml4LCdwcm9kdWN0X3VuaXRzJywnaWQnKTsKICAgICAgICAgICAgJGhlYWRlckNvbHVtbnM9JHRoaXMtPmhlYWRlckNvbHVtbnMoKTsKICAgICAgICAgICAgJHByb2R1Y3RfdW5pdHMgPSBQcm9kdWN0VW5pdDo6d2hlbighZGF0YXRhYmxlT3JkZXJpbmcoKSwgZnVuY3Rpb24oJHF1ZXJ5KXsKICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPm9yZGVyYnkoJ2lkJywgJ2Rlc2MnKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBpZiAocmVxdWVzdCgpLT5hamF4KCkpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRGF0YXRhYmxlczo6b2YoJHByb2R1Y3RfdW5pdHMpCiAgICAgICAgICAgICAgICAgICAgLT5hZGRJbmRleENvbHVtbigpCiAgICAgICAgICAgICAgICAgICAgLT5lZGl0Q29sdW1uKCdzdGF0dXMnLCBmdW5jdGlvbigkdW5pdCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1Y2ZpcnN0KCR1bml0LT5zdGF0dXMpOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5hZGRDb2x1bW4oJ2FjdGlvbnMnLCBmdW5jdGlvbigkdW5pdCl7CiAgICAgICAgICAgICAgICAgICAgICAgICRhY3Rpb25zID0gJyc7CiAgICAgICAgICAgICAgICAgICAgICAgICRhY3Rpb25zLj0nPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBkYXRhLXJvbGU9InB1dCIgZGF0YS1zcmM9Iicucm91dGUoJ3Btcy5wcm9kdWN0LW1hbmFnZW1lbnQucHJvZHVjdC11bml0LnNob3cnLCAkdW5pdC0+aWQpLiciIG9uY2xpY2s9ImVkaXRCdG4oJCh0aGlzKSkiIGNsYXNzPSJidG4gYnRuLWluZm8gbS0xIHJvdW5kZWQtY2lyY2xlIGVkaXRCdG4iPjxpIGNsYXNzPSJsYXMgbGEtZWRpdCI+PC9pPjwvYT4nOwogICAgICAgICAgICAgICAgICAgICAgICAkYWN0aW9ucy49JzxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgZGF0YS1yb2xlPSJkZWxldGUiIG9uY2xpY2s9ImRlbGV0ZUJ0bigkKHRoaXMpKSIgZGF0YS1zcmM9Iicucm91dGUoJ3Btcy5wcm9kdWN0LW1hbmFnZW1lbnQucHJvZHVjdC11bml0LmRlc3Ryb3knLCAkdW5pdC0+aWQpLiciIGNsYXNzPSJidG4gYnRuLWRhbmdlciBtLTEgcm91bmRlZC1jaXJjbGUgZGVsZXRlQnRuIj48aSBjbGFzcz0ibGFzIGxhLXRyYXNoIj48L2k+PC9hPic7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkYWN0aW9uczsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC0+cmF3Q29sdW1ucyhbJ2FjdGlvbnMnXSkKICAgICAgICAgICAgICAgICAgICAtPm1ha2UodHJ1ZSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gdmlldygncG1zLmJhY2tlbmQucGFnZXMucHJvZHVjdC11bml0LmluZGV4JywgY29tcGFjdCgndGl0bGUnLCAnaGVhZGVyQ29sdW1ucycsJ3N0YXR1cycsJ3VuaXRfY29kZScpKTsKICAgICAgICB9Y2F0Y2ggKFxUaHJvd2FibGUgJHRoKXsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5iYWNrV2l0aEVycm9yKCR0aC0+Z2V0TWVzc2FnZSgpKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBTaG93IHRoZSBmb3JtIGZvciBjcmVhdGluZyBhIG5ldyByZXNvdXJjZS4KICAgICAqCiAgICAgKiBAcmV0dXJuIFxJbGx1bWluYXRlXEh0dHBcUmVzcG9uc2UKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGNyZWF0ZSgpCiAgICB7CiAgICAgICAgLy8KICAgIH0KCiAgICAvKioKICAgICAqIFN0b3JlIGEgbmV3bHkgY3JlYXRlZCByZXNvdXJjZSBpbiBzdG9yYWdlLgogICAgICoKICAgICAqIEBwYXJhbSAgXElsbHVtaW5hdGVcSHR0cFxSZXF1ZXN0ICAkcmVxdWVzdAogICAgICogQHJldHVybiBcSWxsdW1pbmF0ZVxIdHRwXFJlc3BvbnNlCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBzdG9yZShSZXF1ZXN0ICRyZXF1ZXN0KQogICAgewogICAgICAgICR0aGlzLT52YWxpZGF0ZSgkcmVxdWVzdCwgWwogICAgICAgICAgICAndW5pdF9uYW1lJyA9PiBbJ3JlcXVpcmVkJywgJ3N0cmluZycsICdtYXg6MjU1J10sCiAgICAgICAgICAgICd1bml0X2NvZGUnID0+IFsncmVxdWlyZWQnLCAnc3RyaW5nJywgJ21heDoyNTUnXSwKICAgICAgICAgICAgJ3N0YXR1cycgPT4gWydyZXF1aXJlZCcsICdzdHJpbmcnLCAnbWF4OjI1NSddLAogICAgICAgIF0pOwoKICAgICAgICB0cnkgewoKICAgICAgICAgICAgJGlucHV0cyA9ICRyZXF1ZXN0LT5hbGwoKTsKICAgICAgICAgICAgdW5zZXQoJGlucHV0c1snX3Rva2VuJ10pOwogICAgICAgICAgICB1bnNldCgkaW5wdXRzWydfbWV0aG9kJ10pOwogICAgICAgICAgICAKICAgICAgICAgICAgJHByb2R1Y3RVbml0ID0gUHJvZHVjdFVuaXQ6OmNyZWF0ZSgkaW5wdXRzKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+YmFja1dpdGhTdWNjZXNzKCdQcm9kdWN0IFVuaXQgaGFzIGJlZW4gYWRkZWQgc3VjY2Vzc2Z1bGx5Jyk7CiAgICAgICAgfWNhdGNoIChcVGhyb3dhYmxlICR0aCl7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+YmFja1dpdGhFcnJvcigkdGgtPmdldE1lc3NhZ2UoKSk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogRGlzcGxheSB0aGUgc3BlY2lmaWVkIHJlc291cmNlLgogICAgICoKICAgICAqIEBwYXJhbSAgXEFwcFxQcm9kdWN0VW5pdCAgJHByb2R1Y3RVbml0CiAgICAgKiBAcmV0dXJuIFxJbGx1bWluYXRlXEh0dHBcUmVzcG9uc2UKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHNob3coUHJvZHVjdFVuaXQgJHByb2R1Y3RVbml0KQogICAgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgICRwcm9kdWN0VW5pdC0+c3JjID0gcm91dGUoJ3Btcy5wcm9kdWN0LW1hbmFnZW1lbnQucHJvZHVjdC11bml0LnVwZGF0ZScsJHByb2R1Y3RVbml0LT5pZCk7CiAgICAgICAgICAgICRwcm9kdWN0VW5pdC0+cmVxX3R5cGUgPSAncHV0JzsKICAgICAgICAgICAgCiAgICAgICAgICAgICRkYXRhID0gWwogICAgICAgICAgICAgICAgJ3N0YXR1cycgPT4gJ3N1Y2Nlc3MnLAogICAgICAgICAgICAgICAgJ2luZm8nID0+ICRwcm9kdWN0VW5pdAogICAgICAgICAgICBdOwoKICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oJGRhdGEpOwogICAgICAgIH1jYXRjaCAoXFRocm93YWJsZSAkdGgpewogICAgICAgICAgICAkZGF0YSA9IFsKICAgICAgICAgICAgICAgICdzdGF0dXMnID0+IG51bGwsCiAgICAgICAgICAgICAgICAnaW5mbycgPT4gJHRoLT5nZXRNZXNzYWdlKCkKICAgICAgICAgICAgXTsKICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oJGRhdGEpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFNob3cgdGhlIGZvcm0gZm9yIGVkaXRpbmcgdGhlIHNwZWNpZmllZCByZXNvdXJjZS4KICAgICAqCiAgICAgKiBAcGFyYW0gIFxBcHBcUHJvZHVjdFVuaXQgICRwcm9kdWN0VW5pdAogICAgICogQHJldHVybiBcSWxsdW1pbmF0ZVxIdHRwXFJlc3BvbnNlCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBlZGl0KFByb2R1Y3RVbml0ICRwcm9kdWN0VW5pdCkKICAgIHsKICAgICAgICAvLwogICAgfQoKICAgIC8qKgogICAgICogVXBkYXRlIHRoZSBzcGVjaWZpZWQgcmVzb3VyY2UgaW4gc3RvcmFnZS4KICAgICAqCiAgICAgKiBAcGFyYW0gIFxJbGx1bWluYXRlXEh0dHBcUmVxdWVzdCAgJHJlcXVlc3QKICAgICAqIEBwYXJhbSAgXEFwcFxQcm9kdWN0VW5pdCAgJHByb2R1Y3RVbml0CiAgICAgKiBAcmV0dXJuIFxJbGx1bWluYXRlXEh0dHBcUmVzcG9uc2UKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHVwZGF0ZShSZXF1ZXN0ICRyZXF1ZXN0LCBQcm9kdWN0VW5pdCAkcHJvZHVjdFVuaXQpCiAgICB7CiAgICAgICAgJHRoaXMtPnZhbGlkYXRlKCRyZXF1ZXN0LCBbCiAgICAgICAgICAgICd1bml0X25hbWUnID0+IFsncmVxdWlyZWQnLCAnc3RyaW5nJywgJ21heDoyNTUnXSwKICAgICAgICAgICAgJ3VuaXRfY29kZScgPT4gWydyZXF1aXJlZCcsICdzdHJpbmcnLCAnbWF4OjI1NSddLAogICAgICAgICAgICAnc3RhdHVzJyA9PiBbJ3JlcXVpcmVkJywgJ3N0cmluZycsICdtYXg6MjU1J10sCiAgICAgICAgXSk7CgogICAgICAgIHRyeSB7CiAgICAgICAgIAogICAgICAgICAgICAkaW5wdXRzID0gJHJlcXVlc3QtPmFsbCgpOwogICAgICAgICAgICB1bnNldCgkaW5wdXRzWydfdG9rZW4nXSk7CiAgICAgICAgICAgIHVuc2V0KCRpbnB1dHNbJ19tZXRob2QnXSk7CgogICAgICAgICAgICAkcHJvZHVjdFVuaXQtPnVwZGF0ZSgkaW5wdXRzKTsKCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+YmFja1dpdGhTdWNjZXNzKCdQcm9kdWN0IFVuaXQgaGFzIGJlZW4gdXBkYXRlZCBzdWNjZXNzZnVsbHknKTsKICAgICAgICB9Y2F0Y2ggKFxUaHJvd2FibGUgJHRoKXsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5iYWNrV2l0aEVycm9yKCR0aC0+Z2V0TWVzc2FnZSgpKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBSZW1vdmUgdGhlIHNwZWNpZmllZCByZXNvdXJjZSBmcm9tIHN0b3JhZ2UuCiAgICAgKgogICAgICogQHBhcmFtICBcQXBwXFByb2R1Y3RVbml0ICAkcHJvZHVjdFVuaXQKICAgICAqIEByZXR1cm4gXElsbHVtaW5hdGVcSHR0cFxSZXNwb25zZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZGVzdHJveShQcm9kdWN0VW5pdCAkcHJvZHVjdFVuaXQpCiAgICB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJHByb2R1Y3RVbml0LT5kZWxldGUoKTsKICAgICAgICB9Y2F0Y2ggKFxUaHJvd2FibGUgJHRoKXsKICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oJHRoLT5nZXRNZXNzYWdlKCkpOwogICAgICAgIH0KICAgIH0KfQo=