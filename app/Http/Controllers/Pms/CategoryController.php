<?php
bolt_decrypt( __FILE__ , '3EChOx'); return 0;
##!!!##