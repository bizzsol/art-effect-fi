<?php
bolt_decrypt( __FILE__ , '6jlGGH'); return 0;
##!!!##