<?php
bolt_decrypt( __FILE__ , '52Flwg'); return 0;
##!!!##