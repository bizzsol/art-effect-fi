<?php
bolt_decrypt( __FILE__ , 'GEzuDA'); return 0;
##!!!##

namespace App\Http\Controllers\Pms\Purchase;

use App\Http\Controllers\Controller;
use App\Mail\Pms\PurchaseOrderMail;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\Models\PmsModels\Purchase\PurchaseOrderItem;
use App\Models\PmsModels\Requisition;
use App\Models\PmsModels\Suppliers;
use App\Models\PmsModels\Product;
use App\Models\PmsModels\Rfp\RequestProposal;
use App\Models\PmsModels\Rfp\RequestProposalDetails;
use App\Models\PmsModels\Rfp\RequestProposalDefineSupplier;
use App\Models\PmsModels\Quotations;
use App\Models\PmsModels\QuotationsItems;
use App\Models\PmsModels\SupplierPaymentTerm;
use App\Models\PmsModels\SupplierPayment;
use App\Models\PmsModels\RequisitionTracking;
use App\Models\PmsModels\RequisitionItem;
use App\Models\PmsModels\Purchase\PurchaseOrderRequisition;
use App\Models\PmsModels\Accounts\CurrencyType;
use App\Models\PmsModels\Accounts\ExchangeRate;
use App\Models\Hr\Unit;
use App\Models\Hr\Department;
use App\Models\PmsModels\Category;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\View;
use DB;
use PDF, DataTables;

class PurchaseController extends Controller
{
    public function headerColumns($value='')
    {
        return array(
            ['SL', 'SL'], 
            ['approval_date', 'approval_date', 'text-center'],
            ['reference_no', 'reference_no', 'text-center'],
            ['supplier', 'supplier', 'text-left'], 
            ['quotation_ref_no', 'quotation_ref_no', 'text-center'],
            ['total_price', 'total_price', 'text-right'], 
            ['vat', 'vat', 'text-right'],
            ['gross_price', 'gross_price', 'text-right'],
            ['actions', 'actions', 'text-center','width:15%']
        );
    }

    public function index()
    {
        try {
            $title = 'Purchase Order';
            $purchaseOrderList = PurchaseOrder::with([
                'relQuotation.relSuppliers',
                'relGoodReceiveNote',
                'relQuotation.exchangeRate.currency',
                'relPoAttachment',
                'relSupplierPayments'
            ])
            ->whereHas('relQuotation', function($query){
                return $query->whereNotIn('type',['direct-purchase']);
            })
            ->whereIn('is_send',['no','yes'])
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });


            $options = [
                'send-po-to-supplier' => auth()->user()->hasPermissionTo('send-po-to-supplier'),
                'po-cancel' => auth()->user()->hasPermissionTo('po-cancel'),
            ];

            if (request()->ajax()) {
                return DataTables::of($purchaseOrderList)
                ->addIndexColumn()
                ->addColumn('approval_date', function($values){
                    return date('Y-m-d',strtotime($values->po_date));
                })
                ->filterColumn('approval_date', function ($query, $keyword) {
                    $query->where('po_date', 'LIKE', '%'.$keyword.'%');
                })
                ->orderColumn('approval_date', function ($query, $order) {
                    return $query->orderBy('po_date', $order);
                })
                ->editColumn('reference_no', function($values){
                    return  '<a href="javascript:void(0)" onclick="purchaseOrderDetails($(this))" class="btn btn-link" data-src="'.route('pms.purchase.order-list.show',$values->id).'">'.$values->reference_no.'</a>';
                })
                ->addColumn('supplier', function($values){
                    return  isset($values->relQuotation->relSuppliers) ? (isset($values->relQuotation->relSuppliers->name) ? $values->relQuotation->relSuppliers->name.' ('.$values->relQuotation->relSuppliers->code.')' : '') : '';
                })
                ->filterColumn('supplier', function ($query, $keyword) {
                    return $query->whereHas('relQuotation.relSuppliers', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%')
                              ->orWhere('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('supplier', function ($query, $order) {
                    return pleaseSortMe($query, $order, Quotations::select('suppliers.name')
                        ->join('suppliers', 'suppliers.id', '=', 'quotations.supplier_id')
                        ->whereColumn('quotations.id', 'purchase_orders.quotation_id')
                        ->take(1)
                    );
                })
                ->addColumn('quotation_ref_no', function($values){
                    return isset($values->relQuotation->reference_no)?$values->relQuotation->reference_no:'';
                })
                ->filterColumn('quotation_ref_no', function ($query, $keyword) {
                    return $query->whereHas('relQuotation', function ($query) use($keyword) {
                        $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('quotation_ref_no', function ($query, $order) {
                    return pleaseSortMe($query, $order, Quotations::select('quotations.reference_no')
                        ->whereColumn('quotations.id', 'purchase_orders.quotation_id')
                        ->take(1)
                    );
                })
                ->editColumn('total_price', function($values){
                    return ((isset($values->relQuotation->exchangeRate->currency->symbol)?$values->relQuotation->exchangeRate->currency->symbol:'').' '.systemMoneyFormat($values->total_price));
                })
                ->editColumn('vat', function($values){
                    return ((isset($values->relQuotation->exchangeRate->currency->symbol)?$values->relQuotation->exchangeRate->currency->symbol:'').' '.systemMoneyFormat($values->vat));
                })
                ->editColumn('gross_price', function($values){
                    return ((isset($values->relQuotation->exchangeRate->currency->symbol)?$values->relQuotation->exchangeRate->currency->symbol:'') .' '.systemMoneyFormat($values->gross_price));
                })
                ->addColumn('actions', function($values) use($options){
                    $actions = '';

                    if($values->relGoodReceiveNote->count()==0){

                        if($options['send-po-to-supplier']){
                            if ($values->is_send=='no') {
                                $actions .= '<a data-src="'. route('pms.purchase.send.po.to.supplier', $values->id) .'" class="btn btn-xs btn-primary m-1" title="Send Purchase Order To Supplier" onclick="poActions($(this))"><i class="las la-paper-plane"></i></a>';

                            }else{
                                $actions .= '<a class="btn btn-xs btn-success m-1" title="Purchase Order Already Sent To Supplier"><i class="las la-check-circle"></i></a>';
                            }
                        }

                        if($options['po-cancel']){
                            $actions .= '<a data-src="'.route('pms.purchase.cancel.po', $values->id).'" class="btn btn-xs btn-danger deletePo m-1" title="Cancel Purchase Order" onclick="poActions($(this))"><i class="las la-times-circle"></i></a>';
                        }

                        /*
                        if ($values->relPoAttachment->count() <= 0 && $values->relSupplierPayments->whereIn('status',['approved','audited'])->count() <=0) {
                            
                            $actions .= '<a href="'.route('pms.purchase.order-list.revise.po',$values->id).'" target="__blank" class="btn btn-xs btn-success m-1" title="Purchase Order Revise"><i class="las la-edit"></i></a>';
                        }
                        */
                    }

                    $actions .=' <a target="_blank" href="'.route('pms.billing-audit.po.invoice.print',$values->id).'"  title="Purchase Order Print View" class="btn btn-xs btn-warning m-1"><i class="las la-print"></i></a>';

                    $actions .=' <a target="_blank" href="'.route('pms.billing-audit.po.history',$values->id).'"  title="PO History" class="btn btn-xs btn-info m-1"><i class="las la-user-clock"></i></a>';

                    return $actions;

                })
                ->rawColumns(['reference_no','supplier','total_price','vat','gross_price', 'actions'])
                ->make(true);
            }

            return view('pms.backend.pages.purchase.order-list', ['title'=>$title,
                'headerColumns'=>$this->headerColumns()]);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

   

    public function sendPoToSupplier($id)
    {   
        DB::beginTransaction();
        try {

            $purchaseOrder=PurchaseOrder::findOrFail($id);
            $purchaseOrder->is_send = 'yes';
            $purchaseOrder->save();

            $data["email"] = $purchaseOrder->relQuotation->relSuppliers->email;
            $data["title"] = "Purchase Order Email";
            $data["reference_no"] = $purchaseOrder->reference_no;
            $data["purchaseOrder"] = $purchaseOrder;

            // $pdf = PDF::loadView('pms.backend.mail.purchase-order-mail', $data)->setOptions(['defaultFont' => 'sans-serif']);

            // Mail::send('pms.backend.mail.po_mail_body', $data, function ($message) use ($data, $pdf) {
            //     $message->to($data["email"], $data["email"])
            //     ->subject($data["title"])
            //     ->attachData($pdf->output(), $data["reference_no"].".pdf");
            // });

            // $pdf = outputMPDF('pms.backend.pages.billing.po-invoice-pdf', $data, $data["reference_no"], $data["reference_no"]);

            // Mail::send('pms.backend.mail.po_mail_body', $data, function ($message) use ($data, $pdf) {
            //     $message->to($data["email"], $data["email"])
            //     ->subject($data["title"])
            //     ->attachData($pdf, $data["reference_no"].".pdf");
            // });

            // $message = '<span class="notification-links" data-src="'.route('pms.purchase.order-list.show',$purchaseOrder->id).'?view" data-title="Purchase Order Details">Reference No:'.$purchaseOrder->reference_no.'. Waiting For Gate In.</span>';

            // CreateOrUpdateNotification('',getManagerInfo('Gate Permission',$purchaseOrder->hr_unit_id),$message,'unread','send-to-gate-manager');

            DB::commit();
            return response()->json([
                'success' => true,
                'message' => 'Purchase order has been successfully sent to supplier.'
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function show($id)
    {
        $response = [];

        try{
            $modal = PurchaseOrder::with([
                'relQuotation.relSuppliers.SupplierRatings',
                'relQuotation.exchangeRate.currency',
                'relPurchaseOrderItems.relProduct.category.category',
                'relPurchaseOrderItems.relProduct.productUnit',
                'relPurchaseOrderItems.relProduct.attributes.attributeOption.attribute',
            ])->findOrFail($id);
            $requisitionItems = RequisitionItem::with([
                'attributes.attributeOption.attribute'
            ])
            ->whereHas('requisition.requestProposalRequisition', function($query) use($modal){
                return $query->where('request_proposal_id', $modal->relQuotation->request_proposal_id);
            })
            ->get();
            
            $systemCurrency = systemCurrency();
            $currency = $modal->relQuotation->exchangeRate->currency->code;
            $exchangeRate = exchangeRate($modal->relQuotation->exchangeRate, $systemCurrency->id);
            $same = ($systemCurrency->id == $modal->relQuotation->exchangeRate->currency_id ? true : false);
            if ($modal) {
                $body = View::make('pms.backend.pages.purchase.show',[
                    'purchaseOrder' => $modal,
                    'requisitionItems' => $requisitionItems,
                    'systemCurrency' => $systemCurrency,
                    'currency' => $currency,
                    'exchangeRate' => $exchangeRate,
                    'same' => $same,
                ]);

                if (request()->has('view')) {
                    return $body->render();
                }
                $response['result'] = 'success';
                $response['body'] = $body->render();
                $response['message'] = 'Successfully Generated PO';
            }else{
                $response['result'] = 'error';
                $response['message'] = 'Purchase Order not found!!';
            }

        }catch(\Throwable $th){
            $response['result'] = 'error';
            $response['message'] = $th->getMessage();
        }

        if (request()->has('view')) {
            return $body->render();
        }else{
            return $response;
        }
    }

    public function workOrderCancel($id)
    {
        DB::beginTransaction();
        try {
            
            $purchaseOrder=PurchaseOrder::findOrFail($id);
            $purchaseOrder->is_send = 'halt';
            $purchaseOrder->save();

            // $data["email"] = $purchaseOrder->relQuotation->relSuppliers->email;
            // $data["title"] = "Purchase Order Email";
            // $data["reference_no"] = $purchaseOrder->reference_no;
            // $data["purchaseOrder"] = $purchaseOrder;
            
            // $pdf = outputMPDF('pms.backend.pages.billing.po-invoice-pdf', $data, $data["reference_no"], $data["reference_no"]);
            // Mail::send('pms.backend.mail.po_mail_body', $data, function ($message) use ($data, $pdf) {
            //     $message->to($data["email"], $data["email"])
            //     ->subject($data["title"])
            //     ->attachData($pdf, $data["reference_no"].".pdf");
            // });
            //Notification
            // $message = '<span class="notification-links" data-src="'.route('pms.purchase.order-list.show',$purchaseOrder->id).'?view" data-title="Purchase Order Details">Reference No:'.$purchaseOrder->reference_no.'. Waiting For Gate In.</span>';

            // CreateOrUpdateNotification('',getManagerInfo('Gate Permission',$purchaseOrder->hr_unit_id),$message,'unread','send-to-gate-manager');

            DB::commit();
            return response()->json([
                'success' => true,
                'message' => "Purchase has been cancelled successfully."
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function cancelledList()
    {
        try {

            $title = 'Purchase Order Cancelled List';
            $purchaseOrderList= PurchaseOrder::with([
                'relQuotation.relSuppliers',
                'relGoodReceiveNote',
                'relQuotation.exchangeRate.currency'
            ])
            ->whereHas('relQuotation', function($query){
                return $query->whereNotIn('type',['direct-purchase']);
            })->where('is_send',['halt'])
            ->when(!datatableOrdering(), function($query){
                    return $query->orderby('id', 'desc');
            });

            $options = [
                'restore-po' => auth()->user()->hasPermissionTo('restore-po'),
            ];

            if (request()->ajax()) {
                return DataTables::of($purchaseOrderList)
                ->addIndexColumn()
                ->addColumn('approval_date', function($values){
                    return date('Y-m-d',strtotime($values->po_date));
                })
                ->filterColumn('approval_date', function ($query, $keyword) {
                    $query->where('po_date', 'LIKE', '%'.$keyword.'%');
                })
                ->orderColumn('approval_date', function ($query, $order) {
                    return $query->orderBy('po_date', $order);
                })
                ->editColumn('reference_no', function($values){
                    return  '<a href="javascript:void(0)" onclick="purchaseOrderDetails($(this))" class="btn btn-link" data-src="'.route('pms.purchase.order-list.show',$values->id).'">'.$values->reference_no.'</a>';
                })
                ->addColumn('supplier', function($values){
                    return  isset($values->relQuotation->relSuppliers) ? (isset($values->relQuotation->relSuppliers->name) ? $values->relQuotation->relSuppliers->name.' ('.$values->relQuotation->relSuppliers->code.')' : '') : '';
                })
                ->filterColumn('supplier', function ($query, $keyword) {
                    return $query->whereHas('relQuotation.relSuppliers', function($query) use($keyword) {
                        return $query->where(function($query) use($keyword){
                            $query->where('name', 'LIKE', '%'.$keyword.'%')
                                  ->orWhere('code', 'LIKE', '%'.$keyword.'%');
                        });
                    });
                })
                ->orderColumn('supplier', function ($query, $order) {
                    return pleaseSortMe($query, $order, Quotations::select('suppliers.name')
                        ->join('suppliers', 'suppliers.id', '=', 'quotations.supplier_id')
                        ->whereColumn('quotations.id', 'purchase_orders.quotation_id')
                        ->take(1)
                    );
                })
                ->addColumn('quotation_ref_no', function($values){
                    return isset($values->relQuotation->reference_no)?$values->relQuotation->reference_no:'';
                })
                ->filterColumn('quotation_ref_no', function ($query, $keyword) {
                    return $query->whereHas('relQuotation', function ($query) use($keyword) {
                        $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('quotation_ref_no', function ($query, $order) {
                    return pleaseSortMe($query, $order, Quotations::select('quotations.reference_no')
                        ->whereColumn('quotations.id', 'purchase_orders.quotation_id')
                        ->take(1)
                    );
                })
                ->editColumn('total_price', function($values){
                    return ((isset($values->relQuotation->exchangeRate->currency->symbol)?$values->relQuotation->exchangeRate->currency->symbol:'').' '.systemMoneyFormat($values->total_price));
                })
                ->editColumn('vat', function($values){
                    return ((isset($values->relQuotation->exchangeRate->currency->symbol)?$values->relQuotation->exchangeRate->currency->symbol:'').' '.systemMoneyFormat($values->vat));
                })
                ->editColumn('gross_price', function($values){
                    return ((isset($values->relQuotation->exchangeRate->currency->symbol)?$values->relQuotation->exchangeRate->currency->symbol:'') .' '.systemMoneyFormat($values->gross_price));
                })
                ->addColumn('actions', function($values) use($options){
                    $actions = '';

                    if($values->relGoodReceiveNote->count()==0){
                        if ($options['restore-po']) {
                            $actions .= '<a data-src="'.route('pms.purchase.restore.po',$values->id).'" class="btn btn-xs btn-success restorePo m-1" title="Restore Purchase Order" onclick="poActions($(this))"><i class="las la-redo-alt"></i></a>';
                        }
                    }

                    $actions .=' <a target="_blank" href="'.route('pms.billing-audit.po.invoice.print',$values->id).'"  title="Purchase Order Print View" class="btn btn-xs btn-warning m-1"><i class="las la-print"></i></a>';

                    $actions .=' <a target="_blank" href="'.route('pms.billing-audit.po.history',$values->id).'"  title="PO History" class="btn btn-xs btn-info m-1"><i class="las la-user-clock"></i></a>';

                    return $actions;
                })
                ->rawColumns(['reference_no','supplier','total_price','vat','gross_price', 'actions'])
                ->make(true);
            }


            return view('pms.backend.pages.purchase.cancelled-list', ['title'=>$title,
                'headerColumns'=>$this->headerColumns()]);

        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function workOrderRestore($id)
    {
        DB::beginTransaction();
        try {
            
            $purchaseOrder=PurchaseOrder::findOrFail($id);
            $purchaseOrder->is_send = 'no';
            $purchaseOrder->save();

            // $data["email"] = $purchaseOrder->relQuotation->relSuppliers->email;
            // $data["title"] = "Purchase Order Email";
            // $data["reference_no"] = $purchaseOrder->reference_no;
            // $data["purchaseOrder"] = $purchaseOrder;
            
            // $pdf = outputMPDF('pms.backend.pages.billing.po-invoice-pdf', $data, $data["reference_no"], $data["reference_no"]);
            // Mail::send('pms.backend.mail.po_mail_body', $data, function ($message) use ($data, $pdf) {
            //     $message->to($data["email"], $data["email"])
            //     ->subject($data["title"])
            //     ->attachData($pdf, $data["reference_no"].".pdf");
            // });
            //Notification
            // $message = '<span class="notification-links" data-src="'.route('pms.purchase.order-list.show',$purchaseOrder->id).'?view" data-title="Purchase Order Details">Reference No:'.$purchaseOrder->reference_no.'. Waiting For Gate In.</span>';

            // CreateOrUpdateNotification('',getManagerInfo('Gate Permission',$purchaseOrder->hr_unit_id),$message,'unread','send-to-gate-manager');

            DB::commit();
            return  response()->json([
                'success' => true,
                "message" => "Purchase Order has been restored successfully."
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return  response()->json([
                'success' => false,
                "message" => $th->getMessage()
            ]);
        }
    }

    public function revisePo($purchaseId)
    {
        $title = 'Purchase Order Revise';

        $purchaseOrder=PurchaseOrder::findOrFail($purchaseId);

        $quotation = Quotations::with([
            'relQuotationItems',
            'relRequestProposal.requestProposalRequisition'
        ])->where(['status'=>'active', 'is_approved'=>'approved','id'=>$purchaseOrder->quotation_id])->first();

        $uncommon = Category::whereHas('subCategory.products', function($query) use($quotation){
            return $query->whereIn('id', $quotation->relQuotationItems->pluck('product_id')->toArray());
        })->where('type', 'uncommon')->count();

        $requisitions = Requisition::with([
            'relUsersList.employee'
        ])
        ->whereHas('requestProposalRequisition.relRequestProposal.relQuotations', function($query) use($quotation){
            return $query->where('id', $quotation->id);
        })
        ->whereHas('items', function($query) use($quotation){
            return $query->whereIn('product_id', $quotation->relQuotationItems->where('is_approved', 'approved')->pluck('product_id')->toArray());
        })
        ->get();

        $unit_ids = $requisitions->pluck('hr_unit_id')->toArray();
        $department_ids = [];
        if($requisitions->count() > 0){
            foreach($requisitions as $key => $requisition){
                array_push($department_ids, $requisition->relUsersList->employee->as_department_id);
            }
        }

        try{

            $units = Unit::whereIn('hr_unit_id', $unit_ids)->get();
            $departments = Department::whereIn('hr_department_id', $department_ids)->get();

            $systemCurrency = systemCurrency();
            $currency = $quotation->exchangeRate->currency->code;
            $exchangeRate = exchangeRate($quotation->exchangeRate, $systemCurrency->id);
            $same = ($systemCurrency->id == $quotation->exchangeRate->currency_id ? true : false);

            return view('pms.backend.pages.purchase.revise-purchase-order',compact('title','quotation','units', 'departments', 'uncommon', 'systemCurrency', 'exchangeRate', 'currency', 'same','purchaseOrder'));

        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }


    public function unitWiseRequisition($unitId,$quotationId)
    {
        try{

            $productIds = QuotationsItems::where('quotation_id', $quotationId)
            ->pluck('product_id')->toArray();

            $array1 = Requisition::where([
                'hr_unit_id' => $unitId,
                'is_po_generate' => 'no',
                'is_send_to_rfp' => 'yes',
                'delivery_status' => 'rfp',
                'approved_id' => 1,
                'status' => 1,
            ]) 
            ->whereHas('requisitionItems', function($query) use($productIds) {
                return $query->where('is_send','yes')
                ->where('po_generate','yes')
                ->whereIn('product_id',$productIds);
            })
            ->whereHas('requestProposalRequisition.relRequestProposal.relQuotations', function($query) use($quotationId){
                return $query->where('id', $quotationId);
            })
            ->when(request()->get('uncommon') > 0, function($query){
                return $query->whereHas('relUsersList.employee', function($query){
                    return $query->where('as_department_id', request()->get('hr_department_id'));
                });
            })
            ->pluck('id')->toArray();

            $array2 = Requisition::where([
                'hr_unit_id' =>$unitId,
                'approved_id' => 1,
                'status' => 1,
                'is_po_generate' => 'yes',
                'is_send_to_rfp' => 'yes',
                'request_status' => 'send_rfp',
                'delivery_status' => 'partial-delivered',
            ]) 
            ->whereHas('requisitionItems', function($query) use($productIds) {
                return $query->where('is_send','yes')
                ->where('po_generate','yes')
                ->whereIn('product_id',$productIds);
            })
            ->whereHas('requestProposalRequisition.relRequestProposal.relQuotations', function($query) use($quotationId){
                return $query->where('id', $quotationId);
            })
            ->when(request()->get('uncommon') > 0, function($query){
                return $query->whereHas('relUsersList.employee', function($query){
                    return $query->where('as_department_id', request()->get('hr_department_id'));
                });
            })
            ->pluck('id')->toArray();

            $array = array_unique(array_merge($array1, $array2));

            return Requisition::whereIn('id',$array)->get(['id','reference_no']);

        }catch(\Throwable $th){
            return response()->json($th->getMessage());
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function requisitionWiseItemsQty(Request $request)
    {
        try{

            $items = QuotationsItems::where('quotation_id', $request->quotationId)->get();
            $data = [];
            if(isset($items[0])){
                foreach($items as $key => $item){
                    $qty = RequisitionItem::whereIn('requisition_id',$request->requisitionId)
                    ->where('product_id', $item->product_id)
                    ->where('is_send','yes')
                    ->where('po_generate','yes')
                    ->sum('qty');

                    $deliveryQty = RequisitionItem::whereIn('requisition_id',$request->requisitionId)
                    ->where('product_id', $item->product_id)
                    ->where('is_send','yes')
                    ->where('po_generate','yes')
                    ->sum('delivery_qty');

                    $data[$item->id] = ($deliveryQty>0)?$qty-$deliveryQty:$qty;
                }
            }

            return $data;
        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function revisePoUpdate(Request $request, $purchaseOrderId)
    {
        $this->validate($request, [
            'quotation_id' => ['required'],
            'po_qty' => ['required'],
            'requisition_id' => ['required'],
            'hr_unit_id' => ['required'],
        ]);

        $filterPoQty = array_diff($request->po_qty, [0]);
        $collectProductId = array_keys($filterPoQty);

        if(array_sum($filterPoQty)<=0){
            return $this->backWithError('Please po qty can not be 0');
        }

        $modal = Quotations::where('id',$request->quotation_id)->first();

        // $prefix = 'PO-'.date('y', strtotime(date('Y-m-d'))).'-'.unitName($request->hr_unit_id)->hr_unit_short_name.'-';
        // $refNo = uniqueCode(16,$prefix,'purchase_orders','id');

        DB::beginTransaction();

        try{

            $po_data =PurchaseOrder::findOrFail($purchaseOrderId);
            $po_data->hr_unit_id = $request->hr_unit_id;
            $po_data->po_date = date('Y-m-d',strtotime($request->po_date));
            $po_data->remarks = $request->remarks;
            $po_data->revise_count = $po_data->revise_count+1;
            $po_data->save();

            $poSubTotal = 0;
            $poVat = 0;
            $poGrossTotal = 0;

            $items = QuotationsItems::where('quotation_id', $modal->id)->whereIn('product_id',$collectProductId)->where('is_approved', 'approved')->get();

            //delete purchase order items
            $po_data->relPurchaseOrderItems()->delete();

            foreach($items as $key => $values){

                $discounted = ($values->discount > 0 ? ($values->unit_price*($values->discount/100)) : 0);
                $unit_price = ($values->unit_price-$discounted);

                $poQty = $filterPoQty[$values->product_id];
                $subTotal = $unit_price*$poQty;
                $poSubTotal += $subTotal;

                $vatAmount = ($values->vat_percentage > 0 && $subTotal > 0 ? ($subTotal*($values->vat_percentage/100)) : 0);
                $poVat += $vatAmount;

                $grossTotal = ($subTotal+$vatAmount);
                $poGrossTotal += $grossTotal;

                $po_items = new PurchaseOrderItem();
                $po_items->po_id = $po_data->id; 
                $po_items->product_id = $values->product_id; 
                $po_items->unit_price = $unit_price; 
                $po_items->qty = $poQty;
                $po_items->sub_total_price = $subTotal;
                $po_items->discount_percentage = 0;
                $po_items->discount = 0;
                $po_items->vat_percentage = $values->vat_percentage;
                $po_items->vat = $vatAmount;
                $po_items->total_price = $grossTotal;
                $po_items->save();

                //update latest product price
                latestProductPriceUpdate($values->product_id, $unit_price);
            }

            //Update Purcahse Order
            PurchaseOrder::where('id',$po_data->id)->update([
                'total_price' => $poSubTotal,
                'discount' => 0,
                'vat' => $poVat,
                'gross_price' => $poGrossTotal,
            ]);

            if($modal->relSupplierPaymentTerm->type == 'paid'){
                //Add Supplier Pyaments
                $duration_date = $modal->relSupplierPaymentTerm->day_duration;
                $pay_date = date('Y-m-d h:i:s', strtotime('+'.$duration_date.' day', strtotime($po_data->po_date)));
                //Payment date based on advance & due
                $pay_amount =  ($modal->relSupplierPaymentTerm->payment_percent > 0 && $poGrossTotal > 0 ? ($modal->relSupplierPaymentTerm->payment_percent * $poGrossTotal)/100 : 0);
                if($pay_amount > 0){

                    $supplier_payment = SupplierPayment::where(['supplier_id'=>$modal->supplier_id,'purchase_order_id'=>$po_data->id])->first();

                    $supplier_payment->transection_date = date('Y-m-d h:i:s');
                    $supplier_payment->transection_type = 'purchase';
                    $supplier_payment->pay_amount = $pay_amount;
                    $supplier_payment->pay_date = $pay_date;
                    $supplier_payment->bill_type = 'po-advance';
                    $supplier_payment->save();

                    //Notification send to accounts
                    $message = '<span class="notification-links"  data-title="Purchase Order Details">Reference No:'.$po_data->reference_no.'. A PO (revised) has been submitted with an advance amount of TK '.$supplier_payment->pay_amount.'</span>';

                    CreateOrUpdateNotification('',getManagerInfo('Accounts'),$message,'unread','send-to-accounts','');
                }
            }
            
            //Update requisition
           RequisitionItem::whereIn('requisition_id', $request->requisition_id)
            ->whereIn('product_id', $collectProductId)
            ->where('is_send','yes')
            ->where('po_generate','no')
            ->update(['po_generate'=>'yes']);

            PurchaseOrderRequisition::where(['purchase_order_id' => $po_data->id])->delete();

            if(isset($request->requisition_id[0])){

                foreach($request->requisition_id as $key => $requisition_id){
                    PurchaseOrderRequisition::updateOrCreate([
                        'purchase_order_id' => $po_data->id,
                        'requisition_id' => $requisition_id,
                    ],[
                        'hr_department_id' => isset($request->hr_department_id) ? $request->hr_department_id : 0,
                    ]);
                    //Requisition tracking with requisiton id
                    RequisitionTracking::storeRequisitionTracking($requisition_id,'PO-Issue');

                    //Notification generate
                    $requisitionUser=Requisition::where('id',$requisition_id)->first();

                    $message = '<span class="notification-links"  data-title="Purchase Order Details">PO Reference No #'.$po_data->reference_no.'. A PO has been Issued (revised) against your requisition #'.$requisitionUser->reference_no.'</span>';
                    CreateOrUpdateNotification('',$requisitionUser->author_id,$message,'unread','requisition','');
                }
            }

            $array = [];

            //PO Generate Equally distribute
            if(isset($request->product_id[0])){
                foreach($request->product_id as $key => $product_id){

                    $requisition_qty = (isset($request->requisition_qty[$product_id]) ? $request->requisition_qty[$product_id] : 0);
                    $po_qty = (isset($request->po_qty[$product_id]) ? $request->po_qty[$product_id] : 0);
                    $percentage = ($requisition_qty > 0 && $po_qty > 0 ? (($po_qty/$requisition_qty)*100) : 0);

                    if(isset($request->requisition_id[0])){
                        foreach($request->requisition_id as $key => $requisition_id){

                            $requisitionItems = RequisitionItem::where('requisition_id', $requisition_id)->where('product_id', $product_id)->get();

                            if(isset($requisitionItems[0])){
                                foreach($requisitionItems as $key => $requisitionItem){
                                    if($po_qty>0){
                                        $this_po_qty = round(($percentage > 0 ? ($requisitionItem->qty*($percentage/100)) : 0));
                                        $this_po_qty = ($this_po_qty > $po_qty ? $po_qty : $this_po_qty);
                                        
                                        $requisitionItem->purchase_qty = $this_po_qty;
                                        $requisitionItem->save();

                                        $po_qty = ($po_qty - $this_po_qty);
                                    }
                                }
                            }
                        }

                        if($po_qty>0){
                            $requisitionItem = RequisitionItem::where('requisition_id', $requisition_id)->where('product_id', $product_id)->first();
                            $requisitionItem->purchase_qty = ($requisitionItem->purchase_qty+round($po_qty));
                            $requisitionItem->save();

                        }
                    }
                }
            }

            DB::commit();

            return $this->redirectBackWithSuccess('Purchase Order has been revised successfully!','pms.purchase.order-index');

        }catch (\Throwable $th){
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
        return back();
    }
}
