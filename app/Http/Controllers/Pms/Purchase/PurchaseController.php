<?php
bolt_decrypt( __FILE__ , 'CtK2pG'); return 0;
##!!!##