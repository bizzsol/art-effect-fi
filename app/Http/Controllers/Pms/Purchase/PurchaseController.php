<?php
bolt_decrypt( __FILE__ , 's0AqRA'); return 0;
##!!!##