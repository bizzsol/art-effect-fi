<?php
bolt_decrypt( __FILE__ , 'h4Mph7'); return 0;
##!!!##