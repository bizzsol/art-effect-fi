<?php
bolt_decrypt( __FILE__ , '2mjTo4'); return 0;
##!!!##

namespace App\Http\Controllers\Pms;

use App\Http\Controllers\Controller;
use App\Models\Merch\Supplier;
use App\Models\PmsModels\Grn\GoodsReceivedNote;
use App\Models\PmsModels\PaymentTerm;
use App\Models\PmsModels\SupplierPaymentTerm;
use App\Models\PmsModels\SupplierRatings;
use App\Models\PmsModels\Suppliers;
use App\Models\PmsModels\SupplierAddress;
use App\Models\PmsModels\SupplierBankAccount;
use App\Models\PmsModels\SupplierContactPerson;
use App\Models\PmsModels\SupplierLog;
use App\Models\PmsModels\Product;
use App\Models\PmsModels\Category;
use App\Models\PmsModels\SupplierLedgers;
use App\Models\PmsModels\Accounts\ChartOfAccount;
use App\Models\PmsModels\Accounts\Currency;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Schema;
use DB, View, DataTables;

class SupplierController extends Controller
{   

    public function headerColumns($value='')
    {
        $rows =  array(
            ['SL', 'SL'],
            ['code', 'code'],
            ['name', 'name'],
            ['product_categories', 'product_categories', 'text-center'],
            ['corporate_address', 'corporate_address', 'text-left'], 
            ['contact_person_name', 'contact_person_name', 'text-left'],
            ['mobile_no', 'mobile_no', 'text-left'], 
            ['closing_balance', 'closing_balance', 'text-center'],
            ['approval', 'approval', 'text-center purchase-actions'],
            ['status', 'status', 'text-center management-actions'], 
            ['actions', 'actions', 'text-center']
        );

        if (!request()->has('products')) {
            unset($rows[7]);
        }
        
        if (auth()->user()->hasRole('Accounts')) {
            unset($rows[8]);
            unset($rows[9]);
            unset($rows[10]);
        }

        return $rows;
    }
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        /*
        if(request()->has('generate-supplier-currencies')){
            foreach(Suppliers::doesntHave('suppleierCurrencies')->get() as $key => $supplier){
                \App\Models\PmsModels\SupplierCurrency::create([
                    'supplier_id' => $supplier->id,
                    'currency_id' => 1,
                ]);
            }
        }
        */

        /*
        if(request()->has('generate-supplier-codes')){
            foreach(Suppliers::whereNull('code')->get() as $key => $supplier){
                $supplier->code = $this->supplierCode($supplier);
                $supplier->save();
            }
        }
        */

        /*
        if(request()->has('update-products-for-internal-job-order')){
            updateSupplierProducts(12);
        }
        */ 

        try {
            $options = [
                'Purchase-Employee' => auth()->user()->hasRole('Purchase-Employee'),
                'Purchase-Department' => auth()->user()->hasRole('Purchase-Department'),
                'Management' => auth()->user()->hasRole('Management'),
                'Accounts' => auth()->user()->hasRole('Accounts'),
                'Purchase-Employee' => auth()->user()->hasRole('Purchase-Employee'),
                'supplier-edit' => auth()->user()->hasPermissionTo('supplier-edit'),
                'supplier-delete' => auth()->user()->hasPermissionTo('supplier-delete'),
            ];

            $title = 'Suppliers';
            $suppliers = Suppliers::with([
                'products.category.category', 'addresses', 'contactPersons', 'supplierClosingBalance', 'relQuotations'
            ])
            ->when($options['Purchase-Employee'], function($query){
                return $query->whereNotIn('approved_by', ['purchase-declined', 'management-declined']);
            })
            ->when($options['Purchase-Department'], function($query){
                return $query->whereIn('approved_by', ['sent-to-purchase', 'purchase-approved', 'management-approved']);
            })
            ->when($options['Management'], function($query){
                return $query->whereIn('approved_by', ['purchase-approved', 'management-approved']);
            })
            ->when($options['Accounts'], function($query){
                return $query->has('relPayments.relSupplierLedgers');
            })
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            })
            ->whereNotIn('id',[12,13])
            ->where('id', '>', 10);

            $categories = collect(Category::with('subCategory')->whereHas('subCategory')->get());
            $subCategories = collect(Category::whereHas('category')->get());

            if (request()->ajax()) {
                return Datatables::of($suppliers)
                ->addIndexColumn()
                ->addColumn('product_categories', function($supplier) use($categories, $subCategories){
                    return $categories->whereIn('id', $subCategories->whereIn('id', $supplier->products->pluck('category_id')->toArray())->pluck('parent_id')->toArray())->pluck('name')->implode(', ');
                    // return Category::whereHas('subCategory', function($query) use($supplier){
                    //     return $query->whereIn('id', $supplier->products->pluck('category_id')->toArray());
                    // })->pluck('name')->implode(', ');
                })
                ->filterColumn('product_categories', function ($query, $keyword) {
                    return $query->whereHas('products.category.category', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('corporate_address', function($supplier){
                     $address = '';
                     $corporateAddress = $supplier->addresses->where('type', 'corporate');
                     if(isset($corporateAddress[0]->id)){
                        $address .= $corporateAddress[0]->village.' '.$corporateAddress[0]->road.', '.$corporateAddress[0]->city.'-'.$corporateAddress[0]->zip.', '.$corporateAddress[0]->country .'<br>'. $corporateAddress[0]->address;
                     }
                     
                    return  $address;
                })
                ->filterColumn('corporate_address', function ($query, $keyword) {
                    return $query->whereHas('addresses', function ($query) use($keyword) {
                        $query->where('road', 'LIKE', '%'.$keyword.'%')
                              ->where('type', 'corporate')
                              ->orWhere(function($query) use($keyword){
                                return $query->where('zip', 'LIKE', '%'.$keyword.'%')
                                    ->orWhere('country', 'LIKE', '%'.$keyword.'%')
                                    ->orWhere('address', 'LIKE', '%'.$keyword.'%')
                                    ->orWhere('village', 'LIKE', '%'.$keyword.'%');
                              });
                    });
                })
                ->addColumn('contact_person_name', function($supplier){
                    $contactPerson = '';

                    $contactPersonSales = $supplier->contactPersons->where('type', 'sales');

                    if(isset($contactPersonSales[0]->id)){
                        $contactPerson .= $contactPersonSales[0]->name;
                    }
                     
                    return  $contactPerson;
                })
                ->filterColumn('contact_person_name', function ($query, $keyword) {
                    return $query->whereHas('contactPersons', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('mobile_no', function($supplier){
                    $contactPerson = '';

                    $contactPersonSales = $supplier->contactPersons->where('type', 'sales');

                    if(isset($contactPersonSales[0]->id)){
                        $contactPerson .= $contactPersonSales[0]->mobile;
                    }
                     
                    return  $contactPerson;
                })
                ->filterColumn('mobile_no', function ($query, $keyword) {
                    return $query->whereHas('contactPersons', function ($query) use($keyword) {
                        $query->where('mobile', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('closing_balance', function($supplier) use($options){
                    if($options['Accounts']){
                        return isset($supplier->supplierClosingBalance->closing_balance) ? $supplier->supplierClosingBalance->closing_balance : 0;
                    }

                    return 0;
                })
                ->addColumn('approval', function($supplier) use($options){
                    $supplierStatus = supplierStatus($supplier);
                    $approvals = '';
                    if(!$options['Accounts']){
                        if ($supplierStatus['approval'] && ($options['Purchase-Department'] || $options['Management']))
                         {
                            $approvals .= '<a class="btn btn-xs btn-'.$supplierStatus['approved_class'] .'" data-approved-by="'.$supplier->approved_by .'" data-status="'.$supplier->status.'"  data-which="approval" data-supplier-id="'.$supplier->id.'" onclick="toggleSupplierStatus($(this))"><i class="'. $supplierStatus['approved_icon'] .'"></i>&nbsp;'. $supplierStatus['approved_text'] .'</a>';
                        }else{
                             $approvals .= '<a class="btn btn-xs btn-'.$supplierStatus['approved_class'] .'" data-approved-by="'.$supplier->approved_by .'" data-status="'.$supplier->status.'"  data-which="approval" data-supplier-id="'.$supplier->id.'" ><i class="'. $supplierStatus['approved_icon'] .'"></i>&nbsp;'. $supplierStatus['approved_text'] .'</a>';
                        }
                    }
                    return $approvals;
                })
                ->editColumn('status', function($supplier) use($options){
                    $status = '';

                    if(!$options['Accounts']){
                        if($options['Management'] && $supplier->approved_by == "management-approved"){
                            $status .= '<a class="btn btn-'.($supplier->status == "Active" ? "success" : "danger").' btn-block btn-xs" data-approved-by="'. $supplier->approved_by .'" data-status="'. $supplier->status .'" data-which="status" data-supplier-id="'. $supplier->id .'" onclick="toggleSupplierStatus($(this))" ><i class="'. ($supplier->status == "Active" ? "lar la-check-circle" : "la la-ban").'"></i>&nbsp;'. ($supplier->status == "Active" ? "Active" : "Pending" ).'</a>';
                        }else{
                            $status .= '<a class="btn btn-'. ($supplier->status == "Active" ? "success" : "danger" ).' btn-block btn-xs" data-approved-by="'. $supplier->approved_by .'" data-status="'. $supplier->status .'" data-which="status" data-supplier-id="'. $supplier->id .'" onclick="toggleSupplierStatus($(this))" ><i class="'. ($supplier->status == "Active" ? "lar la-check-circle" : "la la-ban" ).'"></i>&nbsp;'. ($supplier->status == "Active" ? "Active" : "Pending") .'</a>';
                        }
                    }
                    return $status;
                })
                ->addColumn('actions', function($supplier) use($options){
                    $actions = '';

                    if(!$options['Accounts']){

                        if($options['supplier-edit']){
                            $actions .= '<a class="btn btn-xs btn-success rounded-circle m-1" href="'.route('pms.supplier.edit', $supplier->id).'"><i class="la la-edit"></i></a>';
                        }

                        $actions .=' <a href="'. route('pms.supplier.profile', $supplier->id) .'" class="btn btn-info m-1 btn-xs"><i class="las la-user"></i></a>';

                        if($supplier->deletable == 'yes' && !freezeSupplier($supplier) && $options['supplier-delete']){
                            $actions .= '<a href="javascript:void(0)" class="btn btn-xs btn-danger m-1" data-src="'.route('pms.supplier.destroy', $supplier->id).'" onclick="deleteFromCRUD($(this))"><i class="la la-trash"></i></a>';
                        }
                    }

                    return $actions;

                })
                ->rawColumns(['corporate_address','product_categories','approval','status', 'actions'])
                ->make(true);
            }

            return view('pms.backend.pages.suppliers.index', [
                'title' =>$title,
                'headerColumns' => $this->headerColumns()
            ]);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function showDeclineSuppliers()
    {
        try {

            $title = 'Decline Suppliers';
            $suppliers = Suppliers::when(auth()->user()->hasRole('Purchase-Employee'), function($query){
                return $query->where('created_by',auth()->user()->id)
                ->whereIn('approved_by', ['purchase-declined', 'management-declined']);
            })
            ->when(auth()->user()->hasRole('Purchase-Department'), function($query){
                return $query->whereIn('approved_by', ['purchase-declined', 'management-declined']);
            })
            ->when(auth()->user()->hasRole('Management'), function($query){
                return $query->where('approved_by', 'management-declined');
            })
            ->when(auth()->user()->hasRole('Accounts'), function($query){
                return $query->has('relPayments.relSupplierLedgers');
            })
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });

            $decline = true;

             if (request()->ajax()) {
            return Datatables::of($suppliers)
            ->addIndexColumn()
            ->addColumn('product_categories', function($supplier){
                return Category::whereHas('subCategory', function($query) use($supplier){
                    return $query->whereIn('id', Category::whereHas('products', function($query) use($supplier){
                        return $query->whereIn('id', $supplier->products->pluck('id')->toArray());
                    })->pluck('id')->toArray());
                })->pluck('name')->implode(', ');
            })
            ->filterColumn('product_categories', function ($query, $keyword) {
                return $query->whereHas('products.category.category', function ($query) use($keyword) {
                    $query->where('name', 'LIKE', '%'.$keyword.'%');
                });
            })
            ->filterColumn('corporate_address', function ($query, $keyword) {
                return $query->whereHas('addresses', function ($query) use($keyword) {
                    $query->where('road', 'LIKE', '%'.$keyword.'%')
                    ->orWhere('zip', 'LIKE', '%'.$keyword.'%')
                    ->orWhere('country', 'LIKE', '%'.$keyword.'%')
                    ->orWhere('address', 'LIKE', '%'.$keyword.'%')
                    ->orWhere('village', 'LIKE', '%'.$keyword.'%');
                });
            })
            ->filterColumn('contact_person_name', function ($query, $keyword) {
                return $query->whereHas('contactPersons', function ($query) use($keyword) {
                    $query->where('name', 'LIKE', '%'.$keyword.'%');
                });
            })
            ->addColumn('corporate_address', function($supplier){
                $address = '';
                $corporateAddress = \App\Models\PmsModels\SupplierAddress::where(['supplier_id' => $supplier->id, 'type' => 'corporate'])->first();

                if(isset($corporateAddress->id)){
                    $address .= $corporateAddress->village.' '.$corporateAddress->road.', '.$corporateAddress->city.'-'.$corporateAddress->zip.', '.$corporateAddress->country .'<br>'. $corporateAddress->adddress;
                }

                return  $address;
            })
            ->addColumn('contact_person_name', function($supplier){
                $contactPerson = '';

                $contactPersonSales = \App\Models\PmsModels\SupplierContactPerson::where(['supplier_id' => isset($supplier->id) ? $supplier->id : 0, 'type' => 'sales'])->first();

                if(isset($contactPersonSales->id)){
                    $contactPerson .= $contactPersonSales->name;
                }

                return  $contactPerson;
            })
            ->addColumn('mobile_no', function($supplier){
                $contactPerson = '';

                $contactPersonSales = \App\Models\PmsModels\SupplierContactPerson::where(['supplier_id' => isset($supplier->id) ? $supplier->id : 0, 'type' => 'sales'])->first();

                if(isset($contactPersonSales->id)){
                    $contactPerson .= $contactPersonSales->mobile;
                }

                return  $contactPerson;
            })
             ->filterColumn('mobile_no', function ($query, $keyword) {
                return $query->whereHas('contactPersons', function ($query) use($keyword) {
                    $query->where('mobile', 'LIKE', '%'.$keyword.'%');
                });
            })
            ->addColumn('closing_balance', function($supplier){
                if(auth()->user()->hasRole('Accounts')){
                    $ledger = SupplierLedgers::whereHas('relSupplierPayment', function($query) use($supplier){
                        return $query->where('supplier_id', $supplier->id);
                    })->orderBy('id', 'desc')->first();
                    return isset($ledger->id) ? $ledger->closing_balance : '';
                }
            })
            ->addColumn('approval', function($supplier){
                $supplierStatus = supplierStatus($supplier);
                $approvals = '';
                if(!auth()->user()->hasRole('Accounts')){
                    if ($supplierStatus['approval'] && (auth()->user()->hasRole('Purchase-Department') || auth()->user()->hasRole('Management')))
                    {
                        $approvals .= '<a class="btn btn-xs btn-'.$supplierStatus['approved_class'] .'" data-approved-by="'.$supplier->approved_by .'" data-status="'.$supplier->status.'"  data-which="approval" data-supplier-id="'.$supplier->id.'" onclick="toggleSupplierStatus($(this))"><i class="'. $supplierStatus['approved_icon'] .'"></i>&nbsp;'. $supplierStatus['approved_text'] .'</a>';
                    }else{
                        $approvals .= '<a class="btn btn-xs btn-'.$supplierStatus['approved_class'] .'" data-approved-by="'.$supplier->approved_by .'" data-status="'.$supplier->status.'"  data-which="approval" data-supplier-id="'.$supplier->id.'" ><i class="'. $supplierStatus['approved_icon'] .'"></i>&nbsp;'.$supplierStatus['approved_text'].'</a>';
                    }
                }
                return $approvals;
            })
            ->editColumn('status', function($supplier){
                $status = '';

                if(!auth()->user()->hasRole('Accounts')){
                    if(auth()->user()->hasRole('Management') && $supplier->approved_by == "management-approved"){
                        $status .= '<a class="btn btn-'.($supplier->status == "Active" ? "success" : "danger").' btn-block btn-xs" data-approved-by="'. $supplier->approved_by .'" data-status="'. $supplier->status .'" data-which="status" data-supplier-id="'. $supplier->id .'" onclick="toggleSupplierStatus($(this))" ><i class="'. ($supplier->status == "Active" ? "lar la-check-circle" : "la la-ban").'"></i>&nbsp;'. ($supplier->status == "Active" ? "Active" : "Pending" ).'</a>';
                    }else{
                        $status .= '<a class="btn btn-'. ($supplier->status == "Active" ? "success" : "danger" ).' btn-block btn-xs" data-approved-by="'. $supplier->approved_by .'" data-status="'. $supplier->status .'" data-which="status" data-supplier-id="'. $supplier->id .'" onclick="toggleSupplierStatus($(this))" ><i class="'. ($supplier->status == "Active" ? "lar la-check-circle" : "la la-ban" ).'"></i>&nbsp;'. ($supplier->status == "Active" ? "Active" : "Pending") .'</a>';
                    }
                }
                return $status;
            })
            ->addColumn('actions', function($supplier){
                $actions = '';

                if(!auth()->user()->hasRole('Accounts')){

                    if(auth()->user()->hasPermissionTo('supplier-edit')){
                        $actions .= '<a class="btn btn-xs btn-success rounded-circle ml-2" href="'.route('pms.supplier.edit', $supplier->id).'"><i class="la la-edit"></i></a>';
                    }

                    $actions .=' <a href="'. route('pms.supplier.profile', $supplier->id) .'" class="btn btn-info ml-2 btn-xs"><i class="las la-user"></i></a>';

                    if($supplier->deletable == 'yes'){
                        if(auth()->user()->hasPermissionTo('supplier-delete')){
                            $actions .= '<a href="javascript:void(0)" class="btn btn-xs btn-danger ml-2" data-src="'.route('pms.supplier.destroy', $supplier->id).'" onclick="deleteFromCRUD($(this))"><i class="la la-trash"></i></a>';
                        }
                    }
                }

                return $actions;

            })
            ->rawColumns(['corporate_address','product_categories','approval','status', 'actions'])
            ->make(true);
        }
        return view('pms.backend.pages.suppliers.index', [
            'title' =>$title,
            'decline' =>$decline,
            'headerColumns' => $this->headerColumns()
        ]);

        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        try {
            $data = [
                'title' => 'Create New Supplier',
                'currencies' => Currency::all(),
                'paymentTerms' => PaymentTerm::orderBy('id','DESC')->get(),
                'subCategories' => Category::with('category')->has('category')->orderBy('name', 'asc')->get(),
            ];

            return view('pms.backend.pages.suppliers.create', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'name' => ['required', 'string', 'max:255'],
            'email' => ['nullable', 'string', 'max:255', 'email'],
            'phone' => ['nullable', 'string', 'max:14', 'regex:/^([0-9\s\-\+\(\)]*)$/'],
            'mobile_no' => ['nullable', 'string', 'max:14', 'regex:/^([0-9\s\-\+\(\)]*)$/'],
            'term_condition' => ['nullable'],
            'payment_term_id' => ['array','min:1'],

            'trade' => ['required', 'string', 'max:255'],
            'tin' => ['nullable', 'string', 'max:255'],
            'vat' => ['nullable', 'string', 'max:255'],
            'owner_name' => ['nullable', 'string', 'max:255'],
            'owner_nid' => ['nullable', 'string', 'max:255'],
            'owner_contact_no' => ['nullable', 'string', 'max:255'],
            'currencies' => 'required',
            'currencies.*' => 'required',
        ]);

        if($request->hasFile('auth_person_letter_file')){
            $this->validate($request, [
                'auth_person_letter_file' => ['mimes:pdf,png', 'max:2048'],
            ]);
        }

        if($request->hasFile('owner_photo_file')){
            $this->validate($request, [
                'owner_photo_file' => ['mimes:jpeg,jpg,png,gif', 'max:3072'],
            ]);
        }

        DB::beginTransaction();
        try {

            $termPercentages = [];
            if(isset($request->payment_term_id[0])){
                foreach($request->payment_term_id as $key => $payment_term_id){
                    if(!isset($termPercentages[$payment_term_id])){
                        $termPercentages[$payment_term_id] = 0;
                    }
                    $termPercentages[$payment_term_id] += $request->payment_percent[$key];

                    if($termPercentages[$payment_term_id] > 100){
                        $paymentTerm = PaymentTerm::find($payment_term_id);
                        return response()->json([
                            'success' => false,
                            'message' => 'Payment Term #'.$paymentTerm->term.' total percentages have been exceeded to '.$termPercentages[$payment_term_id].'%!',
                        ]);
                    }
                }
            }

            $inputs = $request->all();

            $supplier = Suppliers::create($inputs);
            $supplier->status = 'Inactive';
            $supplier->code = $this->supplierCode($supplier);
            $supplier->save();

            $supplier->products()->sync($request->products);
            $supplier->currencies()->sync($request->currencies);

            if (isset($request->payment_term_id[0])) {
                foreach ($request->payment_term_id as $key => $payment_term_id){
                    $parent = SupplierPaymentTerm::where([
                        'supplier_id' => $supplier->id,
                        'payment_term_id' => $payment_term_id
                    ])->first();

                    SupplierPaymentTerm::create([
                        'supplier_id' => $supplier->id,
                        'payment_term_id' => $payment_term_id,
                        'payment_percent' => $request->payment_percent[$key],
                        'day_duration' => $request->day_duration[$key],
                        'type' => $request->type[$key],
                        'parent_id' => isset($parent->id) ? $parent->id : 0,
                    ]);
                }
            }

            if($request->hasFile('auth_person_letter_file')){
                $supplier->auth_person_letter = $this->fileUpload($request->file('auth_person_letter_file'), 'upload/supplier-authorization-letter');
                $supplier->save();
            }

            if($request->hasFile('owner_photo_file')){
                $supplier->owner_photo = $this->fileUpload($request->file('owner_photo_file'), 'upload/supplier-owner-photo', true);
                $supplier->save();
            }

            $message = '<span class="notification-links" data-src="'.route('pms.supplier.profile',$supplier->id).'?view" data-title="Suppliers Details">Supplier:'.$supplier->name.'.Watting for Approval.</span>';

            CreateOrUpdateNotification('',getManagerInfo('Purchase-Department'),$message,'unread','send-to-purchase','');

            DB::commit();

            $notification = [
                'message' => 'A supplier has been created successfully',
                'alert-type' => 'success'
            ];

            session()->flash('message', "A supplier has been created successfully");
            session()->flash('alert-type', "success");
            return response()->json([
                'success' => true,
                'url' => url('pms/supplier/'.$supplier->id.'/edit')
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show(Suppliers $supplier)
    {
        try {
            $supplier->src = route('pms.supplier.update',$supplier->id);
            $supplier->req_type = 'put';
            $data = [
                'status' => 'success',
                'info' => $supplier
            ];

            //return $supplier;
            return response()->json($data);
        }catch (\Throwable $th){
            $data = [
                'status' => null,
                'info' => $th->getMessage()
            ];
            return response()->json($data);
        }
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        try {
            $supplier = Suppliers::with([
                'products',
                'relQuotations',
                'relPaymentTerms',
                'payableAccount',
                'payablePurchaseAccount',
                'payableDiscountAccount',
                'advanceAccount',
                'currencies',
                'suppleierCurrencies'
            ])->findOrFail($id);
            $data = [
                'title' => 'Update Supplier Information',
                'currencies' => Currency::all(),
                'paymentTerms' => PaymentTerm::orderBy('id','DESC')->select('id','term')->get(),
                'supplier' => $supplier,
                'corporateAddress' => SupplierAddress::where(['supplier_id' => $id, 'type' => 'corporate'])->first(),
                'factoryAddress' => SupplierAddress::where(['supplier_id' => $id, 'type' => 'factory'])->first(),
                'contactPersonSales' => SupplierContactPerson::where(['supplier_id' => $id, 'type' => 'sales'])->first(),
                'contactPersonAfterSales' => SupplierContactPerson::where(['supplier_id' => $id, 'type' => 'after-sales'])->first(),
                'bankAccount' => SupplierBankAccount::where(['supplier_id' => $id])->first(),
                'subCategories' => Category::with('category')->has('category')->orderBy('name', 'asc')->get(),
                'selectedSubCategories' => Category::whereHas('products', function($query) use($supplier){
                    return $query->whereIn('id', \DB::table('products_supplier')->where('supplier_id', $supplier->id)->pluck('product_id')->toArray());
                })->orderBy('name', 'asc')->pluck('id')->toArray(),
                'products' => Product::with([
                    'productUnit',
                    'category.category',
                    'attributes.attributeOption.attribute',
                ])->whereIn('id', $supplier->products->pluck('id')->toArray())->get(),
                'freezeSupplier' => freezeSupplier($supplier),
                'getAllGroupAndLedgers' => getAllGroupAndLedgers(),
                'accountDefaultSettings' => accountDefaultSettings()
            ];
            return view('pms.backend.pages.suppliers.edit', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Suppliers $supplier)
    {
        if(request()->has('form-type') && request()->get('form-type') == "basic"){
            if(!freezeSupplier($supplier)){
                $request->validate([
                    'name' => ['required', 'string', 'max:255'],
                ]);
            }
            
            $request->validate([
                'email' => ['nullable', 'string', 'max:255', 'email'],
                'phone' => ['nullable', 'string', 'max:14', 'regex:/^([0-9\s\-\+\(\)]*)$/'],
                'mobile_no' => ['nullable', 'string', 'max:14', 'regex:/^([0-9\s\-\+\(\)]*)$/'],
                'term_condition' => ['nullable'],
                'payment_term_id' => ['array','min:1'],

                'trade' => ['required', 'string', 'max:255'],
                'tin' => ['nullable', 'string', 'max:255'],
                'vat' => ['nullable', 'string', 'max:255'],
                'owner_name' => ['nullable', 'string', 'max:255'],
                'owner_nid' => ['nullable', 'string', 'max:255'],
                'owner_contact_no' => ['nullable', 'string', 'max:255'],
                'currencies' => ['required'],
                'currencies.*' => ['required'],
            ]);

            if($request->hasFile('auth_person_letter_file')){
                $request->validate([
                    'auth_person_letter_file' => ['mimes:pdf,png', 'max:2048'],
                ]);
            }
            
            if($request->hasFile('owner_photo_file')){
                $request->validate([
                    'owner_photo_file' => ['mimes:jpeg,jpg,png,gif', 'max:3072'],
                ]);
            }

            DB::beginTransaction();
            try {
                $termPercentages = [];
                if(isset($request->old_payment_term_id) && is_array($request->old_payment_term_id) && count($request->old_payment_term_id)){
                    foreach($request->old_payment_term_id as $key => $payment_term_id){
                        if(!isset($termPercentages[$payment_term_id])){
                            $termPercentages[$payment_term_id] = 0;
                        }
                        $termPercentages[$payment_term_id] += $request->old_payment_percent[$key];

                        if($termPercentages[$payment_term_id] > 100){
                            $paymentTerm = PaymentTerm::find($payment_term_id);
                            return response()->json([
                                'success' => false,
                                'message' => 'Payment Term #'.$paymentTerm->term.' total percentages have been exceeded to '.$termPercentages[$payment_term_id].'%!',
                            ]);
                        }
                    }
                }

                if(isset($request->payment_term_id[0])){
                    foreach($request->payment_term_id as $key => $payment_term_id){
                        if(!isset($termPercentages[$payment_term_id])){
                            $termPercentages[$payment_term_id] = 0;
                        }
                        $termPercentages[$payment_term_id] += $request->payment_percent[$key];

                        if($termPercentages[$payment_term_id] > 100){
                            $paymentTerm = PaymentTerm::find($payment_term_id);
                            return response()->json([
                                'success' => false,
                                'message' => 'Payment Term #'.$paymentTerm->term.' total percentages have been exceeded to '.$termPercentages[$payment_term_id].'%!',
                            ]);
                        }
                    }
                }


                $inputs = $request->all();
                $supplier->update($inputs);

                $supplier->products()->sync($request->products);
                $supplier->currencies()->sync($request->currencies);

                if($request->hasFile('auth_person_letter_file')){
                    if(!empty($supplier->auth_person_letter)){
                        unlink(public_path($supplier->auth_person_letter));
                    }

                    $supplier->auth_person_letter = $this->fileUpload($request->file('auth_person_letter_file'), 'upload/supplier-authorization-letter');
                    $supplier->save();
                }

                if($request->hasFile('owner_photo_file')){
                    if(!empty($supplier->owner_photo)){
                        unlink(public_path($supplier->owner_photo));
                    }

                    $supplier->owner_photo = $this->fileUpload($request->file('owner_photo_file'), 'upload/supplier-owner-photo', true);
                    $supplier->save();
                }


                if (isset($request->old_payment_term_id) && is_array($request->old_payment_term_id) && count($request->old_payment_term_id) > 0) {
                    foreach ($request->old_payment_term_id as $obejct_id => $payment_term_id){
                        $parent = SupplierPaymentTerm::where([
                            'supplier_id' => $supplier->id,
                            'payment_term_id' => $payment_term_id
                        ])
                        ->where('id', '<', $obejct_id)
                        ->first();

                        SupplierPaymentTerm::where('id', $obejct_id)
                        ->update([
                            'payment_term_id' => $payment_term_id,
                            'payment_percent' => $request->old_payment_percent[$obejct_id],
                            'day_duration' => $request->old_day_duration[$obejct_id],
                            'type' => $request->old_type[$obejct_id],
                            'parent_id' => isset($parent->id) ? $parent->id : 0,
                        ]);
                    }
                }

                if (isset($request->payment_term_id[0])) {
                    foreach ($request->payment_term_id as $key => $payment_term_id){
                        $parent = SupplierPaymentTerm::where([
                            'supplier_id' => $supplier->id,
                            'payment_term_id' => $payment_term_id
                        ])->first();

                        SupplierPaymentTerm::create([
                            'supplier_id' => $supplier->id,
                            'payment_term_id' => $payment_term_id,
                            'payment_percent' => $request->payment_percent[$key],
                            'day_duration' => $request->day_duration[$key],
                            'type' => $request->type[$key],
                            'parent_id' => isset($parent->id) ? $parent->id : 0,
                        ]);
                    }
                }

                DB::commit();

                session()->flash('message', 'A supplier has been updated successfully');
                session()->flash('alert-type', 'success');
                return response()->json([
                    'success' => true,
                    'url' => url('pms/supplier/'.$supplier->id.'/edit?tab='.request()->get('form-type'))
                ]);
            }catch (\Throwable $th){
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'message' => $th->getMessage()
                ]);
            }
        }

        if(request()->has('form-type') && request()->get('form-type') == "address"){
            $validator = \Validator::make($request->all(), [
                'corporate_road' => ['required', 'string', 'max:255'],
                'corporate_city' => ['required', 'string', 'max:255'],
                'corporate_zip' => ['required', 'string', 'max:255'],
                'corporate_country' => ['required', 'string', 'max:255'],
                // 'factory_road' => ['required', 'string', 'max:255'],
                // 'factory_city' => ['required', 'string', 'max:255'],
                // 'factory_zip' => ['required', 'string', 'max:255'],
                // 'factory_country' => ['required', 'string', 'max:255'],
            ]);

            if (!$validator->passes()) {
                return redirect('pms/supplier/'.$supplier->id.'/edit?tab='.request()->get('form-type'))->withErrors($validator);
                ;
            }

            DB::beginTransaction();
            try {
                SupplierAddress::updateOrCreate([
                    'supplier_id' => $supplier->id,
                    'type' => 'corporate',
                ],[
                    'road' => $request->corporate_road,
                    'village' => $request->corporate_village,
                    'city' => $request->corporate_city,
                    'country' => $request->corporate_country,
                    'zip' => $request->corporate_zip,
                    'address' => $request->corporate_address 
                ]);

                SupplierAddress::updateOrCreate([
                    'supplier_id' => $supplier->id,
                    'type' => 'factory',
                ],[
                    'road' => $request->factory_road,
                    'village' => $request->factory_village,
                    'city' => $request->factory_city,
                    'country' => $request->factory_country,
                    'zip' => $request->factory_zip,
                    'address' => $request->factory_address 
                ]);

                DB::commit();
            }catch (\Throwable $th){
                DB::rollback();
                return $this->backWithError($th->getMessage());
            }
        }

        if(request()->has('form-type') && request()->get('form-type') == "contact-person"){
            $validator = \Validator::make($request->all(), [
                'contact_person_sales_name' => ['required', 'string', 'max:255'],
                'contact_person_sales_designation' => ['required', 'string', 'max:255'],
                'contact_person_sales_mobile' => ['required', 'string', 'max:255'],
                'contact_person_after_sales_name' => ['required', 'string', 'max:255'],
                'contact_person_after_sales_designation' => ['required', 'string', 'max:255'],
                'contact_person_after_sales_mobile' => ['required', 'string', 'max:255'],
            ]);

            if (!$validator->passes()) {
                return redirect('pms/supplier/'.$supplier->id.'/edit?tab='.request()->get('form-type'))->withErrors($validator);
                ;
            }

            DB::beginTransaction();
            try {
                SupplierContactPerson::updateOrCreate([
                    'supplier_id' => $supplier->id,
                    'type' => 'sales',
                ],[
                    'name' => $request->contact_person_sales_name,
                    'designation' => $request->contact_person_sales_designation,
                    'mobile' => $request->contact_person_sales_mobile,
                    'email' => $request->contact_person_sales_email
                ]);

                SupplierContactPerson::updateOrCreate([
                    'supplier_id' => $supplier->id,
                    'type' => 'after-sales',
                ],[
                    'name' => $request->contact_person_after_sales_name,
                    'designation' => $request->contact_person_after_sales_designation,
                    'mobile' => $request->contact_person_after_sales_mobile,
                    'email' => $request->contact_person_after_sales_email
                ]);

                DB::commit();
            }catch (\Throwable $th){
                DB::rollback();
                return $this->backWithError($th->getMessage());
            }
        }

        if(request()->has('form-type') && request()->get('form-type') == "bank-account"){
            $validator = \Validator::make($request->all(), [
                'bank_account_name' => ['required', 'string', 'max:255'],
                'bank_account_number' => ['required', 'string', 'max:255'],
                'bank_swift_code' => ['required', 'string', 'max:255'],
                'bank_name' => ['required', 'string', 'max:255'],
                'bank_branch' => ['required', 'string', 'max:255'],
            ]);

            if (!$validator->passes()) {
                return redirect('pms/supplier/'.$supplier->id.'/edit?tab='.request()->get('form-type'))->withErrors($validator);
                ;
            }

            if($request->hasFile('bank_security_check_file')){
                $validator = \Validator::make($request->all(), [
                    'bank_security_check_file' => ['mimes:pdf,png', 'max:2048'],
                ]);

                if (!$validator->passes()) {
                    return redirect('pms/supplier/'.$supplier->id.'/edit?tab='.request()->get('form-type'))->withErrors($validator);
                    ;
                }
            }

            DB::beginTransaction();
            try {
                $bankAccount = SupplierBankAccount::updateOrCreate([
                    'supplier_id' => $supplier->id,
                ],[
                    'account_name' => $request->bank_account_name,
                    'account_number' => $request->bank_account_number,
                    'swift_code' => $request->bank_swift_code,
                    'bank_name' => $request->bank_name,
                    'branch' => $request->bank_branch,
                    'currency' => $request->bank_currency,
                ]);

                if($request->hasFile('bank_security_check_file')){
                    if(!empty($bankAccount->security_check)){
                        unlink(public_path($bankAccount->security_check));
                    }

                    $bankAccount->security_check = $this->fileUpload($request->file('bank_security_check_file'), 'upload/bank-guarantee-security-check');
                    $bankAccount->save();
                }

                DB::commit();
            }catch (\Throwable $th){
                DB::rollback();
                return $this->backWithError($th->getMessage());
            }
        }

        if(request()->has('form-type') && request()->get('form-type') == "ledgers"){
            /*
            $validator = \Validator::make($request->all(), [
                'ledger_name' => ['required'],
                'ledger_type' => ['required'],
                'opening_balance' => ['required'],
            ]);

            if (!$validator->passes()) {
                return redirect('pms/supplier/'.$supplier->id.'/edit?tab='.request()->get('form-type'))->withErrors($validator);
                ;
            }

            DB::beginTransaction();
            try {
                $accountDefaultSettings = accountDefaultSettings();
                // saveGLForObjects($supplier, $supplier->payableAccount, $request, 'payable_account_id', $accountDefaultSettings['supplier_payable']);
                // saveGLForObjects($supplier, $supplier->payablePurchaseAccount, $request, 'payable_purchase_id', $accountDefaultSettings['supplier_payable_purchase']);
                // saveGLForObjects($supplier, $supplier->payableDiscountAccount, $request, 'payable_discount_id', $accountDefaultSettings['supplier_payable_discount']);
                // saveGLForObjects($supplier, $supplier->advanceAccount, $request, 'advance_account_id', $accountDefaultSettings['supplier_advance']);

                DB::commit();
            }catch (\Throwable $th){
                DB::rollback();
                return $this->backWithError($th->getMessage());
            }
            */

            $validator = \Validator::make($request->all(), [
                'payable_account_id' => ['required'],
                'advance_account_id' => ['required'],
            ]);

            if (!$validator->passes()) {
                return redirect('pms/supplier/'.$supplier->id.'/edit?tab='.request()->get('form-type'))->withErrors($validator);
                ;
            }

            DB::beginTransaction();
            try {
                $supplier->payable_account_id = $request->payable_account_id;
                $supplier->advance_account_id = $request->advance_account_id;
                $supplier->save();
                
                DB::commit();
            }catch (\Throwable $th){
                DB::rollback();
                return $this->backWithError($th->getMessage());
            }
        }

        $notification = [
            'message' => 'A supplier has been updated successfully',
            'alert-type' => 'success'
        ];
        return redirect('pms/supplier/'.$supplier->id.'/edit?tab='.request()->get('form-type'))->with($notification);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        DB::beginTransaction();
        try {
            $supplier = Suppliers::find($id);
            if($supplier->deletable == 'no' || freezeSupplier($supplier)){
                return response()->json([
                    'success' => false,
                    'message' => $supplier->name." (".$supplier->code.") Cannot be deleted!"
                ]);
            }
            
            $bankAccount = SupplierBankAccount::where('supplier_id', $supplier->id)->first();
            if(isset($bankAccount->id) && !empty($bankAccount->security_check) && file_exists(public_path($bankAccount->security_check))){
                unlink(public_path($bankAccount->security_check));
            }

            $delete = Suppliers::find($id)->delete();
            \DB::table('products_supplier')->where('supplier_id', $id)->delete();
            \DB::table('supplier_currencies')->where('supplier_id', $id)->delete();
            \DB::table('supplier_payment_terms')->where('supplier_id', $id)->delete();
            if($delete){
                if(!empty($supplier->auth_person_letter) && file_exists(public_path($supplier->auth_person_letter))){
                    unlink(public_path($supplier->auth_person_letter));
                }

                if(!empty($supplier->owner_photo) && file_exists(public_path($supplier->owner_photo))){
                    unlink(public_path($supplier->owner_photo));
                }
            }

            DB::commit();
            return response()->json([
                'success' => true,
                'message' => "Supplier has been deleted successfully"
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function showSupplierProfile($id){

        $data = [
            'title' => 'Supplier Profile Information',
            'supplier' => Suppliers::findOrFail($id),
            'corporateAddress' => SupplierAddress::where(['supplier_id' => $id, 'type' => 'corporate'])->first(),
            'factoryAddress' => SupplierAddress::where(['supplier_id' => $id, 'type' => 'factory'])->first(),
            'contactPersonSales' => SupplierContactPerson::where(['supplier_id' => $id, 'type' => 'sales'])->first(),
            'contactPersonAfterSales' => SupplierContactPerson::where(['supplier_id' => $id, 'type' => 'after-sales'])->first(),
            'bankAccount' => SupplierBankAccount::where(['supplier_id' => $id])->first(),
            'logs' => SupplierLog::where('supplier_id', $id)->orderBy('id', 'desc')->get(),
            'accountDefaultSettings' => accountDefaultSettings(),
        ];

        if(request()->has('view')){
            $body = View::make('pms.backend.pages.suppliers.supplier-view',$data);
            return $body->render();
        }else{
            return view('pms.backend.pages.suppliers.profile', $data);
        }

    }

    public function showSupplierRatingFrom($supplierId,$grnId){

     $supplierCriteriaColumns=supplierCriteriaColumns();

     $supplierData = Suppliers::with('relPaymentTerms','relPaymentTerms.relPaymentTerm','SupplierRatings')->findOrFail($supplierId);
     $grn = GoodsReceivedNote::findOrFail($grnId);
     $title = "Give rating to supplier the ( $supplierData->name )";

     return view('pms.backend.pages.suppliers.rating', compact('title', 'supplierData','supplierCriteriaColumns','grn'));

 }

 public function storeSupplierRating(Request $request){

    DB::beginTransaction();
    try {

        $grn=GoodsReceivedNote::findOrFail($request->grn_id);
        $supplier=Suppliers::findOrFail($request->supplier_id);
        $totalColumn = ColumnCount('supplier_rattings');
        $totalScore =0;

        $ratingInput=[];
        foreach ($request->rating as $key=>$rate){

            $ratingInput[$key]=$request->rating[$key]??0;
            $totalScore+=$ratingInput[$key];
        }

        // if ($grn->is_supplier_rating=='yes'){
        //     return $this->redirectBackWithWarning('Supplier Rating Already Submit','pms.stockin.grn.list');
        // }
        
        if ($totalScore<=0){
            return $this->backWithWarning('Rating is empty');
        }

        $ratingInput['created_by']=\Auth::user()->id;
        $ratingInput['supplier_id']=$request->supplier_id;
        $ratingInput['total_score']=$totalScore/$totalColumn;
        $ratingInput['key']=$request->key;
        $ratingInput['value']=$request->value;
        $ratingInput['type']=$request->type;

        SupplierRatings::create($ratingInput);

        $grn->update(['is_supplier_rating'=>'yes']);
        DB::commit();

        return $this->urlRedirectBack('Supplier Rating is successful','/pms','success');

    }catch (\Throwable $th){
        DB::rollback();
        return response()->json($th->getMessage());
    }

}

public function toggle($id)
{
    $message = '';
    $messageForManagement = '';

    $supplier = Suppliers::find($id);
    $approved_by = $supplier->approved_by;
    $status = $supplier->status;

    if(request()->get('which') == "approval"){
        $approved_by = (request()->get('value') == "confirm" ? (auth()->user()->hasRole('Purchase-Department') ? 'purchase-approved' : 'management-approved') : (auth()->user()->hasRole('Purchase-Department') ? 'purchase-declined' : 'management-declined'));

        if(request()->get('value') == "confirm"){
            $messageForManagement = '<span class="notification-links" data-src="'.route('pms.supplier.profile',$supplier->id).'?view" data-title="Suppliers Details">Supplier:'.$supplier->name.'.A Supplier '.(request()->get('value') == "confirm" ? 'Approved' : 'Declined').' by '.(auth()->user()->hasRole('Purchase-Department') ? 'Purchase Department' : 'Management').'.</span>';
        }
    }elseif(request()->get('which') == "status"){
        $status = (request()->get('value') == "confirm" ? "Active" : "Inactive");

        if(request()->get('value') == "confirm"){
            $message = '<span class="notification-links" data-src="'.route('pms.supplier.profile',$supplier->id).'?view" data-title="Suppliers Details">Supplier:'.$supplier->name.'.A Supplier '.(request()->get('value') == "confirm" ? "Confirmed" : "Declined").' by Management</span>';
        }
    }

    $supplier->approved_by = $approved_by;
    $supplier->status = $status;
    $supplier->save();

    if($supplier->approved_by == 'management-approved'){
        $supplier->status = 'Active';
        $supplier->save();
    }

    if($supplier->approved_by == 'management-declined'){
        $supplier->status = 'Inactive';
        $supplier->save();
    }


    if(strlen($message) > 10){
        CreateOrUpdateNotification('', getManagerInfo('Purchase-Department'), $message, 'unread', 'sent-to-purchase', '');

        CreateOrUpdateNotification('', $supplier->created_by, $message, 'unread', 'requisition', '');
    }

    if(strlen($messageForManagement) > 10){
        CreateOrUpdateNotification('', getManagerInfo('Management'), $messageForManagement, 'unread', 'send-to-manager', '');
    }

    $supplierStatus = supplierStatus($supplier);
    $approval_button = '<a class="btn btn-xs btn-'.$supplierStatus['approved_class'].'" data-approved-by="'.$supplier->approved_by.'" data-status="'.$supplier->status.'"  data-which="approval" data-supplier-id="'.$supplier->id.'" '.(($supplierStatus['approval'] && (auth()->user()->hasRole('Purchase-Department') || auth()->user()->hasRole('Management'))) ? 'onclick="toggleSupplierStatus($(this))"' : '').'><i class="'.$supplierStatus['approved_icon'].'"></i>&nbsp;'.$supplierStatus['approved_text'].'</a>';
    $status_button = '<a class="btn btn-'.($supplier->status == "Active" ? "success" : "danger").' btn-block btn-xs" data-approved-by="'.$supplier->approved_by.'" data-status="'.$supplier->status.'" data-which="status" data-supplier-id="'.$supplier->id.'" '.(auth()->user()->hasRole('Management') && $supplier->approved_by == "management-approved" ? 'onclick="toggleSupplierStatus($(this))"' : '').'><i class="'.($supplier->status == "Active" ? "lar la-check-circle" : "la la-ban").'"></i>&nbsp;'.($supplier->status == "Active" ? "Active" : "Pending").'</a>';
    

    return response()->json([
        'message' => "Supplier has been ".(request()->get('value') == "confirm" ? "Approved" : "Declined")." successfully",
        'approval_button' => $approval_button,
        'status_button' => $status_button,
    ]);
}

// public function toggleForApproval($id)
// {
//     $supplier = Suppliers::find($id);
//     $supplier->approved_by = ($supplier->status == "purchase" ? "users" : "purchase");
//     $supplier->save();

//     $message= '<span class="notification-links" data-src="'.route('pms.supplier.profile',$supplier->id).'?view" data-title="Suppliers Details">Supplier:'.$supplier->name.'.A Supplier Approved by Purchase,Watting for Approval.</span>';


//     CreateOrUpdateNotification('',getManagerInfo('Management'),$message,'unread','send-to-manager','');

//     return response()->json([
//         'message' => "Supplier has been ".($supplier->approved_by == "purchase" ? "Approved" : "Declined")." successfully",
//         'status' => $supplier->status,
//         'approved_by' => $supplier->approved_by,
//     ]);
// }

public function createSupplierLog($supplier_id)
{
    $data = [
        'supplier_id' => $supplier_id
    ];

    return view('pms.backend.pages.suppliers.logs.create', $data);
}

public function saveSupplierLog(Request $request, $supplier_id)
{
    $request->validate([
        'date' => 'required',
        'topic' => 'required',
        'log' => 'required',
    ]);

    DB::beginTransaction();
    try{
        $log = saveSupplierLog($supplier_id, $request->date, $request->topic, $request->log);

        if($log){
            DB::commit();
            return response()->json([
                'success' => true
            ]);
        }

        return response()->json([
            'success' => false
        ]);
    }catch (\Throwable $th){
        DB::rollback();
        return response()->json([
            'success' => false,
            'message' => $th->getMessage()
        ]);
    }
}

public function editSupplierLog($log_id)
{
    $data = [
        'log' => SupplierLog::find($log_id)
    ];

    return view('pms.backend.pages.suppliers.logs.edit', $data);
}

public function updateSupplierLog(Request $request, $log_id)
{
    $request->validate([
        'date' => 'required',
        'topic' => 'required',
        'log' => 'required',
    ]);

    DB::beginTransaction();
    try{
        $log = SupplierLog::find($log_id);
        $log = saveSupplierLog($log->supplier_id, $request->date, $request->topic, $request->log, $log->id);

        if($log){
            DB::commit();
            return response()->json([
                'success' => true
            ]);
        }

        return response()->json([
            'success' => false
        ]);
    }catch (\Throwable $th){
        DB::rollback();
        return response()->json([
            'success' => false,
            'message' => $th->getMessage()
        ]);
    }
}

public function deleteSupplierLog($log_id)
{
    DB::beginTransaction();
    try{
        $log = SupplierLog::find($log_id)->delete();

        if($log){
            DB::commit();
            return response()->json([
                'success' => true,
                'message' => 'Log has been deleted'
            ]);
        }

        return response()->json([
            'success' => false,
            'message' => 'Something went wrong!'
        ]);
    }catch (\Throwable $th){
        DB::rollback();
        return response()->json([
            'success' => false,
            'message' => $th->getMessage()
        ]);
    }
}


public function categoryWiseProducts(Request $request)
{
    $products = Product::with([
        'attributes.attributeOption.attribute'
    ])
    ->whereIn('category_id', $request->sub_categories)
    ->where('status', 'approved')->get();
    $data = '';
    if(isset($products[0])){
        foreach($products as $key => $product){
            $selected = (isset($request->selected_products[0]) ? (in_array($product->id, $request->selected_products) ? 'selected' : '') : '');
            $data .= '<option value="'.$product->id.'" '.$selected.'>'.$product->name.' '.getProductAttributesFaster($product).'</option>';
        }
    }

    return $data;

}

public function supplierCode($supplier = false)
{
    $count = Suppliers::when($supplier, function($query) use($supplier){
        return $query->where('id', '<', $supplier->id)
        ->where(DB::raw('substr(`created_at`, 1, 4)'), date('Y', strtotime($supplier->created_at)));
    })
    ->when(!$supplier, function($query){
        return $query->where(DB::raw('substr(`created_at`, 1, 4)'), date('Y'));
    })
    ->count();

    return ($supplier ? date('y', strtotime($supplier->created_at)) : date('y')).sprintf("%04d", $count+1);
}

}
