<?php
bolt_decrypt( __FILE__ , 'Ly5HyE'); return 0;
##!!!##

namespace App\Http\Controllers\Pms;

use App\Http\Controllers\Controller;
use App\Models\PmsModels\Attribute;
use App\Models\PmsModels\AttributeOption;
use Illuminate\Validation\Rule;
use Illuminate\Http\Request;
use DataTables;

class AttributeOptionController extends Controller
{   

    public function headerColumns($value='')
    {
        return array(
            ['SL', 'SL'],
            ['attribute_code', 'attribute_code'],
            ['attribute_name', 'attribute_name'],
            ['name', 'name', 'text-left'],
            ['description', 'description', 'text-left'], 
            ['actions', 'actions', 'text-center']
        );
    }
    
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        try {

            $attributeOptions = AttributeOption::with('attribute')->where('attribute_id', request()->get('attribute_id'))->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });

            $options=[
                'Accounts'=>auth()->user()->hasRole('Accounts'),
                'attribute-option-edit'=>auth()->user()->hasPermissionTo('attribute-option-edit'),
                'attribute-option-delete'=>auth()->user()->hasPermissionTo('attribute-option-delete')
            ];

            if (request()->ajax()) {

                return Datatables::of($attributeOptions)
                ->addIndexColumn()
                ->addColumn('attribute_code', function($option){
                    return isset($option->attribute->code)?$option->attribute->code:'';
                })
                ->filterColumn('attribute_code', function ($query, $keyword) {
                    return $query->whereHas('attribute', function ($query) use($keyword) {
                        $query->where('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('attribute_name', function($option){
                    return isset($option->attribute->name)?$option->attribute->name:'';
                })
                ->filterColumn('attribute_name', function ($query, $keyword) {
                    return $query->whereHas('attribute', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('actions', function($option) use($options){
                    $actions = '';
                    if(!$options['Accounts']){
                        if($options['attribute-option-edit']){
                            $actions .= '<a class="btn btn-xs btn-success rounded-circle ml-2" href="'. url('pms/product-management/attribute-options/'.$option->id.'/edit').'"><i class="la la-edit"></i></a>';
                        }
                        if($options['attribute-option-delete']){
                            $actions .= '<a href="javascript:void(0)" class="btn btn-xs btn-danger ml-2" data-src="'.route('pms.product-management.attribute-options.destroy', $option->id).'" onclick="deleteFromCRUD($(this))"><i class="la la-trash"></i></a>';
                        }
                        
                    }

                    return $actions;

                })
                ->rawColumns(['actions'])
                ->make(true);
            }

            $data = [
                'title' => "Attribute Options",
                'attributes' => Attribute::all(),
                'headerColumns' => $this->headerColumns()
            ];
            return view('pms.backend.pages.attributes.options.index', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $data = [
            'title' => "New Attribute Option",
            'attributes' => Attribute::all(),
        ];
        return view('pms.backend.pages.attributes.options.create', $data);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'attribute_id' => 'required',
            'name' => ['required', 'string', 'max:255'],
        ]);
        try {
            $search = AttributeOption::where('attribute_id', $request->attribute_id)->where('name', $request->name)->first();
            if(isset($search->id)){
                return $this->backWithError("Attribute Option #".$request->name.' already exists for Attribute #'.Attribute::find($request->attribute_id)->name);
            }

            AttributeOption::create($request->all());
            return $this->backWithSuccess('Attribute Option created successfully');
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show(AttributeOption $attributeOption)
    {
        
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $data = [
            'title' => "Edit Attribute Option",
            'attributes' => Attribute::all(),
            'attributeOption' => AttributeOption::find($id),
        ];
        return view('pms.backend.pages.attributes.options.edit', $data);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, AttributeOption $attributeOption)
    {
        $this->validate($request, [
            'attribute_id' => 'required',
            'name' => ['required', 'string', 'max:255'],
        ]);
        try {
            $search = AttributeOption::where('attribute_id', $request->attribute_id)->where('name', $request->name)->where('id', '!=', $attributeOption->id)->first();
            if(isset($search->id)){
                return $this->backWithError("Attribute Option #".$request->name.' already exists for Attribute #'.Attribute::find($request->attribute_id)->name);
            }

            $attributeOption->fill($request->all())->save();
            //return $this->backWithSuccess('Attibute Option updated successfully');
            return $this->urlRedirectBack('Attibute Option updated successfully','pms/product-management/attribute-options?attribute_id='.$request->attribute_id,'success');
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy(AttributeOption $attributeOption)
    {
        try {

            if ($attributeOption->products->count() > 0) {
                 return response()->json([
                    'success' => false,
                    'message' => 'Attribute option can not be deleted.'
                ]);
            }

            $attributeOption->delete();
            return response()->json([
                'success' => true,
                'message' => "Attribute Option has been deleted"
            ]);
        }catch (\Throwable $th){
            return response()->json($th->getMessage());
        }
    }
}
