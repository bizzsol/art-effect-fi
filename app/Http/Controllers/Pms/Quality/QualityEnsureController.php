<?php
bolt_decrypt( __FILE__ , 'd0hiAZ'); return 0;
##!!!##

namespace App\Http\Controllers\Pms\Quality;

use App\Http\Controllers\Controller;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Http\Request;

use App\Models\PmsModels\InventoryModels\InventoryActionControl;
use App\Models\PmsModels\Product;
use App\Models\PmsModels\Warehouses;
use App\Models\PmsModels\PurchaseReturn;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\Models\PmsModels\Purchase\PurchaseOrderItem;
use App\Models\PmsModels\Grn\GoodsReceivedNote;
use App\Models\PmsModels\Grn\GoodsReceivedSummary;
use App\Models\PmsModels\Grn\GoodsReceivedItem;
use App\Models\PmsModels\Grn\GoodsReceivedItemStockIn;
use App\Models\PmsModels\Grn\Faq;
use App\Models\PmsModels\Grn\ReturnChangeFaq;
use App\Models\PmsModels\RequisitionItem;

use Illuminate\Support\Facades\Mail;
use DataTables;
use DB,Auth,Session,redirect;


class QualityEnsureController extends Controller
{
    public function approvedHeaderColumns($value='')
    {
        return array(
            ['SL', 'SL'],
            ['PO_reference', 'PO_reference', 'text-center'],
            ['PO_date', 'PO_date', 'text-center'],
            ['challan', 'challan', 'text-center'],
            ['gate_in_reference', 'gate_in_reference', 'text-center'],
            ['gate_in_date', 'gate_in_date', 'text-center'],
            ['gate_in_qty', 'gate_in_qty', 'text-right'],
            ['received_status', 'received_status', 'text-center'],
            ['approved_qty', 'approved_qty', 'text-right'],
            ['options', 'options','text-center'],
        );
    }

    /**
     * Display a approved listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        try{

            $userUnits = auth()->user()->priorities->pluck('hr_unit_id')->toArray();
            $userDepartments = auth()->user()->priorities->pluck('hr_department_id')->toArray();
            $items = GoodsReceivedNote::with([
                'relPurchaseOrder.purchaseOrderRequisitions',
                'relGoodsReceivedItems'
            ])
            ->whereHas('relPurchaseOrder', function($query){
                return $query->where('is_send', 'yes');
            })
            ->when(isset(auth()->user()->employee->as_unit_id), function($query) use($userUnits){
                return $query->whereHas('relPurchaseOrder', function($query) use($userUnits){
                    return $query->where('hr_unit_id', $userUnits);
                });
            })
            ->when(auth()->user()->hasRole('Department-Head'), function($query) use($userDepartments){
                return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions', function($query) use($userDepartments){
                    return $query->where('hr_department_id', $userDepartments);
                });
            })
            ->when(!auth()->user()->hasRole('Department-Head'), function($query){
                return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions', function($query){
                    return $query->where('hr_department_id', 0);
                });
            })
            ->whereHas('relGoodsReceivedItems', function($query){
                return $query->where('quality_ensure','approved');
            })
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('received_date', 'desc');
            });
                
            if (request()->ajax()) {
                return DataTables::of($items)
                    ->addIndexColumn()
                    ->addColumn('PO_reference', function($grn){
                        return '<a href="javascript:void(0)" class="btn btn-link" onclick="purchaseOrderDetails($(this))" data-src="'.route('pms.purchase.order-list.show', $grn->relPurchaseOrder->id).'" data-title="Purchase Order Details">'.$grn->relPurchaseOrder->reference_no.'
                                        </a>';
                    })
                    ->filterColumn('PO_reference', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder', function ($query) use($keyword) {
                            $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->orderColumn('PO_reference', function ($query, $order) {
                        return pleaseSortMe($query, $order, PurchaseOrder::select('purchase_orders.reference_no')
                            ->whereColumn('purchase_orders.id', 'goods_received_notes.purchase_order_id')
                        );
                    })
                    ->addColumn('PO_date', function($grn){
                        return date('Y-m-d', strtotime($grn->relPurchaseOrder->po_date));
                    })
                    ->filterColumn('PO_date', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder', function ($query) use($keyword) {
                            $query->where('po_date', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->orderColumn('PO_reference', function ($query, $order) {
                        return pleaseSortMe($query, $order, PurchaseOrder::select('purchase_orders.po_date')
                            ->whereColumn('purchase_orders.id', 'goods_received_notes.purchase_order_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('gate_in_reference', function($grn){
                        return '<div style="width: 100%">
                                    <div style="width: 90%;float: left;clear:right">
                                        <a href="javascript:void(0)" class="btn btn-link" onclick="showQEPODetails($(this))" data-src="'.route('pms.grn.grn-process.show',$grn->id).'" data-title="Gate In Details">'.$grn->reference_no.'</a>
                                    </div>
                                    <div style="width: 10%;float: left;clear:right">
                                        <a class="btn btn-primary btn-xs" href="'. url('pms/grn/gate-in-slip/'.$grn->purchase_order_id.'?grn='.$grn->id) .'" target="_blank" style="margin-top: 7.5px" title="Gate In Slip"><i class="la la-print"></i></a>
                                    </div>
                                </div>';
                    })
                    ->filterColumn('gate_in_reference', function ($query, $keyword) {
                        $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    })
                    ->orderColumn('gate_in_reference', function ($query, $order) {
                        return $query->orderBy('reference_no', $order);
                    })
                    ->addColumn('gate_in_date', function($grn){
                        return date('Y-m-d', strtotime($grn->received_date));
                    })
                    ->filterColumn('gate_in_date', function ($query, $keyword) {
                        $query->where('received_date', 'LIKE', '%'.$keyword.'%');
                    })
                    ->orderColumn('gate_in_date', function ($query, $order) {
                        return $query->orderBy('received_date', $order);
                    })
                    ->addColumn('gate_in_qty', function($grn){
                        return $grn->relGoodsReceivedItems->sum('qty');
                    })
                    ->editColumn('received_status', function($grn){
                        if($grn->received_status == 'partial'){
                            return '<a class="btn btn-warning btn-xs">Partial Received</a>';
                        }elseif($grn->received_status == 'full'){
                            return '<a class="btn btn-success btn-xs">Full Received</a>';
                        }else{
                            return '<a class="btn btn-dark btn-xs">'.ucwords($grn->received_status).'</a>';
                        }
                    })
                    ->addColumn('approved_qty', function($grn){
                        return $grn->relGoodsReceivedItems->where('quality_ensure','approved')->sum('qty');
                    })
                    ->addColumn('options', function($grn){
                        $options = '';
                        $count = $grn->relGoodsReceivedItems()->where('quality_ensure','approved')->count();
                        if($count > 0){
                            $options .= '<a href="'.route('pms.quality.ensure.approved.single.list',$grn->id).'" class="btn btn-xs btn-info">Items ('.$count.')</a>';
                        }
                        $options .= '&nbsp;&nbsp;<a target="_blank" href="'.route('pms.quality.approved.item.print',['id'=>$grn->id,'type'=>'approved']).'" title="Quality Ensure Approved Print View" class="btn btn-xs btn-success"><i class="las la-print"></i></a>';

                        return $options;
                    })
                    ->rawColumns(['PO_reference', 'gate_in_reference', 'received_status', 'options'])
                    ->make(true);
            }

            return view('pms.backend.pages.quality.approved-index', [
                'title' => "Quality Ensure Approval List",
                'headerColumns' => $this->approvedHeaderColumns()
            ]);
        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

   /**
     * Show the Grn Wise Approved Item List.
     *
     * @return \Illuminate\Http\Response
     */

    public function ensureCheck($id)
    {
        try{
            $title="Quality Ensure Check";

            $grn = GoodsReceivedNote::with([
                'relPurchaseOrder.relQuotation.relSuppliers.SupplierRatings',
                'relPurchaseOrder.relQuotation.exchangeRate.currency',
                'relPurchaseOrder.relQuotation',
                'relGoodsReceivedItems.relProduct.productUnit',
                'relGoodsReceivedItems.relProduct.category.category',
                'relGoodsReceivedItems.relProduct.attributes.attributeOption.attribute',
                'relGoodsReceivedItems.relPurchaseOrderReturns'
            ])
            ->where('id',$id)
            ->first();
            
            $grn->rel_goods_received_items = $grn->relGoodsReceivedItems->whereIn('quality_ensure',['pending']);
            $wareHouses = Warehouses::select('name','id')->get();
            $faqs = Faq::where('status','active')->get();
            return view('pms.backend.pages.quality.pending-index',compact('title','grn','wareHouses','faqs'));
        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function getFaqs($category_id)
    {
        $questions = Faq::where('category_id', $category_id)->where('status','active')->get();
        $data = '';
        if(isset($questions[0])){
            foreach($questions as $key => $question){
                $data .='<li>
                    <input class="form-check-input" type="checkbox" name="faq_id[]" id="faq_'.$question->id.'" value="'.$question->id.'" required>
                    <label class="form-check-label" for="faq_'.$question->id.'"><strong>'.$question->name.'</strong>
                    </label>
                </li>';
            }
        }

        return $data;
    }
    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function save(Request $request)
    {

        $model = GoodsReceivedItem::findOrFail($request->id);

        $product = Product::findOrFail($model->product_id);

        if(isset($model->id) && $request->quality_ensure==='approved'){

            DB::beginTransaction();
            try{
                
                $newText = 'Approved';
                $update=$model->update([
                    'quality_ensure' => $request->quality_ensure,
                    'received_qty' =>  $model->qty,
                    'updated_at' => date('Y-m-d H:i:s'),
                    'updated_by' => Auth::user()->id
                ]);

                $model = GoodsReceivedItem::findOrFail($request->id);

                $prefix='QE-AP-'.date('y', strtotime(date('Y-m-d'))).'-'.(auth()->user()->employee->unit->hr_unit_short_name).'-';
                $refNo=uniqueCode(18,$prefix,'goods_received_items_stock_in','id');

                $GRItemsStockIn = new GoodsReceivedItemStockIn();
                $GRItemsStockIn->purchase_order_id = $model->relGoodsReceivedNote->purchase_order_id;
                $GRItemsStockIn->goods_received_item_id = $model->id;
                $GRItemsStockIn->reference_no = $refNo;
                $GRItemsStockIn->unit_amount = $model->unit_amount;
                $GRItemsStockIn->received_qty = $model->qty;
                $GRItemsStockIn->sub_total = $model->sub_total;
                $GRItemsStockIn->discount_percentage = $model->discount_percentage;
                $GRItemsStockIn->discount = $model->discount;
                $GRItemsStockIn->vat_percentage = $model->vat_percentage;
                $GRItemsStockIn->vat = $model->vat;
                $GRItemsStockIn->total_amount = $model->total_amount;
                $GRItemsStockIn->is_grn_complete = 'no';
                $GRItemsStockIn->save();

                $message = '<span class="notification-links" data-src="'.route('pms.grn.grn-process.show',$model->relGoodsReceivedNote->id).'?view" data-title="Gate-In Details">Reference No:'.$model->relGoodsReceivedNote->reference_no.'. Waiting for the GRN.</span>';

                CreateOrUpdateNotification('',getManagerInfo('Store-Manager',$model->relGoodsReceivedNote->relPurchaseOrder->hr_unit_id),$message,'unread','send-to-store');

                CreateOrUpdateNotification('',getManagerInfo('Purchase-Department'),$message,'unread','sent-to-purchase','');

                $this->updateQCQuantity($model->id, $model->qty);
                DB::commit();

                return response()->json([
                    'success' => true,
                    'new_text' => $newText,
                    'message' => 'Successfully Updated this Item Quality Status!!'
                ]);
            }catch (\Throwable $th){
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'message' => $th->getMessage()
                ]);
            }

        }elseif(isset($model->id) && $request->quality_ensure==='return-change' || $request->quality_ensure==='return'){

            if (($model->qty) < $request->return_qty) {
                return $this->backWithWarning('Your return qty is greater then maximum qty');
            }

            if ($request->return_qty <= 0) {
               return $this->backWithWarning('Minimum One item is required');
            }

            $code=($request->quality_ensure=='return-change'?'QE-RP-':'QE-RT-');

            $prefix=$code.date('y', strtotime(date('Y-m-d'))).'-'.(auth()->user()->employee->unit->hr_unit_short_name).'-';
            $refNo=uniqueCode(18,$prefix,'goods_received_items_stock_in','id');

            if($request->quality_ensure=='return-change'){
                $purchaseReturnCodePrefix = 'RP-'.date('y', strtotime(date('Y-m-d'))).'-'.(auth()->user()->employee->unit->hr_unit_short_name).'-';
                $prev = PurchaseReturn::whereHas('relGoodsReceivedItems.relGoodsReceivedNote', function($query) use($model){
                    return $query->where('id', $model->goods_received_note_id);
                })
                ->where('status', 'return-change')
                ->first();
                if(isset($prev->id)){
                    $purchaseReturnCode = $prev->code;
                }else{
                    $purchaseReturnCode = uniqueCode(16,$purchaseReturnCodePrefix,'purchase_returns','id');
                }
            }else{
                $purchaseReturnCodePrefix = 'RT-'.date('y', strtotime(date('Y-m-d'))).'-'.(auth()->user()->employee->unit->hr_unit_short_name).'-';
                $prev = PurchaseReturn::whereHas('relGoodsReceivedItems.relGoodsReceivedNote', function($query) use($model){
                    return $query->where('id', $model->goods_received_note_id);
                })
                ->where('status', 'return')
                ->first();
                if(isset($prev->id)){
                    $purchaseReturnCode = $prev->code;
                }else{
                    $purchaseReturnCode = uniqueCode(16,$purchaseReturnCodePrefix,'purchase_returns','id');
                }
            }

            DB::beginTransaction();
            try{
                $update=$model->update([
                    'quality_ensure' => $request->quality_ensure,
                    'received_qty' =>  $model->qty-$request->return_qty,
                    'updated_at' => date('Y-m-d H:i:s'),
                    'updated_by' => Auth::user()->id
                ]);

                if ($update) {
                    PurchaseReturn::create([
                        'goods_received_item_id'=>$model->id,
                        'code' => $purchaseReturnCode,
                        'return_note' => $request->return_note,
                        'return_qty' => $request->return_qty,
                        'status' => $request->quality_ensure,
                    ]);

                    //subtotal,received_qty,discount_amount,vat_amount
                    $receivedQty=$model->qty-$request->return_qty;
                    if($receivedQty > 0){
                        $subtotal=$receivedQty*$model->unit_amount;
                        $discountAmount= ($model->discount_percentage * $subtotal)/100;
                        $vatAmount= ($model->vat_percentage * $subtotal)/100;

                        $GRItemsStockIn = new GoodsReceivedItemStockIn();
                        $GRItemsStockIn->purchase_order_id = $model->relGoodsReceivedNote->purchase_order_id;
                        $GRItemsStockIn->reference_no = $refNo;
                        $GRItemsStockIn->goods_received_item_id = $model->id;
                        $GRItemsStockIn->unit_amount = $model->unit_amount;
                        $GRItemsStockIn->received_qty = $receivedQty;
                        $GRItemsStockIn->sub_total = $subtotal;
                        $GRItemsStockIn->discount_percentage = $model->discount_percentage;
                        $GRItemsStockIn->discount = $discountAmount;
                        $GRItemsStockIn->vat_percentage = $model->vat_percentage;
                        $GRItemsStockIn->vat = $vatAmount;
                        $GRItemsStockIn->total_amount = ($subtotal-$discountAmount)+$vatAmount;
                        $GRItemsStockIn->is_grn_complete = 'no';
                        $GRItemsStockIn->save();
                    }

                    //Insert return reason
                    if (!empty($request->faq_id)) {
                        foreach ($request->faq_id as $key => $faq_id) {
                            ReturnChangeFaq::create([
                                'faq_id'=>$faq_id,
                                'goods_received_item_id'=>$model->id
                            ]);
                        }
                    }
                }
                
                $message = '<span class="notification-links" data-src="'.route('pms.grn.grn-process.show',$model->relGoodsReceivedNote->id).'?view" data-title="Gate-In Details">Reference No:'.$model->relGoodsReceivedNote->reference_no.'. Waiting for the GRN.</span>';

                CreateOrUpdateNotification('',getManagerInfo('Store-Manager',$model->relGoodsReceivedNote->relPurchaseOrder->hr_unit_id),$message,'unread','send-to-store');

                CreateOrUpdateNotification('',getManagerInfo('Purchase-Department'),$message,'unread','sent-to-purchase','');

                $this->updateQCQuantity($model->id, $receivedQty);
                DB::commit();

                return $this->backWithSuccess('Successfully Updated this Item Quality Status!!');

            }catch (Throwable $th){
                DB::rollback();
                return $this->backWithError($th->getMessage());
            }
        }

        return back();
    }

    public function updateQCQuantity($goods_received_item_id, $qc_qty)
    {
        if($qc_qty > 0){
            $array = [];

            //PO Generate Equally distribute
            $goodsReceivedItem = GoodsReceivedItem::find($goods_received_item_id);
            $requisition_qty = RequisitionItem::where('product_id', $goodsReceivedItem->product_id)
            ->whereHas('requisition.purchaseOrders.purchaseOrder.relGoodReceiveNote', function($query) use($goodsReceivedItem){
                return $query->where('id', $goodsReceivedItem->goods_received_note_id);
            })
            ->sum('qty');
            $percentage = ($requisition_qty > 0 && $qc_qty > 0 ? (($qc_qty/$requisition_qty)*100) : 0);

            //array_push($array, $percentage);

            $requisitions = $goodsReceivedItem->relGoodsReceivedNote->relPurchaseOrder->purchaseOrderRequisitions->pluck('requisition_id')->toArray();
            $requisitionItems = RequisitionItem::whereIn('requisition_id', $requisitions)->where('product_id', $goodsReceivedItem->product_id)->get();
            if(isset($requisitionItems[0])){
                foreach($requisitionItems as $key => $requisitionItem){
                    if($qc_qty>0){
                        $this_qc_qty = round(($percentage > 0 ? ($requisitionItem->qty*($percentage/100)) : 0));
                        $this_qc_qty = ($this_qc_qty > $qc_qty ? $qc_qty : $this_qc_qty);

                        // array_push($array, [
                        //     'percentage' => $percentage,
                        //     'r' => $requisitionItem->qty,
                        //     'q' => $this_qc_qty
                        // ]);
                        
                        $requisitionItem->qc_qty = $this_qc_qty;
                        $requisitionItem->save();

                        $qc_qty = ($qc_qty - $this_qc_qty);
                    }
                }
                if($qc_qty>0){
                    $requisitionItem = RequisitionItem::whereIn('requisition_id', $requisitions)->where('product_id', $goodsReceivedItem->product_id)->first();
                    $requisitionItem->qc_qty = ($requisitionItem->qc_qty+round($qc_qty));
                    $requisitionItem->save();

                    // array_push($array, [
                    //     'percentage' => $percentage,
                    //     'r' => $requisitionItem->qty,
                    //     'q' => round($qc_qty),
                    //     'e' => true
                    // ]);
                }
            }
            //PO Generate Equally distribute
            //return $array;
        }
    }


    /**
    * Show the Grn Wise Approved Item List.
    *
    * @return \Illuminate\Http\Response
    */

    public function grnWiseApprovedItemList($id)
    {
        try{
            $title="Quality Ensure Approval List";
            $grn = GoodsReceivedNote::find($id);
            $goodsReceivedItemId = GoodsReceivedItem::where('goods_received_note_id',$id)->where('quality_ensure','approved')->pluck('id')->all();

            $approval_list = GoodsReceivedItemStockIn::whereIn('goods_received_item_id',$goodsReceivedItemId)->orderBy('id','desc')->paginate(30);
            return view('pms.backend.pages.quality.approved-list',compact('title','approval_list', 'grn'));
        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function returnListHeaderColumns($value='')
    {
        return array(
            ['SL', 'SL'],
            ['PO_reference', 'PO_reference', 'text-center'],
            ['PO_date', 'PO_date', 'text-center'],
            ['challan', 'challan', 'text-center'],
            ['gate_in_reference', 'gate_in_reference', 'text-center'],
            ['gate_in_qty', 'gate_in_qty', 'text-right'],
            ['return_qty', 'return_qty', 'text-right'],
            ['received_status', 'received_status', 'text-center'],
            ['options', 'options','text-center'],
        );
    }

    /**
    * Show the Grn Wise Return List.
    *
    * @return \Illuminate\Http\Response
    */
    public function returnlList()
    {
        try{
            if (request()->ajax()) {
                $userUnits = auth()->user()->priorities->pluck('hr_unit_id')->toArray();
                $userDepartments = auth()->user()->priorities->pluck('hr_department_id')->toArray();
                $items = GoodsReceivedNote::with(['relPurchaseOrder',
                    'relPurchaseOrder.relPurchaseOrderItems',
                    'relGoodsReceivedItems','relPurchaseOrder.purchaseOrderRequisitions'
                ])
                ->whereHas('relPurchaseOrder', function($query){
                    return $query->where('is_send', 'yes');
                })
                ->when(isset(auth()->user()->employee->as_unit_id), function($query) use($userUnits){
                    return $query->whereHas('relPurchaseOrder', function($query) use($userUnits){
                        return $query->where('hr_unit_id', $userUnits);
                    });
                })
                ->when(auth()->user()->hasRole('Department-Head'), function($query) use($userDepartments){
                    return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions', function($query) use($userDepartments){
                        return $query->where('hr_department_id', $userDepartments);
                    });
                })
                ->when(!auth()->user()->hasRole('Department-Head'), function($query){
                    return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions', function($query){
                        return $query->where('hr_department_id', 0);
                    });
                })
                ->whereHas('relGoodsReceivedItems', function($query){
                    return $query->where('quality_ensure','return');
                })
                ->when(!datatableOrdering(), function($query){
                    return $query->orderby('received_date', 'desc');
                });

                return DataTables::of($items)
                    ->addIndexColumn()
                    ->addColumn('PO_reference', function($grn){
                        return '<a href="javascript:void(0)" class="btn btn-link" onclick="purchaseOrderDetails($(this))" data-src="'.route('pms.purchase.order-list.show', $grn->relPurchaseOrder->id).'" data-title="Purchase Order Details">'.$grn->relPurchaseOrder->reference_no.'
                                        </a>';
                    })
                    ->filterColumn('PO_reference', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder', function ($query) use($keyword) {
                            $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->orderColumn('PO_reference', function ($query, $order) {
                        return pleaseSortMe($query, $order, PurchaseOrder::select('purchase_orders.reference_no')
                            ->whereColumn('purchase_orders.id', 'goods_received_notes.purchase_order_id')
                        );
                    })
                    ->addColumn('PO_date', function($grn){
                        return date('Y-m-d', strtotime($grn->relPurchaseOrder->po_date));
                    })
                    ->filterColumn('PO_date', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder', function ($query) use($keyword) {
                            $query->where('po_date', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->filterColumn('PO_date', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder', function ($query) use($keyword) {
                            $query->where('po_date', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->addColumn('gate_in_reference', function($grn){
                        return '<div style="width: 100%">
                                    <div style="width: 90%;float: left;clear:right">
                                        <a href="javascript:void(0)" class="btn btn-link" onclick="showQEPODetails($(this))" data-src="'.route('pms.grn.grn-process.show',$grn->id).'" data-title="Gate In Details">'.$grn->reference_no.'</a>
                                    </div>
                                    <div style="width: 10%;float: left;clear:right">
                                        <a class="btn btn-primary btn-xs" href="'. url('pms/grn/gate-in-slip/'.$grn->purchase_order_id.'?grn='.$grn->id) .'" target="_blank" style="margin-top: 7.5px"><i class="la la-print"></i></a>
                                    </div>
                                </div>';
                    })
                    ->filterColumn('gate_in_reference', function ($query, $keyword) {
                        $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    })
                    ->orderColumn('gate_in_reference', function ($query, $order) {
                        return $query->orderBy('reference_no', $order);
                    })
                    ->addColumn('gate_in_qty', function($grn){
                        return $grn->relGoodsReceivedItems->sum('qty');
                    })
                    ->addColumn('return_qty', function($grn){
                        return $grn->relGoodsReceivedItems->sum('qty');
                    })
                    ->editColumn('received_status', function($grn){
                        if($grn->received_status == 'partial'){
                            return '<a class="btn btn-warning btn-xs">Partial Received</a>';
                        }elseif($grn->received_status == 'full'){
                            return '<a class="btn btn-success btn-xs">Full Received</a>';
                        }else{
                            return '<a class="btn btn-dark btn-xs">'.ucwords($grn->received_status).'</a>';
                        }
                    })
                    ->addColumn('options', function($grn){
                        $returned = PurchaseReturn::whereHas('relGoodsReceivedItems', function($query) use($grn){
                            return $query->where('goods_received_note_id', $grn->id);
                        })->where('status', 'return')->sum('return_qty');

                        $returnedCount = PurchaseReturn::whereHas('relGoodsReceivedItems', function($query) use($grn){
                            return $query->where('goods_received_note_id', $grn->id);
                        })->where('status', 'return')->count();
                        
                        $approved = PurchaseReturn::whereHas('relGoodsReceivedItems', function($query) use($grn){
                            return $query->where('goods_received_note_id', $grn->id);
                        })->where('status', 'return')->sum('received_qty');
                        $options = '';
                        if($returned > 0){
                            $options .= '<a href="'.route('pms.quality.ensure.return.single.list',$grn->id).'" class="btn btn-xs btn-info">Items ('.$returnedCount.')</a>';
                            $options .= '&nbsp;&nbsp;<a target="__blank" href="'.route('pms.quality.return.item.print',['id'=>$grn->id,'type'=>'return']).'" class="btn btn-xs btn-warning" title="Return List"><i class="las la-print"></i></a>';
                        }
                            
                        if($approved > 0){
                            $options .= '&nbsp;&nbsp;<a target="__blank" href="'.route('pms.quality.return.item.print',['id'=>$grn->id,'type'=>'return-approved-list']).'" class="btn btn-xs btn-success" title="Return Approved List"><i class="las la-print"></i></a>';
                        }
                        return $options;
                    })
                    ->rawColumns(['PO_reference', 'gate_in_reference', 'received_status', 'options'])
                    ->make(true);
            }

            return view('pms.backend.pages.quality.return-index', [
                'title' => "Quality Ensure Return List",
                'headerColumns' => $this->returnListHeaderColumns()
            ]);
        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
    * Show the Grn Wise Single Return Item List.
    *
    * @return \Illuminate\Http\Response
    */

    public function grnWiseReturnItemList($id)
    {
        try{

            $title="Quality Ensure Return List";
            $grn = GoodsReceivedNote::find($id);
            $goodsReceivedItemId = GoodsReceivedItem::where('goods_received_note_id',$id)->where('quality_ensure','return')->pluck('id')->all();
            $returnList = PurchaseReturn::whereIn('goods_received_item_id',$goodsReceivedItemId)->orderBy('id','desc')->paginate(30);

            return view('pms.backend.pages.quality.return-list',compact('title','returnList', 'grn'));
        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function returnChangeListHeaderColumns($value='')
    {
        return array(
            ['SL', 'SL'],
            ['PO_reference', 'PO_reference', 'text-center'],
            ['PO_date', 'PO_date', 'text-center'],
            ['challan', 'challan', 'text-center'],
            ['gate_in_reference', 'gate_in_reference', 'text-center'],
            ['gate_in_qty', 'gate_in_qty', 'text-right'],
            ['return_qty', 'return_qty', 'text-right'],
            ['received_status', 'received_status', 'text-center'],
            ['options', 'options','text-center'],
        );
    }

    /**
    * Show the Grn Wise Return Change List.
    *
    * @return \Illuminate\Http\Response
    */

    public function returnChangeList()
    {
        try{
            if (request()->ajax()) {
                $userUnits = auth()->user()->priorities->pluck('hr_unit_id')->toArray();
                $userDepartments = auth()->user()->priorities->pluck('hr_department_id')->toArray();
                $items = GoodsReceivedNote::with([
                    'relPurchaseOrder.relPurchaseOrderItems',
                    'relPurchaseOrder.purchaseOrderRequisitions',
                    'relGoodsReceivedItems'
                ])
                ->whereHas('relPurchaseOrder', function($query){
                    return $query->where('is_send', 'yes');
                })
                ->when(isset(auth()->user()->employee->as_unit_id), function($query) use($userUnits){
                    return $query->whereHas('relPurchaseOrder', function($query) use($userUnits){
                        return $query->where('hr_unit_id', $userUnits);
                    });
                })
                ->when(auth()->user()->hasRole('Department-Head'), function($query) use($userDepartments){
                    return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions', function($query) use($userDepartments){
                        return $query->where('hr_department_id', $userDepartments);
                    });
                })
                ->when(!auth()->user()->hasRole('Department-Head'), function($query){
                    return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions', function($query){
                        return $query->where('hr_department_id', 0);
                    });
                })
                ->whereHas('relGoodsReceivedItems', function($query){
                    return $query->where('quality_ensure','return-change');
                })
                ->when(!datatableOrdering(), function($query){
                    return $query->orderby('received_date', 'desc');
                });

                return DataTables::of($items)
                    ->addIndexColumn()
                    ->addColumn('PO_reference', function($grn){
                        return '<a href="javascript:void(0)" class="btn btn-link" onclick="purchaseOrderDetails($(this))" data-src="'.route('pms.purchase.order-list.show', $grn->relPurchaseOrder->id).'" data-title="Purchase Order Details">'.$grn->relPurchaseOrder->reference_no.'
                                        </a>';
                    })
                    ->filterColumn('PO_reference', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder', function ($query) use($keyword) {
                            $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->orderColumn('PO_reference', function ($query, $order) {
                        return pleaseSortMe($query, $order, PurchaseOrder::select('purchase_orders.reference_no')
                            ->whereColumn('purchase_orders.id', 'goods_received_notes.purchase_order_id')
                        );
                    })
                    ->addColumn('PO_date', function($grn){
                        return date('Y-m-d', strtotime($grn->relPurchaseOrder->po_date));
                    })
                    ->filterColumn('PO_date', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder', function ($query) use($keyword) {
                            $query->where('po_date', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->orderColumn('PO_reference', function ($query, $order) {
                        return pleaseSortMe($query, $order, PurchaseOrder::select('purchase_orders.po_date')
                            ->whereColumn('purchase_orders.id', 'goods_received_notes.purchase_order_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('gate_in_reference', function($grn){
                        return '<div style="width: 100%">
                                    <div style="width: 90%;float: left;clear:right">
                                        <a href="javascript:void(0)" class="btn btn-link" onclick="showQEPODetails($(this))" data-src="'.route('pms.grn.grn-process.show',$grn->id).'" data-title="Gate In Details">'.$grn->reference_no.'</a>
                                    </div>
                                    <div style="width: 10%;float: left;clear:right">
                                        <a class="btn btn-primary btn-xs" href="'. url('pms/grn/gate-in-slip/'.$grn->purchase_order_id.'?grn='.$grn->id) .'" target="_blank" style="margin-top: 7.5px"><i class="la la-print"></i></a>
                                    </div>
                                </div>';
                    })
                    ->filterColumn('gate_in_reference', function ($query, $keyword) {
                        $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    })
                    ->orderColumn('gate_in_reference', function ($query, $order) {
                        return $query->orderBy('reference_no', $order);
                    })
                    ->addColumn('gate_in_qty', function($grn){
                        return $grn->relGoodsReceivedItems->sum('qty');
                    })
                    ->addColumn('return_qty', function($grn){
                        return $grn->relGoodsReceivedItems->where('quality_ensure','return-change')->sum('qty')-$grn->relGoodsReceivedItems->where('quality_ensure','return-change')->sum('received_qty');
                    })
                    ->editColumn('received_status', function($grn){
                        if($grn->received_status == 'partial'){
                            return '<a class="btn btn-warning btn-xs">Partial Received</a>';
                        }elseif($grn->received_status == 'full'){
                            return '<a class="btn btn-success btn-xs">Full Received</a>';
                        }else{
                            return '<a class="btn btn-dark btn-xs">'.ucwords($grn->received_status).'</a>';
                        }
                    })
                    ->addColumn('options', function($grn){
                        $returned = PurchaseReturn::whereHas('relGoodsReceivedItems', function($query) use($grn){
                            return $query->where('goods_received_note_id', $grn->id);
                        })->where('status', 'return-change')->sum('return_qty');

                        $returnedCount = PurchaseReturn::whereHas('relGoodsReceivedItems', function($query) use($grn){
                            return $query->where('goods_received_note_id', $grn->id);
                        })->where('status', 'return-change')->count();
                        
                        $approved = PurchaseReturn::whereHas('relGoodsReceivedItems', function($query) use($grn){
                            return $query->where('goods_received_note_id', $grn->id);
                        })->where('status', 'return-change')->sum('received_qty');
                        $count = $grn->relGoodsReceivedItems()->where('quality_ensure','return-change')->count();

                        $options = '';
                        if(auth()->user()->hasPermissionTo('quality-ensure-return-change-received-list')){
                            if($count > 0){
                                $options .= '<a href="'.route('pms.quality.ensure.return.change.single.list',$grn->id).'" class="btn btn-xs btn-info">'.__('Items').' ('.$count.')</a>';
                            }
                        }

                        if($returned > 0){
                            $options .= '&nbsp;&nbsp;<a target="__blank" href="'.route('pms.quality.return.replace.item.print',['id'=>$grn->id,'type'=>'return-change-list']).'" title="Return Replace List" class="btn btn-xs btn-warning"><i class="las la-print"></i></a>';
                        }
                        

                        if($approved > 0){
                            $options .= '&nbsp;&nbsp;<a target="__blank" href="'.route('pms.quality.return.replace.item.print',['id'=>$grn->id,'type'=>'return-change']).'" title="Return Replace Approved List" class="btn btn-xs btn-success"><i class="las la-print"></i></a>';
                        }
                        
                        return $options;
                    })
                    ->rawColumns(['PO_reference', 'gate_in_reference', 'received_status', 'options'])
                    ->make(true);
            }

            return view('pms.backend.pages.quality.return-change-index', [
                'title' => "Quality Ensure Return Replace List",
                'headerColumns' => $this->returnChangeListHeaderColumns(),
            ]);

        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
    * Show the Grn Wise Return Item List.
    *
    * @return \Illuminate\Http\Response
    */
    public function grnWiseReturnChangeItemList($id)
    {
        try{

            $title="Quality Ensure Return Replace List";

            $changed = PurchaseReturn::whereHas('relGoodsReceivedItems', function($query) use($id){
                return $query->where('goods_received_note_id', $id);
            })->where('status', 'return-change')->get();

            return view('pms.backend.pages.quality.return-change-list',compact('title','changed'));

        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function approvedItemPrint($id,$type)
    {
         try{

            $title="Quality Ensure Approved Print View";

            $quotation=GoodsReceivedNote::findOrFail($id);

            $goodsReceivedItemId = GoodsReceivedItem::where('goods_received_note_id',$id)->where('quality_ensure',$type)->pluck('id')->all();

            $approval_list = GoodsReceivedItemStockIn::whereIn('goods_received_item_id',$goodsReceivedItemId)->get();

            return viewMPDF('pms.backend.pages.quality.approved-item-print-view-pdf', [
                'title' => $title,
                'approval_list' => $approval_list,
                'quotation' => $quotation
            ], $title, $title);
            
            return view('pms.backend.pages.quality.approved-item-print-view',compact('title','approval_list','quotation'));

        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function returnItemPrintView($id,$type)
    {
         try{

            $title="Return Items";

            $quotation = GoodsReceivedNote::findOrFail($id);

            $goodsReceivedItemId = GoodsReceivedItem::where('goods_received_note_id',$id)->where('quality_ensure','return')->pluck('id')->all();

            $code = PurchaseReturn::whereHas('relGoodsReceivedItems', function($query) use($id){
                return $query->where('goods_received_note_id', $id);
            })->where('status', 'return')->first()->code;


            if ($type=='return-approved-list') {
                $approved = GoodsReceivedItemStockIn::whereIn('goods_received_item_id',$goodsReceivedItemId)->get();
                
                $data = [
                    'title' => $title,
                    'quotation' => $quotation,
                    'approved' => $approved,
                    'code' => $code,
                ];
                return viewMPDF('pms.backend.pages.quality.return-approved-item-print-view-pdf', $data, $title, $title);

                //return view('pms.backend.pages.quality.return-approved-item-print-view', $data);
            }else{
                $returned = PurchaseReturn::whereIn('goods_received_item_id',$goodsReceivedItemId)->where('status', 'return')->get();

                $data = [
                    'title' => $title,
                    'quotation' => $quotation,
                    'returned' => $returned,
                    'code' => $code,
                ];
                return viewMPDF('pms.backend.pages.quality.return-item-print-view-pdf', $data, $title, $title);

                //return view('pms.backend.pages.quality.return-item-print-view', $data);
            }
            

        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function returnReplaceItemPrintView($id,$type)
    {
         try{

            $title="Return Replace Approved List";

            $quotation=GoodsReceivedNote::findOrFail($id);

            $returnChangeList = GoodsReceivedItem::where('goods_received_note_id',$id)
            ->where('quality_ensure','return-change')->get();

            $code = PurchaseReturn::whereHas('relGoodsReceivedItems', function($query) use($id){
                return $query->where('goods_received_note_id', $id);
            })->where('status', 'return-change')->first()->code;

            if ($type=='return-change-list') {
                $data = [
                    'title' => $title,
                    'quotation' => $quotation,
                    'returnChangeList' => $returnChangeList,
                    'code' => $code,
                ];
                return viewMPDF('pms.backend.pages.quality.return-replace-return-item-print-view-pdf', $data, $title, $title);
                
                //return view('pms.backend.pages.quality.return-replace-return-item-print-view',compact('title','returnChangeList','quotation', 'code'));
            }else{

                return view('pms.backend.pages.quality.return-replace-item-print-view',compact('title','returnChangeList','quotation', 'code'));
            }

        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }
    
    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function returnChangeReceived(Request $request)
    {    

        try{

            DB::beginTransaction();
            foreach($request->id as $key=>$id){

                $model=GoodsReceivedItem::where(['id'=>$id,'quality_ensure'=>'return-change'])->first();
                $product=Product::findOrFail($model->product_id);
                $prefix='QE-RRP-'.date('y', strtotime(date('Y-m-d'))).'-MBM-';
                $refNo=uniqueCode(18,$prefix,'goods_received_items_stock_in','id');

                if(isset($model->id) && $request->status==='received'){
                    if (($model->qty-$model->received_qty) < $request->received_qty[$key]) {
                        return $this->backWithWarning('Your return qty is greater then maximum qty');
                    }

                    $totalReceivedQty = $model->received_qty+$request->received_qty[$key];

                    $qualityEnsure=($totalReceivedQty==$model->qty)?'approved':'return-change';

                    $update=$model->update([
                        'quality_ensure' => $qualityEnsure,
                        'received_qty' =>  $totalReceivedQty,
                        'updated_at' => date('Y-m-d H:i:s'),
                        'updated_by' => Auth::user()->id
                    ]);

                    if ($update) {
                        PurchaseReturn::create([
                            'goods_received_item_id'=>$model->id,
                            'return_note' => $request->return_note,
                            'return_qty' => $request->received_qty[$key],
                            'status' => $request->status,
                        ]);

                        $receivedQty=$request->received_qty[$key];
                        $subtotal=$receivedQty*$model->unit_amount;
                        $discountAmount= ($model->discount_percentage * $subtotal)/100;
                        $vatAmount= ($model->vat_percentage * $subtotal)/100;

                        $GRItemsStockIn = new GoodsReceivedItemStockIn();
                        $GRItemsStockIn->purchase_order_id = $model->relGoodsReceivedNote->purchase_order_id;
                        $GRItemsStockIn->reference_no = $refNo;
                        $GRItemsStockIn->goods_received_item_id = $model->id;
                        $GRItemsStockIn->unit_amount = $model->unit_amount;
                        $GRItemsStockIn->received_qty = $receivedQty;
                        $GRItemsStockIn->sub_total = $subtotal;
                        $GRItemsStockIn->discount_percentage = $model->discount_percentage;
                        $GRItemsStockIn->discount = $discountAmount;
                        $GRItemsStockIn->vat_percentage = $model->vat_percentage;
                        $GRItemsStockIn->vat = $vatAmount;
                        $GRItemsStockIn->total_amount = ($subtotal-$discountAmount)+$vatAmount;
                        $GRItemsStockIn->is_grn_complete = 'no';
                        $GRItemsStockIn->save();
                    }
                }
            }

            $message = '<span class="notification-links" data-src="'.route('pms.grn.grn-process.show',$model->relGoodsReceivedNote->id).'?view" data-title="Gate-In Details">Reference No:'.$model->relGoodsReceivedNote->reference_no.'. Waiting for the GRN.</span>';

            CreateOrUpdateNotification('',getManagerInfo('Store-Manager',$model->relGoodsReceivedNote->relPurchaseOrder->hr_unit_id), $message,'unread','send-to-store','');

            CreateOrUpdateNotification('',getManagerInfo('Purchase-Department'),$message,'unread','sent-to-purchase','');

            DB::commit();
            return $this->redirectBackWithSuccess('Successfully Updated this Item Quality Status!!','pms.quality.ensure.return.change.list');

        }catch (\Throwable $th){
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
    }
}
