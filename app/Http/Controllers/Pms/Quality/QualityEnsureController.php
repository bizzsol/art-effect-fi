<?php
bolt_decrypt( __FILE__ , 'LZBak4'); return 0;
##!!!##