<?php
bolt_decrypt( __FILE__ , 'H2on4W'); return 0;
##!!!##