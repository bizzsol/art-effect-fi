<?php
bolt_decrypt( __FILE__ , 'pDaf1K'); return 0;
##!!!##