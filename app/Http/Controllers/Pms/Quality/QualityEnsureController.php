<?php
bolt_decrypt( __FILE__ , 'FUKgSh'); return 0;
##!!!##