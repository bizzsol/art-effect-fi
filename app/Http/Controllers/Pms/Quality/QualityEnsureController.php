<?php
bolt_decrypt( __FILE__ , 'Zco50Z'); return 0;
##!!!##