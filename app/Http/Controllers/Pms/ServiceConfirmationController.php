<?php
bolt_decrypt( __FILE__ , 'v5dCXA'); return 0;
##!!!##