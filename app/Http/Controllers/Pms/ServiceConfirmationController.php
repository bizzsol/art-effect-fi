<?php
bolt_decrypt( __FILE__ , 'aI3h6g'); return 0;
##!!!##