<?php
bolt_decrypt( __FILE__ , '7FDlef'); return 0;
##!!!##