<?php
bolt_decrypt( __FILE__ , '2xhLW3'); return 0;
##!!!##