<?php
bolt_decrypt( __FILE__ , 'tfZVF0'); return 0;
##!!!##

namespace App\Http\Controllers\Pms\Accounts;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\PmsModels\SupplierPayment;
use App\Models\PmsModels\SupplierLedgers;
use App\Models\PmsModels\Suppliers;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\Models\PmsModels\Purchase\PurchaseOrderAttachment;
use App\Models\PmsModels\Grn\GoodsReceivedItem;
use App\Models\PmsModels\Quotations;
use App\Models\PmsModels\Accounts\CostCentre;
use DB;
use Auth;
use App, DataTables;


class CashApprovalController extends Controller
{
    public function headerColumns($value='')
    {
        return array(
            ['SL', 'SL'], 
            ['po_date', 'po_date', 'text-center'],
            ['reference_no', 'reference_no', 'text-center'],
            ['supplier', 'supplier', 'text-left'], 
            ['quotation_ref_no', 'quotation_ref_no', 'text-center'],
            ['total_price', 'total_price', 'text-left'], 
            ['vat', 'vat', 'text-center'],
            ['gross_price', 'gross_price', 'text-center'],
            ['status', 'cash_status', 'text-center'],
            ['actions', 'actions', 'text-center action']
        );
    }
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        try {
            $title = "Purchase Order Cash Approval";
            $cash_status = request()->has('cash_status') ? request()->get('cash_status') : 'pending';
            $is_send = ($cash_status=='pending' || $cash_status=='halt')?'no':null;

            $purchaseOrder = PurchaseOrder::with([
                'relQuotation.relSuppliers',
                'relQuotation.exchangeRate.currency'
            ])
            // ->whereHas('relSupplierPayments',function ($query){
            //     $query->whereRaw('purchase_orders.id=supplier_payments.purchase_order_id');
            // })
            ->whereHas('relQuotation',function ($query){
                return $query->where('type','direct-purchase')->where('status','active')
                ->where('is_approved','approved')->where('is_po_generate','yes');
            })
            ->when(!empty($cash_status), function($query) use($cash_status){
                return $query->where('cash_status', $cash_status);
            })
            ->when(!empty($is_send), function($query) use($is_send){
                return $query->where('is_send', $is_send);
            })->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });


            if (request()->ajax()) {
                $options = [
                    'po-cash-permission' => auth()->user()->hasPermissionTo('po-cash-permission')
                ];

                return Datatables::of($purchaseOrder)
                ->addIndexColumn()
                ->editColumn('po_date', function($values){
                    return date('Y-m-d', strtotime($values->po_date));
                })
                ->filterColumn('po_date', function ($query, $keyword) {
                    $query->where('po_date', 'LIKE', '%'.$keyword.'%');
                })
                ->orderColumn('po_date', function ($query, $order) {
                    return $query->orderBy('po_date', $order);
                })
                ->editColumn('reference_no', function($values){
                    return  '<a href="javascript:void(0)" onclick="purchaseOrderDetails($(this))" class="btn btn-link" data-src="'.route('pms.purchase.order-list.show',$values->id).'">'.$values->reference_no.'</a>';
                })
                ->addColumn('supplier', function($values){
                    return  isset($values->relQuotation->relSuppliers) ? (isset($values->relQuotation->relSuppliers->name) ? $values->relQuotation->relSuppliers->name.' ('.$values->relQuotation->relSuppliers->code.')' : '') : '';
                })
                ->filterColumn('supplier', function ($query, $keyword) {
                    return $query->whereHas('relQuotation.relSuppliers', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%')
                        ->orWhere('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('supplier', function ($query, $order) {
                    return pleaseSortMe($query, $order, Quotations::select('suppliers.name')
                        ->join('suppliers', 'suppliers.id', '=', 'quotations.supplier_id')
                        ->whereColumn('quotations.id', 'purchase_orders.quotation_id')
                        ->take(1)
                    );
                })
                ->addColumn('quotation_ref_no', function($values){
                    return isset($values->relQuotation->reference_no)?$values->relQuotation->reference_no:'';
                })
                ->filterColumn('quotation_ref_no', function ($query, $keyword) {
                    return $query->whereHas('relQuotation', function ($query) use($keyword) {
                        $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('quotation_ref_no', function ($query, $order) {
                    return pleaseSortMe($query, $order, Quotations::select('quotations.reference_no')
                        ->whereColumn('quotations.id', 'purchase_orders.quotation_id')
                        ->take(1)
                    );
                })
                ->editColumn('total_price', function($values){
                    return ((isset($values->relQuotation->exchangeRate->currency->symbol)?$values->relQuotation->exchangeRate->currency->symbol:'').' '.systemMoneyFormat($values->total_price));
                })
                ->editColumn('vat', function($values){
                    return ((isset($values->relQuotation->exchangeRate->currency->symbol)?$values->relQuotation->exchangeRate->currency->symbol:'').' '.systemMoneyFormat($values->vat));
                })
                ->editColumn('gross_price', function($values){
                    return ((isset($values->relQuotation->exchangeRate->currency->symbol)?$values->relQuotation->exchangeRate->currency->symbol:'') .' '.systemMoneyFormat($values->gross_price));
                })
                ->addColumn('status', function($values){
                    $status = '';
                    if ($values->cash_status=='approved') {
                        $status .='<button title="Approved" class="btn btn-xs btn-primary mr-1"><i class="las la-check"></i></button>';
                        
                    }elseif($values->cash_status=='pending'){
                        $status .='<button title="Pending"  class="btn btn-xs btn-warning mr-1"><i class="las la-clock"></i></button>';
                    }else{
                        $status .='<button  title="Halt" class="btn btn-xs btn-danger mr-1"><i class="las la-ban"></i></button>';
                    }
                    $status .='<a target="_blank" href="'.route('pms.billing-audit.po.invoice.print',$values->id).'" class="btn btn-xs btn-success"><i class="las la-print"></i></a>';
                    return $status;
                })
                ->addColumn('actions', function($values) use($options){
                    $actions = '';
                    if ($options['po-cash-permission']) {
                        if ($values->cash_status!='approved') {
                            $actions.='<div class="btn-group"><button class="btn dropdown-toggle" data-toggle="dropdown"><span id="statusName'.$values->id.'">'. ucfirst($values->cash_status).'</span></button><ul class="dropdown-menu">';
                            if (stringStatusArray()) {
                                foreach(stringStatusArray() as $key => $status){
                                    $actions .='<li><a href="javascript:void(0)" class="updateCashStatus" data-id="'.$values->id.'" data-status="'.$key.'" title="Click Here To '.$status.'" onClick="updateCashStatus($(this))"> '. $status.'</a></li>';
                                }
                            }
                            $actions.='</ul></div>';
                        }
                    }
                    return $actions;
                })
                ->rawColumns(['reference_no','supplier','total_price','vat','gross_price','status','actions'])
                ->make(true);
            }

            return view('pms.backend.pages.cash-approval.po-cash-approval', [
                'title' => $title,
                'cash_status' => $cash_status,
                'headerColumns' => $this->headerColumns()
            ]);

        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        try{
            $purchaseOrder = PurchaseOrder::findOrFail(request()->get('purchase_order_id'));
            return view('pms.backend.pages.cash-approval.approval', [
                'purchase_order_id' => request()->get('purchase_order_id'),
                'po_cash_status' => request()->get('po_cash_status'),
                'purchaseOrder' => $purchaseOrder,
                'costCentres' => CostCentre::where([
                    'hr_unit_id' => $purchaseOrder->hr_unit_id,
                    'hr_department_id' => $purchaseOrder->purchaseOrderRequisitions[0]->requisition->relUsersList->employee->as_department_id,
                ])->get(),
            ]);
        } catch (\Throwable $th){
            return $th->getMessage();
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $is_send = ($request->cash_status=='pending' || $request->cash_status=='halt')?'no':'yes';

        $purchaseOrder = PurchaseOrder::whereHas('relQuotation',function ($query){
            $query->where('type','direct-purchase')->where('status','active')
            ->where('is_approved','approved')->where('is_po_generate','yes');
        })
        ->where('id',$request->id)
        ->first();

        DB::beginTransaction();
        try {
            if ($purchaseOrder) {
                $purchaseOrder->update([
                    'is_send'=>$is_send,
                    'cash_status' => $request->cash_status,
                    'cash_note' => $request->cash_note,
                    'cost_centre_id' => isset($request->cost_centre_id) ? $request->cost_centre_id : $purchaseOrder->cost_centre_id,
                ]); 

                // $message = '<span class="notification-links" data-src="'.route('pms.quotation.quotations.cs.proposal.details',$purchaseOrder->id).'" data-title="Purchase Order Details">Reference No:'.$purchaseOrder->reference_no.'.Cash '.ucfirst($request->cash_status).' By Accounts.</span>';

                // CreateOrUpdateNotification('',$message,'unread','sent-to-purchase','',getManagerInfo('Purchase-Department'));

                DB::commit();
                return response()->json([
                    'success' => true,
                    'message' => "Cash Approval action has been done successfully."
                ]);
            }
            return response()->json([
                'success' => false,
                'message' => 'Sorry!! Purchase Order Not Found!'
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}
