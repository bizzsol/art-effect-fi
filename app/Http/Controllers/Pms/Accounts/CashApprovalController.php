<?php
bolt_decrypt( __FILE__ , 'pEG5xB'); return 0;
##!!!##