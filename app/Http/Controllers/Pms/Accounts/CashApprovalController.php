<?php
bolt_decrypt( __FILE__ , 'Gk4uEX'); return 0;
##!!!##