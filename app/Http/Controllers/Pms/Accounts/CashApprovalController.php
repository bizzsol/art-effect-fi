<?php
bolt_decrypt( __FILE__ , 'VAmGFg'); return 0;
##!!!##