<?php
bolt_decrypt( __FILE__ , 'reWl15'); return 0;
##!!!##

namespace App\Http\Controllers\Pms\Accounts;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\PmsModels\Accounts\Company;
use App\Models\PmsModels\SupplierPayment;
use App\Models\PmsModels\SupplierLedgers;
use App\Models\PmsModels\Suppliers;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use DB;
use Auth;
use App;
use DataTables;

class SupplierLedgerController extends Controller
{
    /**
     * Set global data table headers.
     *
     * @return headerColumns
     */

    public function headerColumns($value='')
    {
        $rows =  array(
            ['SL', 'SL'],
            ['supplier', 'supplier', 'text-center'],
            ['date', 'date', 'text-center'],
            ['type', 'type', 'text-center'],
            ['payment_details', 'payment_details', 'text-left'],
            ['notes', 'notes', 'text-left'], 
            ['opening_balance', 'opening_balance', 'text-right'],
            ['debit', 'debit', 'text-right'], 
            ['credit', 'credit', 'text-right'],
            ['closing_balance', 'closing_balance', 'text-right']
        );
        return $rows;
    }

     /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        try {
            if(request()->has('get-suppliers')){
                return response()->json(
                    Suppliers::where('status', 'Active')
                    ->where(function($query){
                        return $query->whereHas('relPayments.relPurchaseOrder.Unit', function($query){
                            return $query->where('company_id', request()->get('company_id'));
                        })
                        ->orWhereHas('supplierLedgers.entry.items.costCentre.profitCentre', function($query){
                            return $query->where('company_id', request()->get('company_id'));
                        });
                    })
                    ->get([
                        'id', 'name', 'code'
                    ])
                );
            }

            $from_date = request()->has('from_date') && !empty(request()->get('from_date')) ? date("Y-m-d", strtotime(request()->get('from_date'))) : date("Y-m-d", strtotime(date('Y-m-01')));
            $to_date = request()->has('to_date') && !empty(request()->get('to_date')) ? date("Y-m-d", strtotime(request()->get('to_date'))) : date("Y-m-d", strtotime(date('Y-m-t')));
            $company_id = request()->has('company_id') ? request()->get('company_id') : null;
            $supplier_id = request()->has('supplier_id') ? request()->get('supplier_id') : null;
            $selected_supplier = Suppliers::find($supplier_id);

            if (request()->ajax()) {
                return Datatables::of(
                    SupplierLedgers::where('supplier_id', $supplier_id)
                    ->where(function($query){
                        return $query->whereHas('relSupplierPayment.relPurchaseOrder.Unit', function($query){
                            return $query->where('company_id', request()->get('company_id'));
                        })
                        ->orWhereHas('entry.items.costCentre.profitCentre', function($query){
                            return $query->where('company_id', request()->get('company_id'));
                        });
                    })
                    ->whereBetween('date', [$from_date, $to_date])
                )
                ->addIndexColumn()
                ->addColumn('supplier', function($values){
                    return $values->supplier->name.' ('.$values->supplier->code.')';
                })
                ->filterColumn('supplier', function ($query, $keyword) {
                    return $query->whereHas('supplier', function ($query) use ($keyword) {
                        $query->where('name', 'LIKE', '%' . $keyword . '%')
                              ->orWhere('code', 'LIKE', '%' . $keyword . '%');
                    });
                })
                ->orderColumn('supplier', function ($query, $order) {
                    return pleaseSortMe($query, $order, Suppliers::select('suppliers.name')
                        ->whereColumn('suppliers.id', 'supplier_ledgers.supplier_id')
                        ->take(1)
                    );
                })
                ->editColumn('date', function($values){
                    return date('Y-m-d', strtotime($values->date));
                })
                ->addColumn('type', function($values){
                    return isset(paymentTypes()[$values->payment_type]) ? paymentTypes()[$values->payment_type]['name'] : '';
                })
                ->filterColumn('type', function ($query, $keyword) {
                    return $query->where('payment_type', 'LIKE', '%'.$keyword.'%');
                })
                ->editColumn('opening_balance', function($values){
                    return systemMoneyFormat($values->opening_balance);
                })
                ->editColumn('debit', function($values){
                    return systemMoneyFormat($values->debit);
                })
                ->editColumn('credit', function($values){
                    return systemMoneyFormat($values->credit);
                })
                ->editColumn('closing_balance', function($values){
                    return systemMoneyFormat($values->closing_balance);
                })
                ->rawColumns(['date','opening_balance','debit','credit','closing_balance'])
                ->make(true);
            }

            $data = [
                'title' => 'Supplier Ledger',
                'companies' => Company::has('profitCentres.costCentres')
                ->whereHas('users', function($query){
                    return $query->where('user_id', auth()->user()->id);
                })
                ->get(),
                'from_date' => $from_date,
                'to_date' => $to_date,
                'company_id' => $company_id,
                'supplier_id' => $supplier_id,
                'selected_supplier' => $selected_supplier,
                'headerColumns' => $this->headerColumns()
            ];

            return view('pms.backend.pages.accounts.supplier-ledger-list', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }
}
