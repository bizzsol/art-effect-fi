<?php
bolt_decrypt( __FILE__ , 'RKZYk0'); return 0;
##!!!##