<?php
bolt_decrypt( __FILE__ , 'hYOiI5'); return 0;
##!!!##