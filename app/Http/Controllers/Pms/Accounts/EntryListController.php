<?php
bolt_decrypt( __FILE__ , 'gK5dg0'); return 0;
##!!!##