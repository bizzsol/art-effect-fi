<?php
bolt_decrypt( __FILE__ , 'e1L6ze'); return 0;
##!!!##