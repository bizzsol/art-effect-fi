<?php
bolt_decrypt( __FILE__ , 'UKJhJO'); return 0;
##!!!##