<?php
bolt_decrypt( __FILE__ , 'PuXCDD'); return 0;
##!!!##