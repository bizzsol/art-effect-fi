<?php
bolt_decrypt( __FILE__ , 'XCBqq9'); return 0;
##!!!##