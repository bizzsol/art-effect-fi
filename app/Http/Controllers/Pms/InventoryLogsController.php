<?php
bolt_decrypt( __FILE__ , 'Qj1pQS'); return 0;
##!!!##Cm5hbWVzcGFjZSBBcHBcSHR0cFxDb250cm9sbGVyc1xQbXM7Cgp1c2UgQXBwXEh0dHBcQ29udHJvbGxlcnNcQ29udHJvbGxlcjsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXEludmVudG9yeU1vZGVsc1xJbnZlbnRvcnlMb2dzOwp1c2UgSWxsdW1pbmF0ZVxIdHRwXFJlcXVlc3Q7CnVzZSBJbGx1bWluYXRlXFN1cHBvcnRcRmFjYWRlc1xBdXRoOwp1c2UgREIsVmFsaWRhdG9yLCBTdHIsIERhdGFUYWJsZXM7CgpjbGFzcyBJbnZlbnRvcnlMb2dzQ29udHJvbGxlciBleHRlbmRzIENvbnRyb2xsZXIKewogICAgcHVibGljIGZ1bmN0aW9uIGhlYWRlckNvbHVtbnMoJHZhbHVlPScnKQogICAgewogICAgICAgIHJldHVybiBhcnJheSgKICAgICAgICAgICAgWydTTCcsICdTTCcsICd0ZXh0LWNlbnRlciddLAogICAgICAgICAgICBbJ2NhdGVnb3J5JywgJ2NhdGVnb3J5JywgJ3RleHQtbGVmdCddLAogICAgICAgICAgICBbJ3Byb2R1Y3QnLCAncHJvZHVjdCcsICd0ZXh0LWxlZnQnXSwKICAgICAgICAgICAgWyd3YXJlaG91c2VzJywgJ3dhcmVob3VzZXMnLCAndGV4dC1sZWZ0J10sCiAgICAgICAgICAgIFsndW5pdF9wcmljZScsICd1bml0X3ByaWNlJywgJ3RleHQtcmlnaHQnXSwKICAgICAgICAgICAgWydxdHknLCAncXR5JywgJ3RleHQtY2VudGVyJ10sCiAgICAgICAgICAgIFsndG90YWxfcHJpY2UnLCAndG90YWxfcHJpY2UnLCAndGV4dC1yaWdodCddLAogICAgICAgICAgICBbJ3JlZmVyZW5jZScsICdyZWZlcmVuY2UnLCAndGV4dC1sZWZ0J10sCiAgICAgICAgICAgIFsndHlwZScsICd0eXBlJywgJ3RleHQtY2VudGVyJ10sCiAgICAgICAgKTsKICAgIH0KCiAgICAvKioKICAgICAqIERpc3BsYXkgYSBsaXN0aW5nIG9mIHRoZSByZXNvdXJjZS4KICAgICAqCiAgICAgKiBAcmV0dXJuIFxJbGx1bWluYXRlXEh0dHBcUmVzcG9uc2UKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KCkKICAgIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBpZiAocmVxdWVzdCgpLT5hamF4KCkpIHsKICAgICAgICAgICAgICAgICR3YXJlaG91c2VfaWRzID0gQXV0aDo6dXNlcigpLT5yZWxVc2Vyc1dhcmVob3VzZS0+cGx1Y2soJ2lkJyktPmFsbCgpOwogICAgICAgICAgICAgICAgJGxvZ3MgPSBJbnZlbnRvcnlMb2dzOjp3aGVyZSgnc3RhdHVzJywnYWN0aXZlJykKICAgICAgICAgICAgICAgIC0+d2l0aChbCiAgICAgICAgICAgICAgICAgICAgJ3JlbENhdGVnb3J5JywgJ3JlbFByb2R1Y3QuYXR0cmlidXRlcy5hdHRyaWJ1dGVPcHRpb24uYXR0cmlidXRlJywgJ3JlbFdhcmVob3VzZScKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAtPndoZW4oaXNzZXQoYXV0aCgpLT51c2VyKCktPmVtcGxveWVlLT5hc191bml0X2lkKSwgZnVuY3Rpb24oJHF1ZXJ5KXsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnaHJfdW5pdF9pZCcsYXV0aCgpLT51c2VyKCktPmVtcGxveWVlLT5hc191bml0X2lkKTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAtPndoZW4oY291bnQoJHdhcmVob3VzZV9pZHMpPjAsIGZ1bmN0aW9uKCRxdWVyeSkgdXNlKCR3YXJlaG91c2VfaWRzKXsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZUluKCd3YXJlaG91c2VfaWQnLCR3YXJlaG91c2VfaWRzKTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIHJldHVybiBEYXRhVGFibGVzOjpvZigkbG9ncykKICAgICAgICAgICAgICAgICAgICAtPmFkZEluZGV4Q29sdW1uKCkKICAgICAgICAgICAgICAgICAgICAtPmFkZENvbHVtbignY2F0ZWdvcnknLCBmdW5jdGlvbigkbG9nKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzc2V0KCRsb2ctPnJlbENhdGVnb3J5LT5uYW1lKT8kbG9nLT5yZWxDYXRlZ29yeS0+bmFtZTonJzsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC0+ZmlsdGVyQ29sdW1uKCdjYXRlZ29yeScsIGZ1bmN0aW9uICgkcXVlcnksICRrZXl3b3JkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlSGFzKCdyZWxDYXRlZ29yeScsIGZ1bmN0aW9uICgkcXVlcnkpIHVzZSgka2V5d29yZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHF1ZXJ5LT53aGVyZSgnbmFtZScsICdMSUtFJywgJyUnLiRrZXl3b3JkLiclJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5hZGRDb2x1bW4oJ3Byb2R1Y3QnLCBmdW5jdGlvbigkbG9nKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzc2V0KCRsb2ctPnJlbFByb2R1Y3QtPm5hbWUpPyRsb2ctPnJlbFByb2R1Y3QtPm5hbWUuJyAnLmdldFByb2R1Y3RBdHRyaWJ1dGVzRmFzdGVyKCRsb2ctPnJlbFByb2R1Y3QpOicnOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5maWx0ZXJDb2x1bW4oJ3Byb2R1Y3QnLCBmdW5jdGlvbiAoJHF1ZXJ5LCAka2V5d29yZCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZUhhcygncmVsUHJvZHVjdCcsIGZ1bmN0aW9uICgkcXVlcnkpIHVzZSgka2V5d29yZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHF1ZXJ5LT53aGVyZSgnbmFtZScsICdMSUtFJywgJyUnLiRrZXl3b3JkLiclJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5hZGRDb2x1bW4oJ3dhcmVob3VzZXMnLCBmdW5jdGlvbigkbG9nKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzc2V0KCRsb2ctPnJlbFdhcmVob3VzZS0+bmFtZSk/JGxvZy0+cmVsV2FyZWhvdXNlLT5uYW1lOicnOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5maWx0ZXJDb2x1bW4oJ3dhcmVob3VzZXMnLCBmdW5jdGlvbiAoJHF1ZXJ5LCAka2V5d29yZCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZUhhcygncmVsV2FyZWhvdXNlJywgZnVuY3Rpb24gKCRxdWVyeSkgdXNlKCRrZXl3b3JkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcXVlcnktPndoZXJlKCduYW1lJywgJ0xJS0UnLCAnJScuJGtleXdvcmQuJyUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPmVkaXRDb2x1bW4oJ3VuaXRfcHJpY2UnLCBmdW5jdGlvbigkbG9nKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN5c3RlbU1vbmV5Rm9ybWF0KCRsb2ctPnVuaXRfcHJpY2UpOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5lZGl0Q29sdW1uKCd0b3RhbF9wcmljZScsIGZ1bmN0aW9uKCRsb2cpewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3lzdGVtTW9uZXlGb3JtYXQoJGxvZy0+dG90YWxfcHJpY2UpOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5lZGl0Q29sdW1uKCd0eXBlJywgZnVuY3Rpb24oJGxvZyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1Y3dvcmRzKCRsb2ctPnR5cGUpOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT50b0pzb24oKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHZpZXcoJ3Btcy5iYWNrZW5kLnBhZ2VzLmludmVudG9yeS5pbnZlbnRvcnktbG9ncy5pbmRleCcsIFsKICAgICAgICAgICAgICAgICd0aXRsZScgPT4gIkludmVudG9yeSBMb2dzIiwKICAgICAgICAgICAgICAgICdoZWFkZXJDb2x1bW5zJyA9PiAkdGhpcy0+aGVhZGVyQ29sdW1ucygpCiAgICAgICAgICAgIF0pOwogICAgICAgIH1jYXRjaCAoXFRocm93YWJsZSAkdGgpewogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmJhY2tXaXRoRXJyb3IoJHRoLT5nZXRNZXNzYWdlKCkpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFNob3cgdGhlIGZvcm0gZm9yIGNyZWF0aW5nIGEgbmV3IHJlc291cmNlLgogICAgICoKICAgICAqIEByZXR1cm4gXElsbHVtaW5hdGVcSHR0cFxSZXNwb25zZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gY3JlYXRlKCkKICAgIHsKICAgICAgICAvLwogICAgfQoKICAgIC8qKgogICAgICogU3RvcmUgYSBuZXdseSBjcmVhdGVkIHJlc291cmNlIGluIHN0b3JhZ2UuCiAgICAgKgogICAgICogQHBhcmFtICBcSWxsdW1pbmF0ZVxIdHRwXFJlcXVlc3QgICRyZXF1ZXN0CiAgICAgKiBAcmV0dXJuIFxJbGx1bWluYXRlXEh0dHBcUmVzcG9uc2UKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHN0b3JlKFJlcXVlc3QgJHJlcXVlc3QpCiAgICB7CiAgICAgICAgLy8KICAgIH0KCiAgICAvKioKICAgICAqIERpc3BsYXkgdGhlIHNwZWNpZmllZCByZXNvdXJjZS4KICAgICAqCiAgICAgKiBAcGFyYW0gIFxBcHBcTW9kZWxzXEludmVudG9yeUxvZ3MgICRpbnZlbnRvcnlMb2dzCiAgICAgKiBAcmV0dXJuIFxJbGx1bWluYXRlXEh0dHBcUmVzcG9uc2UKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHNob3coSW52ZW50b3J5TG9ncyAkaW52ZW50b3J5TG9ncykKICAgIHsKICAgICAgICAvLwogICAgfQoKICAgIC8qKgogICAgICogU2hvdyB0aGUgZm9ybSBmb3IgZWRpdGluZyB0aGUgc3BlY2lmaWVkIHJlc291cmNlLgogICAgICoKICAgICAqIEBwYXJhbSAgXEFwcFxNb2RlbHNcSW52ZW50b3J5TG9ncyAgJGludmVudG9yeUxvZ3MKICAgICAqIEByZXR1cm4gXElsbHVtaW5hdGVcSHR0cFxSZXNwb25zZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZWRpdChJbnZlbnRvcnlMb2dzICRpbnZlbnRvcnlMb2dzKQogICAgewogICAgICAgIC8vCiAgICB9CgogICAgLyoqCiAgICAgKiBVcGRhdGUgdGhlIHNwZWNpZmllZCByZXNvdXJjZSBpbiBzdG9yYWdlLgogICAgICoKICAgICAqIEBwYXJhbSAgXElsbHVtaW5hdGVcSHR0cFxSZXF1ZXN0ICAkcmVxdWVzdAogICAgICogQHBhcmFtICBcQXBwXE1vZGVsc1xJbnZlbnRvcnlMb2dzICAkaW52ZW50b3J5TG9ncwogICAgICogQHJldHVybiBcSWxsdW1pbmF0ZVxIdHRwXFJlc3BvbnNlCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiB1cGRhdGUoUmVxdWVzdCAkcmVxdWVzdCwgSW52ZW50b3J5TG9ncyAkaW52ZW50b3J5TG9ncykKICAgIHsKICAgICAgICAvLwogICAgfQoKICAgIC8qKgogICAgICogUmVtb3ZlIHRoZSBzcGVjaWZpZWQgcmVzb3VyY2UgZnJvbSBzdG9yYWdlLgogICAgICoKICAgICAqIEBwYXJhbSAgXEFwcFxNb2RlbHNcSW52ZW50b3J5TG9ncyAgJGludmVudG9yeUxvZ3MKICAgICAqIEByZXR1cm4gXElsbHVtaW5hdGVcSHR0cFxSZXNwb25zZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZGVzdHJveShJbnZlbnRvcnlMb2dzICRpbnZlbnRvcnlMb2dzKQogICAgewogICAgICAgIC8vCiAgICB9Cn0K