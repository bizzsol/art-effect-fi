<?php
bolt_decrypt( __FILE__ , 'OBZ9nV'); return 0;
##!!!##