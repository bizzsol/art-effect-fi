<?php
bolt_decrypt( __FILE__ , 'CQQLNy'); return 0;
##!!!##