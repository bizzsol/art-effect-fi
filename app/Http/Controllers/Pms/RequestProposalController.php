<?php
bolt_decrypt( __FILE__ , 'fYrS8D'); return 0;
##!!!##

namespace App\Http\Controllers\Pms;
use App\Http\Controllers\Controller;
use App\Mail\Pms\RequestForProposalToSupplierMail;
use App\Models\PmsModels\Category;
use App\Models\PmsModels\Product;
use App\Models\PmsModels\Requisition;
use App\Models\PmsModels\RequisitionItem;
use App\Models\PmsModels\RequisitionType;
use App\Models\PmsModels\Rfp\RequestProposal;
use App\Models\PmsModels\Rfp\RequestProposalDefineSupplier;
use App\Models\PmsModels\Rfp\RequestProposalDetails;
use App\Models\PmsModels\Quotations;
use App\Models\PmsModels\QuotationsItems;
use App\Models\PmsModels\Suppliers;
use App\Models\PmsModels\SupplierPaymentTerm;
use App\Models\PmsModels\RequestProposalTracking;
use App\Models\PmsModels\RequestProposalRequisitions;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\User;

use App\Models\PmsModels\Accounts\CurrencyType;

use Illuminate\Http\Request;
use App\Http\Requests;
use DB,Validator,Auth,View;
use Illuminate\Support\Facades\Mail;
use PDF, URL, DataTables;

class RequestProposalController extends Controller
{   
    public function headerColumns($value='')
    {
        return array(
            ['SL', 'SL'],
            ['reference_no', 'reference_no', 'text-center'],
            ['requisitions', 'requisitions', 'text-center'],
            ['products', 'products', 'text-center'],
            ['suppliers', 'suppliers', 'text-center'],
            ['requisition_date', 'request_date', 'text-center'],
            ['type', 'type', 'text-center'],
            ['created_by', 'created_by', 'text-center'], 
            ['actions', 'actions', 'text-center']
        );
    }
    
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        try {

            $title = 'RFP List';

            $proposals = RequestProposal::whereNotIn('quotation_generate_type',['complete'])
            ->select(['id'])
            ->withCount(['defineToSupplier', 'relQuotations'])
            ->get();

            $proposals = array_values(array_filter(array_map(function($proposal){
                if($proposal['define_to_supplier_count'] > $proposal['rel_quotations_count']){
                    return $proposal['id'];
                }
            }, collect($proposals)->toArray())));

            $requestProposals = RequestProposal::with([
                'defineToSupplier.supplier',
                'requestProposalDetails.product.attributes.attributeOption.attribute',
                'createdBy',
                'relQuotations',
                'requestProposalRequisition.relRequisition'
            ])
            ->whereIn('id', $proposals)
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('request_date', 'desc');
            });

            $options = [
                'quotation-generate' => auth()->user()->hasPermissionTo('quotation-generate'),
                'quotation-complete' => auth()->user()->hasPermissionTo('quotation-complete'),
            ];

             if (request()->ajax()) {
                return Datatables::of($requestProposals)
                ->addIndexColumn()
                ->addColumn('reference_no', function($requestProposal){
                    return '<a onclick="openModal('.$requestProposal->id.')" class="btn btn-link text-primary">'.$requestProposal->reference_no.'</a>';
                })
                ->filterColumn('reference_no', function ($query, $keyword) {
                    $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                })
                ->orderColumn('reference_no', function ($query, $order) {
                    return $query->orderBy('reference_no', $order);
                })

                ->addColumn('requisitions', function($requestProposal){
                    $requisitions = '';
                    
                    if($requestProposal->requestProposalRequisition->count() > 0){
                        foreach($requestProposal->requestProposalRequisition as $key => $requisition){
                            $requisitions .= ($key > 0 ? ', ' : '').'<a href="javascript:void(0)" data-src="'.route('pms.requisition.list.view.show',$requisition->relRequisition->id).'" class="text-primary requisition m-1 rounded showRequistionDetails" onclick="requistionDetails($(this))">'. $requisition->relRequisition->reference_no .'</a>';
                        }
                    }

                    return $requisitions;
                })
                ->filterColumn('requisitions', function ($query, $keyword) {
                    $query->whereHas('requestProposalRequisition.relRequisition', function($query) use($keyword){
                        return $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('requisitions', function ($query, $order) {
                    return pleaseSortMe($query, $order, RequestProposalRequisitions::select('requisitions.reference_no')
                        ->join('requisitions', 'requisitions.id', '=', 'request_proposal_requisitions.requisition_id')
                        ->whereColumn('request_proposal_requisitions.request_proposal_id', 'request_proposals.id')
                        ->take(1)
                    );
                })

                ->addColumn('products', function($requestProposal){
                    $products = '';
                    if($requestProposal->requestProposalDetails->count() > 0){
                        foreach($requestProposal->requestProposalDetails as $key => $product){
                            $products .= ($key > 0 ? ', ' : '').$product->product->name.' '.getProductAttributesFaster($product->product);
                        }
                    }

                    return $products;
                })
                ->filterColumn('products', function ($query, $keyword) {
                    return $query->where(function($query) use($keyword){
                        return $query->where(function($query) use($keyword){
                            return  $query->whereHas('requestProposalDetails.product', function($query) use($keyword){
                                return $query->where('name', 'LIKE', '%'.$keyword.'%');
                            });
                        })
                         ->orWhere(function($query) use($keyword){
                            return $query->whereHas('requestProposalDetails.product.attributes.attributeOption', function ($query) use($keyword) {
                                $query->where('name', 'LIKE', '%'.$keyword.'%');
                            })
                            ->orWhereHas('requestProposalDetails.product.attributes.attributeOption.attribute', function ($query) use($keyword) {
                                $query->where('name', 'LIKE', '%'.$keyword.'%');
                            });
                         });
                    });
                    
                })
                ->orderColumn('products', function ($query, $order) {
                    return pleaseSortMe($query, $order, RequestProposalDetails::select('products.name')
                        ->join('products', 'products.id', '=', 'request_proposal_details.product_id')
                        ->whereColumn('request_proposal_details.request_proposal_id', 'request_proposals.id')
                        ->take(1)
                    );
                })

                ->addColumn('suppliers', function($requestProposal){
                    $suppliers = '';
                    if($requestProposal->defineToSupplier->count() > 0){
                        foreach($requestProposal->defineToSupplier as $key => $supplier){
                            $suppliers .= ($key > 0 ? ', ' : '').$supplier->supplier->name.' ('.$supplier->supplier->code.')';
                        }
                    }
                    return $suppliers;
                })
                ->filterColumn('suppliers', function ($query, $keyword) {
                    $query->whereHas('defineToSupplier.supplier', function($query) use($keyword){
                        return $query->where('name', 'LIKE', '%'.$keyword.'%')
                                     ->orWhere('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('suppliers', function ($query, $order) {
                    return pleaseSortMe($query, $order, RequestProposalDefineSupplier::select('supplier.name')
                        ->join('suppliers', 'suppliers.id', '=', 'request_proposal_define_suppliers.supplier_id')
                        ->whereColumn('request_proposal_define_suppliers.request_proposal_id', 'request_proposals.id')
                        ->take(1)
                    );
                })

                ->editColumn('requisition_date', function($requestProposal){
                    return date('Y-m-d', strtotime($requestProposal->request_date));
                })
                ->filterColumn('requisition_date', function ($query, $keyword) {
                    $query->where('request_date', 'LIKE', '%'.$keyword.'%');
                })
                ->orderColumn('requisition_date', function ($query, $order) {
                    return $query->orderBy('request_date', $order);
                })
                ->addColumn('created_by', function($requestProposal){
                    return isset($requestProposal->createdBy->name)?$requestProposal->createdBy->name:'';
                })
                ->filterColumn('created_by', function ($query, $keyword) {
                    return $query->whereHas('createdBy', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('created_by', function ($query, $order) {
                    return pleaseSortMe($query, $order, User::select('name')
                        ->whereColumn('users.id', 'request_proposals.created_by')
                    );
                })
                ->addColumn('actions', function($requestProposal) use($options){
                    $actions='';
                    $actions.= '<div class="btn-group"><button class="btn dropdown-toggle" data-toggle="dropdown">
                    <span id="statusName"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-three-dots-vertical" viewBox="0 0 16 16"><path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"/></svg></span></button><ul class="dropdown-menu">';

                    if($options['quotation-generate']){
                        $actions.='<li><a target="_blank" href="'.route('pms.rfp.quotations.generate',$requestProposal->id).'"><i class="las la-plus"></i> Quotation Generate</a></li>';
                    }

                    if($requestProposal->relQuotations->count() > 0){
                        if($options['quotation-complete']){
                            $actions .='<li><a href="javascript:void(0)" onclick="completeQG($(this))" class="completeQG" data-src="'.route('pms.rfp.generate.complete').'" data-id='.$requestProposal->id.'><i class="las la-check-circle"></i> Complete</a></li>';
                        }
                    }
                    
                    // else{
                    //     $actions .='<li><a target="__blank" href="'.route('pms.rfp.request-proposal.edit',$requestProposal->id).'"><i class="las la-edit"></i> RFP Revise</a></li>';
                    // }

                    $actions.='<li><a target="_blank" href="'.route('pms.rfp.history',$requestProposal->id).'"><i class="las la-history"></i> RFP History</a></li>';

                    $actions.='</ul></div>';

                    return $actions;
                })
                ->rawColumns(['reference_no', 'requisitions', 'requisition_date','created_by', 'actions'])
                ->make(true);
            }

            return view('pms.backend.pages.rfp.index', [
                'title' =>$title,
                'headerColumns' => $this->headerColumns()
            ]);

        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function reqHeaderColumns($value='')
    {
        $row = array(
            ['SL', 'SL','','width:5%'], 
            ['reference_no', 'reference_no', 'text-center','width:20%'],
            ['requisition_date', 'requisition_date', 'text-center'],
            ['product_category', 'product_category', 'text-center'],
            ['unit', 'unit', 'text-center'], 
            ['department', 'department', 'text-center'],
            ['requisition_by', 'requisition_by', 'text-center'],  
            ['attachment', 'attachment', 'text-center'],  
            ['actions', 'actions', 'text-center','width:15%']
        );

        if(auth()->user()->hasRole('Employee') || auth()->user()->hasRole('Department-Head') || auth()->user()->hasRole('Purchase-Department')) {
            
        }else{
            unset($row[7]);
        }

        return $row;
    }

    public function requisitionIndex(){

        $title = 'RFP Requisition List';
        $from = request()->has('from') ? request()->get('from') : date('Y-m-01');
        $to = request()->has('to') ? request()->get('to') : date('Y-m-t');
        $category_id = request()->has('category_id') ? request()->get('category_id') : 0;
        $department_id = request()->has('department_id') ? request()->get('department_id') : 0;
        $requisition_by = request()->has('requisition_by') ? request()->get('requisition_by') : 0;

        $categories = Category::doesntHave('category')
        ->get();

        $departments = Requisition::join('users','users.id','=','requisitions.author_id')
        ->join('hr_as_basic_info','hr_as_basic_info.associate_id','=','users.associate_id')
        ->join('hr_department','hr_department.hr_department_id','=','hr_as_basic_info.as_department_id')
        ->groupBy('hr_department.hr_department_id')
        ->where(function($query){
            return $query->where([
                'status'=>1,
                'approved_id'=>1,
                'is_send_to_rfp'=>'yes',
                'delivery_status'=>'processing',
                'is_po_generate'=>'no',
            ])->orWhere('request_status','rfp');
        })
        ->get([
            'hr_department.hr_department_id',
            'hr_department.hr_department_name'
        ]);

        $userList = Requisition::join('users','users.id','=','requisitions.author_id')
            ->groupBy('requisitions.author_id')
            ->where(function ($query){
                return $query->where([
                'requisitions.status' => 1,
                'requisitions.approved_id' => 1,
                'requisitions.is_send_to_rfp' => 'yes',
                'requisitions.delivery_status' => 'processing',
                'requisitions.is_po_generate' => 'no'
            ])->orWhere('requisitions.request_status','rfp');
            })
            ->get(['users.id','users.name']);

        try {

            $requisitions = Requisition::with([
                'items.product.category.category',
                'relUsersList.employee.unit'
            ])
            ->when(strtotime($from)>0, function($query) use($from){
                return $query->whereDate('requisition_date', '>=', $from);
            })
            ->when(strtotime($to)>0, function($query) use($to){
                return $query->whereDate('requisition_date', '<=', $to);
            })
            ->when($department_id>0, function($query) use($department_id){
                return $query->whereHas('relUsersList.employee', function($query) use($department_id){
                    return $query->where('as_department_id', $department_id);
                });
            })
            ->when($requisition_by>0, function($query) use($requisition_by){
                return $query->where('author_id',$requisition_by);
            })
            ->when($category_id>0, function($query) use($category_id){
                return $query->whereHas('items.product.category.category', function($query) use($category_id){
                    return $query->where('id', $category_id);
                });
            })->where(function($query){
                return $query->where([
                    'status' => 1,
                    'approved_id' => 1,
                    'is_send_to_rfp' => 'yes',
                    'delivery_status' => 'processing',
                    'is_po_generate' => 'no',
                ])->orWhere('request_status','rfp');
            })->when(!datatableOrdering(), function($query){
                return $query->orderby('reference_no', 'desc');
            });

            if (request()->ajax()) {
                return Datatables::of($requisitions)
                ->addIndexColumn()
                ->editColumn('reference_no', function($values){
                    return  '<a href="javascript:void(0)" onclick="openModal('.$values->id.')"  class="btn btn-link">'.$values->reference_no.'</a>';
                })
                ->editColumn('requisition_date', function($values){
                    return date('Y-m-d',strtotime($values->requisition_date));
                })
                ->filterColumn('requisition_date', function ($query, $keyword) {
                    $query->where('requisition_date', 'LIKE', '%'.$keyword.'%');
                })
                ->orderColumn('requisition_date', function ($query, $order) {
                    return $query->orderBy('requisition_date', $order);
                })
                ->addColumn('product_category', function($values){
                    return isset($values->items[0]->product->category->category->name)?$values->items[0]->product->category->category->name:'';
                })
                ->filterColumn('product_category', function ($query, $keyword) {
                    return $query->whereHas('items.product.category.category', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('product_category', function ($query, $order) {
                    return pleaseSortMe($query, $order, RequisitionItem::select('main_category.name')
                        ->join('products', 'products.id', '=', 'requisition_items.product_id')
                        ->join('categories as sub_category', 'sub_category.id', '=', 'products.category_id')
                        ->join('categories as main_category', 'main_category.id', '=', 'sub_category.parent_id')
                        ->whereColumn('requisition_items.requisition_id', 'requisitions.id')
                        ->take(1)
                    );
                })
                ->addColumn('unit', function($values){
                    return isset($values->relUsersList->employee->unit->hr_unit_short_name)?$values->relUsersList->employee->unit->hr_unit_short_name:'';
                })
                ->filterColumn('unit', function ($query, $keyword) {
                    return $query->whereHas('relUsersList.employee.unit', function ($query) use($keyword) {
                        $query->where('hr_unit_short_name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('unit', function ($query, $order) {
                    return pleaseSortMe($query, $order, User::select('hr_unit.hr_unit_short_name')
                        ->join('hr_as_basic_info', 'hr_as_basic_info.associate_id', '=', 'users.associate_id')
                        ->join('hr_unit', 'hr_unit.hr_unit_id', '=', 'hr_as_basic_info.as_unit_id')
                        ->whereColumn('users.id', 'requisitions.author_id')
                        ->take(1)
                    );
                })
                ->addColumn('department', function($values){
                    return isset($values->relUsersList->employee->department->hr_department_name)?$values->relUsersList->employee->department->hr_department_name:'';
                })
                ->filterColumn('department', function ($query, $keyword) {
                    return $query->whereHas('relUsersList.employee.department', function ($query) use($keyword) {
                        $query->where('hr_department_name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('department', function ($query, $order) {
                    return pleaseSortMe($query, $order, User::select('hr_department.hr_department_name')
                        ->join('hr_as_basic_info', 'hr_as_basic_info.associate_id', '=', 'users.associate_id')
                        ->join('hr_department', 'hr_department.hr_department_id', '=', 'hr_as_basic_info.as_department_id')
                        ->whereColumn('users.id', 'requisitions.author_id')
                        ->take(1)
                    );
                })
                ->addColumn('requisition_by', function($values){
                    return isset($values->relUsersList->name)? $values->relUsersList->name :'';
                })
                ->filterColumn('requisition_by', function ($query, $keyword) {
                    return $query->whereHas('relUsersList', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('requisition_by', function ($query, $order) {
                    return pleaseSortMe($query, $order, User::select('users.name')
                        ->whereColumn('users.id', 'requisitions.author_id')
                        ->take(1)
                    );
                })
                ->addColumn('attachment', function($values){
                        $attachment ='';
                        if(auth()->user()->hasRole('Employee') || auth()->user()->hasRole('Department-Head') || auth()->user()->hasRole('Purchase-Department')){
                            if(!empty($values->attachment) && file_exists(public_path($values->attachment))){
                                $attachment.='<a href="'. url($values->attachment) .'" target="_blank" class="btn btn-xs btn-primary"><i class="las la-paperclip"></i>Attachment</a>';
                            }
                        }
                        
                        return $attachment;
                    })
                ->addColumn('actions', function($values){
                    $actions = '';
                    $actions.='<div class="btn-group"><button class="btn dropdown-toggle" data-toggle="dropdown"><span id="statusName'.$values->id.'"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-three-dots-vertical" viewBox="0 0 16 16"><path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"/></svg></span></button><ul class="dropdown-menu">';
                            $actions .='<li><a class="convertToRfp" data-src="'.route('pms.rfp.convert.to.rfp').'" onclick="convertToRfp($(this))" data-id="'.$values->id.'" title="Prepare to RFP" >Prepare To RFP</a></li>';
                            $actions .='<li><a target="__blank" href="'.route('pms.rfp.send.to.purchase',$values->id).'" title="Direct Purchase">Direct Purchase</a></li>';
                    $actions.='</ul></div>';
                    return $actions;
                })
                ->rawColumns(['reference_no','attachment','actions'])
                ->make(true);
            }

             $data=[
                'title' => $title,
                'userList' => $userList,
                'departments' => $departments,
                'from' => $from,
                'to' => $to,
                'category_id' => $category_id,
                'requisition_by' => $requisition_by,
                'department_id' => $department_id,
                'categories' => $categories,
                'headerColumns' => $this->reqHeaderColumns(),
            ];
            
            return view('pms.backend.pages.rfp.deft-requisition-index',$data);

        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Convert to request for proposal.
     *
     * @return \Illuminate\Http\Response
    */

    public function convertToRfp(Request $request)
    {
        $response = [];

        $requisition=Requisition::where(function($query) use($request){
           return $query->where(['id'=>$request->requisition_id,'status'=>1,'approved_id'=>1,'is_send_to_rfp'=>'yes','delivery_status'=>'processing'])->orWhere('request_status','rfp');
        })
        ->first();

        //Start transaction
        DB::beginTransaction();

        try {
            if(count((array)$requisition)>0)
            {
                if($requisition->request_status=='rfp'){
                    $requisition->request_status = 'send_rfp';
                }else{
                    $requisition->delivery_status = 'rfp';
                }

                $requisition->save();
                DB::commit();

                $response['result'] = 'success';
                $response['message'] = 'Successfully Converted to RFP!!';
            }else{
                $response['result'] = 'error';
                $response['message'] = 'Data not found.!!';
            }

        }catch (\Throwable $th){
            //If process has any problem then rollback the data
            DB::rollback();

            $response['result'] = 'error';
            $response['message'] = $th->getMessage();
        }

        return $response;
    }

    public function getRequestProposalCombineInfo(Request $request)
    {
        $products = (isset($request->products) ? $request->products : []);
        $suppliers = [];
        if(count($products) > 0){
            $suppliers = Suppliers::where('status', 'Active')
            ->whereHas('products', function($query) use($products) {
                return $query->distinct()->whereIn('product_id', $products);
            }, '=', count($products))
            ->get();
        }
        
        return response()->json([
            'reference_no' => uniqueCode(15, ('RP-'.date('y', strtotime(date('Y-m-d'))).'-GRP-'), 'request_proposals', 'id'),
            'suppliers' => $suppliers,
        ]);
    }

    public function create()
    {   
        $title = 'Create RFP';
        try {
            
            $requisitionIds = getMergedRequisisionID([
                'is_po_generate' => 'no',
                'is_send_to_rfp' => 'yes',
                'delivery_status' => 'rfp',
                'approved_id' => 1,
                'status' => 1,
            ],[
                'is_po_generate' => 'no',
                'is_send_to_rfp' => 'yes',
                'delivery_status' => 'partial-delivered',
                'approved_id' => 1,
                'status' => 1,
                'request_status' => 'send_rfp',
            ]);

            $products = Product::where('status', 'approved')
            ->with([
                'suppliers', 'productUnit', 'category.category', 'attributes.attributeOption.attribute', 'requisitionItem.requisition'
            ])
            ->whereHas('requisitionItem', function($query) use($requisitionIds){
                return $query->where('is_send','no')->whereHas('requisition', function($query) use($requisitionIds){
                    return $query->whereIn('id',$requisitionIds);
                });
            })->get();

            return view('pms.backend.pages.rfp.create', compact('title','products','requisitionIds'));
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function getRequestProposalSeparateInfo(Request $request)
    {
        $items = (isset($request->items) ? $request->items : []);
        $requisitionItems = RequisitionItem::with([
            'requisition'
        ])
        ->where('is_send','no')
        ->whereIn('id', $items)
        ->get();

        $products = $requisitionItems->pluck('product_id')->toArray();
        $suppliers = [];
        if(count($products) > 0){
            $suppliers = Suppliers::where('status', 'Active')
            ->whereHas('products', function($query) use($products) {
                return $query->distinct()->whereIn('product_id', $products);
            }, '=', count($products))
            ->get();
        }

        $clue = 'GRP';
        $units = \App\Models\Hr\Unit::whereIn('hr_unit_id', $requisitionItems->pluck('requisition.hr_unit_id')->toArray())->get();
        if($units->count() == 1){
            $clue = $units[0]->hr_unit_short_name;
        }
        
        return response()->json([
            'reference_no' => uniqueCode(15, ('RP-'.date('y', strtotime(date('Y-m-d'))).'-'.$clue.'-'), 'request_proposals', 'id'),
            'suppliers' => $suppliers,
        ]);
    }

    /**
     * Create separate proposal.
     *
     * @return \Illuminate\Http\Response
     */

    public function createSeparate()
    {
        $title = 'Create Separte RFP';
        try {

            $requisitionIds = getMergedRequisisionID([
                'is_po_generate' => 'no',
                'is_send_to_rfp' => 'yes',
                'delivery_status' => 'rfp',
                'approved_id' => 1,
                'status' => 1,
            ],[
                'is_po_generate' => 'no',
                'is_send_to_rfp' => 'yes',
                'delivery_status' => 'partial-delivered',
                'approved_id' => 1,
                'status' => 1,
                'request_status' => 'send_rfp',
            ]);
            
            $requisitions=Requisition::whereIn('id', $requisitionIds)
            ->with([
                'requisitionItems',
                'requisitionItems.product.productUnit',
                'requisitionItems.product.category.category',
                'requisitionItems.product.attributes.attributeOption.attribute',
                'relRequisitionDelivery.relDeliveryItems'
            ])
            ->whereHas('requisitionItems', function($query){
                return $query->where('is_send', 'no');
            })
            ->orderBy('id','desc')
            ->get();

            return view('pms.backend.pages.rfp.create-separate', compact('title','requisitions'));

        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function requisitionDetailByProductId($product_id){
        $title = 'Requistion details by product.';
        $product = Product::findOrFail($product_id);

        $requisitionIds = getMergedRequisisionID([
                'is_po_generate' => 'no',
                'is_send_to_rfp' => 'yes',
                'delivery_status' => 'rfp',
                'approved_id' => 1,
                'status' => 1,
            ],[
                'is_po_generate' => 'no',
                'is_send_to_rfp' => 'yes',
                'delivery_status' => 'partial-delivered',
                'approved_id' => 1,
                'status' => 1,
                'request_status' => 'send_rfp',
            ]);

        try {
            $items = RequisitionItem::where(['product_id'=>$product_id,'is_send'=>'no'])
            ->whereHas('requisition', function($query) use($requisitionIds){
                return $query->where('status', 1)->whereIn('id',$requisitionIds);
            })
            ->get();

            return view('pms.backend.pages.proposal._product-wise-requisition', compact('title','product', 'items','requisitionIds'));

        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */

    public function store(Requests\Pms\RequestProposalRequest $request){
        $proposalType = $request->has('type')?'online':'manual';
        DB::beginTransaction();
        try {

            //Check for Appropiete Suppliers
            $suppliers = Suppliers::with([
                'products'
            ])
            ->whereIn('id', $request->supplier_id)
            ->get();

            $products = Product::with([
                'attributes.attributeOption.attribute'
            ])
            ->whereIn('id', $request->product_id)
            ->get();

            $error_count = 0;
            $messages = '<ul class="pl-0 text-white">';
            $array = [];
            if($suppliers->count() > 0){
                foreach($suppliers as $key => $supplier){
                $array[$supplier->id] = 0;
                $supplier_messages = '';
                    if($products->count() > 0){
                        foreach($products as $key => $product){
                            if($supplier->products->where('id', $product->id)->count() == 0){
                                $error_count++;
                                $array[$supplier->id]++;
                                $supplier_messages .= '<strong>'.$product->name.' '.getProductAttributesFaster($product).'</strong>, '; 
                            }
                        }
                    }

                    if($array[$supplier->id] > 0){
                        $messages .= '<li class="text-white"><strong>'.$supplier->name.' ('.$supplier->code.')</strong> does not supply - '.$supplier_messages.'</li>';
                    }
                }
            }
            $messages .= '</ul>';

            if($error_count > 0){
                return response()->json([
                    'success' => false,
                    'message' => $messages
                ]);
            }
            //Check for Appropiete Suppliers

            $requestProposal=RequestProposal::create([
                'type'=>$proposalType,
                'reference_no'=>$request->reference_no,
                'request_date'=>date('Y-m-d',strtotime($request->request_date)),
            ]);

            foreach ($request->supplier_id as $key=>$supplier_id){
                if(isset($array[$supplier_id]) && $array[$supplier_id] == 0){
                    $requestProposalDefine[]=[
                        'request_proposal_id'=>$requestProposal->id,
                        'supplier_id'=>$supplier_id,
                    ];
                }
            }

            foreach ($request->product_id as $i=>$product_id){
                $requestProposalDetails[]=[
                    'request_proposal_id'=>$requestProposal->id,
                    'product_id'=>$product_id,
                    'request_qty'=>$request->request_qty[$product_id],
                    'qty'=>$request->qty[$product_id],
                    'created_by'=>\Auth::user()->id,
                    'created_at'=>date('Y-m-d h:i'),
                ];
            }

            //For update column (Is_Send) on requisition items table
            $requisitionIds = getMergedRequisisionID([
                'is_po_generate' => 'no',
                'is_send_to_rfp' => 'yes',
                'delivery_status' => 'rfp',
                'approved_id' => 1,
                'status' => 1,
            ],[
                'is_po_generate' => 'no',
                'is_send_to_rfp' => 'yes',
                'delivery_status' => 'partial-delivered',
                'approved_id' => 1,
                'status' => 1,
                'request_status' => 'send_rfp',
            ]);

            $requisitionIdArray = array_values(array_unique(RequisitionItem::where(['is_send'=>'no'])
            ->whereIn('product_id', $request->product_id)
            ->whereHas('requisition', function($query) use($requisitionIds){
                return $query->where('status', 1)->whereIn('id',$requisitionIds);
            })
            ->pluck('requisition_id')->toArray()));

            RequisitionItem::whereIn('requisition_id', $requisitionIdArray)->whereIn('product_id', $request->product_id)->where('is_send','no')
            ->update(['is_send'=>'yes']);

            if(isset($requisitionIdArray[0])){
                foreach($requisitionIdArray as $key => $requisition_id){
                    RequestProposalRequisitions::create([
                        'requisition_id' => $requisition_id,
                        'request_proposal_id' => $requestProposal->id,
                    ]);
                }
            }

            //Request proposal define to supplier
            RequestProposalDefineSupplier::insert($requestProposalDefine);

            //Request proposal details insert
            RequestProposalDetails::insert($requestProposalDetails);

            //Request Proposal Tracking
            RequestProposalTracking::StoreRequestProposalTracking($requestProposal->id,'RFP');

            //Send mail to supplier
            //$this->mailSendToSuppliers($requestProposal->id,$request->supplier_id,$proposalType);

            DB::commit();
            session()->flash('alert-type', 'success');
            session()->flash('message', 'Request For Proposal Successfully Created');
            return response()->json([
                'success' => true,
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function storeSeparate(Request $request){
        $this->validate($request, [
            'request_date' => ['required', 'date'],
            'reference_no' => ['required','max:15','unique:request_proposals'],
            'supplier_id' => ['required'],
            "supplier_id.*"  => "exists:suppliers,id",
            "requisition_item_id"    => "required|min:1",
        ]);

        $proposalType=$request->has('type')?'online':'manual';

        DB::beginTransaction();
        try {

            //Check for Appropiete Suppliers
            $suppliers = Suppliers::with([
                'products'
            ])
            ->whereIn('id', $request->supplier_id)
            ->get();

            $requisitionItems = RequisitionItem::with([
                'product.attributes.attributeOption.attribute'
            ])
            ->whereIn('id', $request->requisition_item_id)
            ->get();

            $error_count = 0;
            $messages = '<ul class="pl-0 text-white">';
            $array = [];
            if($suppliers->count() > 0){
                foreach($suppliers as $key => $supplier){
                $array[$supplier->id] = 0;
                $supplier_messages = '';
                    if($requisitionItems->count() > 0){
                        foreach($requisitionItems as $key => $requisitionItem){
                            if($supplier->products->where('id', $requisitionItem->product_id)->count() == 0){
                                $error_count++;
                                $array[$supplier->id]++;
                                $supplier_messages .= '<strong>'.$requisitionItem->product->name.' '.getProductAttributesFaster($requisitionItem->product).'</strong>, '; 
                            }
                        }
                    }

                    if($array[$supplier->id] > 0){
                        $messages .= '<li class="text-white"><strong>'.$supplier->name.' ('.$supplier->code.')</strong> does not supply - '.$supplier_messages.'</li>';
                    }
                }
            }
            $messages .= '</ul>';

            if($error_count > 0){
                return response()->json([
                    'success' => false,
                    'message' => $messages
                ]);
            }
            //Check for Appropiete Suppliers

            $requestProposal = RequestProposal::create([
                'type'=>$proposalType,
                'reference_no'=>$request->reference_no,
                'request_date'=>date('Y-m-d',strtotime($request->request_date)),
            ]);

            foreach ($request->supplier_id as $key=>$supplier_id){
                if(isset($array[$supplier_id]) && $array[$supplier_id] == 0){
                    $requestProposalDefine[]=[
                        'request_proposal_id'=>$requestProposal->id,
                        'supplier_id'=>$supplier_id,
                    ]; 
                }
            }

            $qty = [];
            if(is_array($request->qty) && count($request->qty) > 0){
                foreach($request->qty as $combined => $value){
                    if(in_array(explode('&', $combined)[1], $request->requisition_item_id)){
                        if(!isset($qty[explode('&', $combined)[0]])){
                            $qty[explode('&', $combined)[0]] = 0;
                        }
                        $qty[explode('&', $combined)[0]] += collect($value)->sum();
                    }
                }
            }

            $request_qty = [];
            if(is_array($request->request_qty) && count($request->request_qty) > 0){
                foreach($request->request_qty as $combined => $value){
                    if(in_array(explode('&', $combined)[1], $request->requisition_item_id)){
                        if(!isset($request_qty[explode('&', $combined)[0]])){
                            $request_qty[explode('&', $combined)[0]] = 0;
                        }
                        $request_qty[explode('&', $combined)[0]] += collect($value)->sum();
                    }
                }
            }


            if(is_array($qty) && count($qty) > 0){
                foreach ($qty as $product_id => $value){
                    $requestProposalDetails[]=[
                        'request_proposal_id' => $requestProposal->id,
                        'product_id' => $product_id,
                        'request_qty' => $request_qty[$product_id],
                        'qty' => $qty[$product_id],
                        'created_by' => \Auth::user()->id,
                        'created_at' => date('Y-m-d h:i'),
                    ];
                }
            }

            $requisitionIdArray = array_values(array_unique(RequisitionItem::where(['is_send'=>'no'])
            ->whereIn('id', $request->requisition_item_id)
            ->pluck('requisition_id')->toArray()));

            /*Update requisition items status isSend= yes*/

            RequisitionItem::whereIn('id', $request->requisition_item_id)
                    ->where('is_send','no')
                    ->update(['is_send'=>'yes']);

            if(isset($requisitionIdArray[0])){
                foreach($requisitionIdArray as $key => $requisition_id){
                    RequestProposalRequisitions::create([
                        'requisition_id' => $requisition_id,
                        'request_proposal_id' => $requestProposal->id,
                    ]);
                }
            }

            //Insert request supplier
            RequestProposalDefineSupplier::insert($requestProposalDefine);
            //Insert proposal details
            RequestProposalDetails::insert($requestProposalDetails);
            //Request Proposal Tracking
            RequestProposalTracking::StoreRequestProposalTracking($requestProposal->id,'RFP');
            //Mail send to supplier

            //$this->mailSendToSuppliers($requestProposal->id,$request->supplier_id,$proposalType);
            
            //DB Commit
            DB::commit();

            session()->flash('alert-type', 'success');
            session()->flash('message', 'Request For Proposal Successfully Created');
            return response()->json([
                'success' => true,
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }


    public function mailSendToSuppliers($requestProposalId,$supplierIds,$proposalType=null){

        $suppliers =  Suppliers::where('status', 'Active')->whereIn('id',$supplierIds)->get();

        foreach ($suppliers as $key=>$supplier){

            $requestProposal=RequestProposal::with('defineToSupplier','requestProposalDetails','requestProposalDetails.product')
            ->whereHas('defineToSupplier',function ($query)use ($supplier) {
                $query->where('request_proposal_define_suppliers.supplier_id',$supplier->id);
            })
            ->find($requestProposalId);

            $data["email"] = $supplier->email;
            $data["title"] = "Request For Proposal From MBM";
            $data["reference_no"] = $requestProposal->reference_no;
            $data["requestProposal"] = $requestProposal;
            $data["supplier"] = $supplier;
            $data["proposalType"] = $proposalType;
            $data["current_url"] = URL::to('/');

            $pdf = PDF::loadView('pms.backend.mail.request-proposal-mail', $data)->setOptions(['defaultFont' => 'sans-serif']);

            Mail::send('pms.backend.mail.rfp_mail_body', $data, function ($message) use ($data, $pdf) {
                $message->to($data["email"], $data["email"])
                ->subject($data["title"])
                ->attachData($pdf->output(), $data["reference_no"].".pdf");
            });

        }
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\RequestProposal  $requestProposal
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $title='Request Proposal Details';
        $requestProposal = RequestProposal::with([
            'defineToSupplier.supplier',
            'requestProposalDetails.product.category.category',
            'requestProposalDetails.product.productUnit',
            'requestProposalDetails.product.attributes.attributeOption.attribute',
            'createdBy'
        ])->findOrFail($id);
        return view('pms.backend.pages.rfp.request-proposal-details', compact('title','requestProposal'));
    }


    /**
    * Show the form for creating a new resource.
    *
    * @return \Illuminate\Http\Response
    */
    public function sendToPurchase($req_id)
    {
        $req = Requisition::find($req_id);
        $title = 'Estimate Prepartion';
        $prefix = 'RP-'.date('y', strtotime(date('Y-m-d'))).'-'.$req->relUsersList->employee->unit->hr_unit_short_name.'-';
        $refNo = uniqueCode(14,$prefix,'request_proposals','id');

        try {

            $requisitionIds = getMergedRequisisionID([
                'is_po_generate' => 'no',
                'is_send_to_rfp' => 'yes',
                'delivery_status' => 'processing',
                'approved_id' => 1,
                'status' => 1,
            ],[
                'is_po_generate' => 'no',
                'is_send_to_rfp' => 'yes',
                'delivery_status' => 'partial-delivered',
                'approved_id' => 1,
                'status' => 1,
                'request_status' => 'rfp',
            ]);

            $requisition = RequisitionItem::with([
                'requisition',
                'product.productUnit',
                'product.attributes.attributeOption.attribute'
            ])
            ->whereHas('requisition', function($query) use($requisitionIds){
                return $query->whereIn('id',$requisitionIds);
            })
            ->where('is_send','no')
            ->where('po_generate','no')
            ->where('requisition_id',$req_id)
            ->get();

            $getProductIds=[];
            foreach($requisition as $data){
                array_push($getProductIds,$data->product_id);
            }

            $selectSupplierIds=DB::table('products_supplier')
            ->whereIn('product_id',$getProductIds)
            ->groupBy('supplier_id')
            ->get(['supplier_id']);

            $getSupplierIds=[];
            foreach($selectSupplierIds as $data){
                array_push($getSupplierIds,$data->supplier_id);
            }

            $supplierList = Suppliers::where('status', 'Active')->whereIn('id',$getSupplierIds)->pluck('name','id')->all();

            $currencyTypes = CurrencyType::with(['currencies'])->get();
            $supplier = Suppliers::where('deletable', 'no')->first();

            if ($requisition->count() > 0) {
                return view('pms.backend.pages.store.store-inventory-purchase', compact('title','requisition','req_id','supplierList','refNo','requisitionIds', 'currencyTypes', 'supplier'));
            }else{
                return $this->backWithError('Already purchase this requisition.');
            }

        }catch (\Throwable $th){

            return $this->backWithError($th->getMessage());
        }
    }

    /**
    * Show the form for creating a new resource.
    *
    * @return \Illuminate\Http\Response
    */
    public function sendToPurchaseSubmit(Request $request){  
        $this->validate($request, [
            'request_date' => ['required', 'date'],
            'reference_no' => ['required','max:15','unique:request_proposals'],
            'supplier_id' => ['required'],
            "supplier_id.*"  => "exists:suppliers,id",
            "product_id"    => "required|min:1",
        ]);

    
        // Transaction Start Here
        DB::beginTransaction();
        try {
            //update requistion id
            $requisition = Requisition::where(['id'=>$request->requisition_id,'status'=>1,'approved_id'=>1,'is_send_to_rfp'=>'yes','delivery_status'=>'processing'])
            ->update(['delivery_status'=>'rfp','updated_by'=>\Auth::user()->id,
                'updated_at'=>date('Y-m-d h:i')]);

            $requisition = Requisition::find($request->requisition_id);

            $requestProposal = RequestProposal::create([
                'type' => 'direct-purchase',
                'reference_no'=>$request->reference_no,
                'request_date'=>date('Y-m-d',strtotime($request->request_date)),
            ]);

            //Generate Quotation
            $prefix='EST-'.date('y', strtotime(date('Y-m-d'))).'-'.$requisition->relUsersList->employee->unit->hr_unit_short_name.'-';
            $refNo=uniqueCode(15,$prefix,'quotations','id');

            $quotationFilePath='';
            if ($request->hasFile('quotation_file'))
            {
                $quotationFilePath=$this->fileUpload($request->file('quotation_file'),'upload/quotation/pdf-file');
            }

            $quotation=Quotations::create([
                'supplier_id'=>$request->supplier_id,
                'request_proposal_id'=>$requestProposal->id,
                'reference_no'=>$refNo,
                'quotation_date'=>date('Y-m-d',strtotime($request->request_date)),
                'total_price'=>$request->sum_of_subtoal,
                'discount'=>$request->discount==null?0:$request->discount,
                'vat'=>$request->vat==null?0:$request->vat,
                'gross_price'=>$request->gross_price,
                'status'=>'active',
                'type'=>'direct-purchase',
                'delivery_date' => isset($request->delivery_date) ? $request->delivery_date : date('Y-m-d'),
                'is_approved'=> (auth()->user()->hasRole('Purchase-Employee') ? 'pre-processing' : 'processing'),
                'supplier_payment_terms_id'=>$request->supplier_payment_terms_id,
                'quotation_file'=>$quotationFilePath
            ]);

            foreach ($request->product_id as $i=>$product_id){
                $quotationItemsInput[]=[
                    'quotation_id'=>$quotation->id,
                    'product_id'=>$product_id,
                    'unit_price'=>$request->unit_price[$product_id],
                    'qty'=>$request->qty[$product_id],
                    'sub_total_price'=>$request->sub_total_price[$product_id],
                    'discount'=>$request->item_discount_percent[$product_id],
                    'discount_amount'=>$request->item_discount_amount[$product_id],
                    'vat_percentage'=>$request->product_vat[$product_id],
                    'vat'=>$request->sub_total_vat_price[$product_id],
                    'total_price'=>($request->sub_total_price[$product_id]-$request->item_discount_amount[$product_id])+$request->sub_total_vat_price[$product_id],
                    'created_at'=>date('Y-m-d h:i'),
                ];

                $requestProposalDetailsInput[]=[
                    'request_proposal_id'=>$requestProposal->id,
                    'product_id'=>$product_id,
                    'request_qty'=>$request->request_qty[$product_id],
                    'qty'=>$request->qty[$product_id],
                    'created_by'=>\Auth::user()->id,
                    'created_at'=>date('Y-m-d h:i'),
                ];

                RequisitionItem::where([
                    'requisition_id' => $request->requisition_id,
                    'product_id' => $product_id
                ])
                ->update([
                    'purchase_qty' => $request->qty[$product_id]
                ]);
            }

            //For update column (Is_Send) on requisition items table 
            RequisitionItem::where('requisition_id',$request->requisition_id)->whereIn('product_id',$request->product_id)->where('is_send','no')->update(['is_send'=>'yes']);

            RequestProposalRequisitions::create([
                'requisition_id' => $request->requisition_id,
                'request_proposal_id' => $requestProposal->id,
            ]);
            
            RequestProposalDefineSupplier::insert([
                'request_proposal_id'=>$requestProposal->id,
                'supplier_id'=>$request->supplier_id,
            ]);
            //Add request proposal details data
            RequestProposalDetails::insert($requestProposalDetailsInput);
            //Add quotation items data
            QuotationsItems::insert($quotationItemsInput);
            
            //Notification
            if(auth()->user()->hasRole('Purchase-Employee')){
                $message= '<span class="notification-links" data-src="'.route('pms.quotation.quotations.cs.proposal.details',$requestProposal->id).'" data-ttile="Request Proposal Details">Reference No:'.$requestProposal->reference_no.'.Watting for purchase approval.</span>';

                CreateOrUpdateNotification('',getManagerInfo('Purchase-Department'), $message,'unread','send-to-purchase-department','');
            }else{
                $message= '<span class="notification-links" data-src="'.route('pms.quotation.quotations.cs.proposal.details',$requestProposal->id).'" data-ttile="Request Proposal Details">Reference No:'.$requestProposal->reference_no.'.Watting for Management approval.</span>';

                CreateOrUpdateNotification('',getManagerInfo('Management'), $message,'unread','send-to-manager','');
            }

            DB::commit();

            return $this->redirectBackWithSuccess('Successfully send to purchase department!!','pms.estimate.index');

        }catch (\Throwable $th){
            //If there are any exceptions, rollback the transaction`
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
        return back();
    }

    public function getSupplierPaymentTerms(Request $request, $id)
    {
         $supplierPaymentTerms = SupplierPaymentTerm::where('supplier_id', $id)->get();
         $data = '';
         if(isset($supplierPaymentTerms[0])){
            $data .='<option value="">--Select One--</option>';
            foreach($supplierPaymentTerms as $key => $paymentTerms){
                $data .='<option value="'.$paymentTerms->id.'">'.$paymentTerms->relPaymentTerm->term.'</option>';
            }
        }

        return $data;
    }

    /**
    * Complete quotation generate.
    *
    * @return \Illuminate\Http\Response
    */

    public function rfpQuotationgenerateComplete(Request $request)
    {
        $response=[];
        $data=RequestProposal::where('id',$request->req_proposal_id)->first();
        //Start transaction
        DB::beginTransaction();
        try {
            if(!empty($data))
            {
                $data->quotation_generate_type = 'complete';
                $data->save();
                //Commit data
                DB::commit();

                $response['result'] = 'success';
                $response['message'] = 'Successfully Complete This Request Proposal!!';
            }else{
                $response['result'] = 'error';
                $response['message'] = 'Data not found.!!';
            }

        }catch (\Throwable $th){
            //If process has any problem then rollback the data
            DB::rollback();
            $response['result'] = 'error';
            $response['message'] = $th->getMessage();
        }
        return $response;
    }

    public function estimate()
    {
        // code...
    }

    public function rfpHistory($id)
    {
        try{

            $title = "RFP History";
            $proposals = RequestProposal::with('relQuotations')->where('id',$id)->orderby('id','desc')->first();

            if (count($proposals->relQuotations)>0) {
                $purchase = $proposals->relQuotations()->with('relPurchaseOrder')->first();
            }

            $purchaseOrder = isset($purchase)?(!empty($purchase->relPurchaseOrder)?$purchase->relPurchaseOrder:''):'';

            if (!empty($purchaseOrder)) {
                $billManage = PurchaseOrder::with([
                    'relGoodReceiveNote',
                    'relGoodsReceivedItemStockIn',
                    'relQuotation.relSuppliers',
                    'relQuotation.exchangeRate.currency',
                    'relPurchaseOrderItems',
                    'relPoAttachment'
                ])
                ->where('is_send','yes')
                ->whereHas('relGoodReceiveNote',function ($query){
                    $query->whereRaw('purchase_orders.id=goods_received_notes.purchase_order_id');
                })
                ->whereHas('relGoodsReceivedItemStockIn', function($query){
                    return $query->where('is_grn_complete','yes')->where('total_amount', '>', 0);
                })
                ->where('id',$purchaseOrder->id)
                ->first();
            }else{
                $billManage='';
            }
            
            return view('pms.backend.pages.rfp.rfp-history',compact('title','purchaseOrder','proposals','billManage'));
        }catch(\Throwable $th){
            return $this->backWithWarning($th->getMessage());
        }
    }
}
