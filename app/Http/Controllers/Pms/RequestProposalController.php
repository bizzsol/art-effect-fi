<?php
bolt_decrypt( __FILE__ , 'm7qQ2J'); return 0;
##!!!##