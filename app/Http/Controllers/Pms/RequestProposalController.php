<?php
bolt_decrypt( __FILE__ , 'PFTcRX'); return 0;
##!!!##