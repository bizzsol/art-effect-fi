<?php
bolt_decrypt( __FILE__ , '9kcO5l'); return 0;
##!!!##