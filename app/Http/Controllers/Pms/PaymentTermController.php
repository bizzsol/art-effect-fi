<?php
bolt_decrypt( __FILE__ , 'Dxin0y'); return 0;
##!!!##