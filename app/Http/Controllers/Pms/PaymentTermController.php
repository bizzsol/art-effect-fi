<?php
bolt_decrypt( __FILE__ , 'O42avk'); return 0;
##!!!##