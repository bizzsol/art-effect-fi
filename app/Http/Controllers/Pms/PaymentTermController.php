<?php
bolt_decrypt( __FILE__ , 'OlOFNb'); return 0;
##!!!##

namespace App\Http\Controllers\Pms;

use App\Models\PmsModels\PaymentTerm;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use DB, DataTables;

class PaymentTermController extends Controller
{
    public function headerColumns($value = '')
    {
        return array(
            ['SL', 'SL'],
            ['payment_term', 'payment_term', 'text-center'],
            ['payment_percentage', 'payment_percentage', 'text-center'],
            ['payment_type', 'payment_type', 'text-center'],
            ['payment_mode', 'payment_mode', 'text-center'],
            ['actions', 'actions', 'text-center', 'width:15%']
        );
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        if (request()->ajax()) {
            return DataTables::of(PaymentTerm::query())
                ->addIndexColumn()
                ->addColumn('payment_term', function ($term) {
                    return $term->term;
                })
                ->filterColumn('payment_term', function ($query, $keyword) {
                    $query->where('term', 'LIKE', '%' . $keyword . '%');
                })
                ->orderColumn('payment_term', function ($query, $order) {
                    return $query->orderBy('term', $order);
                })
                ->addColumn('payment_percentage', function ($term) {
                    return $term->percentage.'%';
                })
                ->filterColumn('payment_percentage', function ($query, $keyword) {
                    $query->where('percentage', 'LIKE', '%' . $keyword . '%');
                })
                ->orderColumn('payment_percentage', function ($query, $order) {
                    return $query->orderBy('percentage', $order);
                })
                ->addColumn('payment_type', function ($term) {
                    return $term->type == 'paid' ? 'Advance' : 'Due';
                })
                ->filterColumn('payment_type', function ($query, $keyword) {
                    $query->where('type', 'LIKE', '%' . $keyword . '%');
                })
                ->orderColumn('payment_type', function ($query, $order) {
                    return $query->orderBy('type', $order);
                })
                ->addColumn('payment_mode', function ($term) {
                    return $term->remarks;
                })
                ->filterColumn('payment_mode', function ($query, $keyword) {
                    $query->where('remarks', 'LIKE', '%' . $keyword . '%');
                })
                ->orderColumn('payment_mode', function ($query, $order) {
                    return $query->orderBy('remarks', $order);
                })
                ->addColumn('actions', function ($term) {
                    $actions = '';
                    if(auth()->user()->hasPermissionTo('payment-terms-edit')){
                        $actions .= '<a class="btn btn-xs btn-info rounded-circle ml-2" href="'.url('pms/payment-terms/'.$term->id.'/edit').'"><i class="la la-edit"></i></a>';
                    }

                    if(auth()->user()->hasPermissionTo('payment-terms-delete')){
                        $actions .= '<a class="btn btn-xs btn-danger ml-2" onclick="deleteFromCRUD($(this))" data-src="'.route('pms.payment-terms.destroy', $term->id).'"><i class="la la-trash"></i></a>';
                    }

                    return $actions;
                })
                ->rawColumns(['actions'])
                ->toJson();
        }

        return view('pms.backend.pages.payment-term.index', [
            'title' => 'Payment Terms',
            'headerColumns' => $this->headerColumns()
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        return view('pms.backend.pages.payment-term.create', [
            'title' => "Add New Payment Term",
            'status' => [
                PaymentTerm::ACTIVE => PaymentTerm::ACTIVE,
                PaymentTerm::INACTIVE => PaymentTerm::INACTIVE
            ],
            'types' => [
                'paid' => "Advance",
                'due' => "Due",
            ],
        ]);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'term' => 'required|unique:payment_terms',
            'percentage' => 'required|integer|max:100',
            // 'days' => 'required|integer|max:9999',
            'type' => 'required',
            'remarks' => 'required'
        ]);

        $percentage = $request->percentage;
        if($percentage > 100){
            $request->flush();
            return $this->backWithError("Percentage limit Exceeded!");
        }

        DB::beginTransaction();
        try{
            PaymentTerm::create([
                'term' => $request->term,
                'percentage' => $request->percentage,
                'days' => 1,
                'type' => $request->type,
                'remarks' => $request->remarks,
                'status' => $request->status,
            ]);

            DB::commit();
            return $this->backWithSuccess('Payment Term created successfully');
        }catch (\Exception $e){
            DB::rollback();
            return $this->backWithError($e->getMessage());
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\PmsModels\PaymentTerm  $paymentTerm
     * @return \Illuminate\Http\Response
     */
    public function show()
    {

    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Models\PmsModels\PaymentTerm  $paymentTerm
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        return view('pms.backend.pages.payment-term.edit', [
            'title' => "Edit Payment Term",
            'term' => PaymentTerm::findOrFail($id),
            'status' => [
                PaymentTerm::ACTIVE => PaymentTerm::ACTIVE,
                PaymentTerm::INACTIVE => PaymentTerm::INACTIVE
            ],
            'types' => [
                'paid' => "Advance",
                'due' => "Due",
            ],
        ]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\PmsModels\PaymentTerm  $paymentTerm
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $this->validate($request, [
            'term' => 'required|unique:payment_terms,term,'.$id,
            'percentage' => 'required|integer|max:100',
            // 'days' => 'required|integer|max:9999',
            'type' => 'required',
            'remarks' => 'required'
        ]);

        $percentage = $request->percentage;
        if($percentage > 100){
            $request->flush();
            return $this->backWithError("Percentage limit Exceeded!");
        }

        DB::beginTransaction();
        try{
            $term = PaymentTerm::findOrFail($id);
            $term->term = $request->term;
            $term->percentage = $request->percentage;
            $term->days = 1;
            $term->type = $request->type;
            $term->remarks = $request->remarks;
            $term->status = $request->status;
            $term->save();

            DB::commit();
            return $this->backWithSuccess('Payment Term updated successfully');
        }catch (\Exception $e){
            DB::rollback();
            return $this->backWithError($e->getMessage());
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\PmsModels\PaymentTerm  $paymentTerm
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        DB::beginTransaction();
        try {
            if(PaymentTerm::findOrFail($id)->delete()){
                DB::commit();
                return response()->json([
                    'success' => true
                ]);
            }else{
                return response()->json([
                    'success' => false,
                    'message' => "Something went wrong!"
                ]);
            }
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }
}
