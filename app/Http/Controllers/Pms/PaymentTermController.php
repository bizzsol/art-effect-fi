<?php
bolt_decrypt( __FILE__ , 'Kff5Hd'); return 0;
##!!!##