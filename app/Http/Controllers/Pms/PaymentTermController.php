<?php
bolt_decrypt( __FILE__ , '6Wi4fp'); return 0;
##!!!##CgpuYW1lc3BhY2UgQXBwXEh0dHBcQ29udHJvbGxlcnNcUG1zOwoKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXFBheW1lbnRUZXJtOwp1c2UgQXBwXEh0dHBcQ29udHJvbGxlcnNcQ29udHJvbGxlcjsKdXNlIElsbHVtaW5hdGVcSHR0cFxSZXF1ZXN0OwoKY2xhc3MgUGF5bWVudFRlcm1Db250cm9sbGVyIGV4dGVuZHMgQ29udHJvbGxlcgp7CiAgICAvKioKICAgICAqIERpc3BsYXkgYSBsaXN0aW5nIG9mIHRoZSByZXNvdXJjZS4KICAgICAqCiAgICAgKiBAcmV0dXJuIFxJbGx1bWluYXRlXEh0dHBcUmVzcG9uc2UKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KCkKICAgIHsKICAgICAgICAkdGl0bGUgPSAnUGF5bWVudCBUZXJtcyc7CiAgICAgICAgJHN0YXR1cz1bCiAgICAgICAgICAgIFBheW1lbnRUZXJtOjpBQ1RJVkU9PlBheW1lbnRUZXJtOjpBQ1RJVkUsCiAgICAgICAgICAgIFBheW1lbnRUZXJtOjpJTkFDVElWRT0+UGF5bWVudFRlcm06OklOQUNUSVZFCiAgICAgICAgXTsKCiAgICAgICAgJHR5cGUgPSBbCiAgICAgICAgICAgICdwYWlkJyA9PiAiUGFpZCIsCiAgICAgICAgICAgICdkdWUnID0+ICJEdWUiLAogICAgICAgIF07CgogICAgICAgICRwYXltZW50VGVybXM9UGF5bWVudFRlcm06OmdldCgpOwoKICAgICAgICByZXR1cm4gdmlldygncG1zLmJhY2tlbmQucGFnZXMucGF5bWVudC10ZXJtLmluZGV4Jyxjb21wYWN0KCd0aXRsZScsJ3N0YXR1cycsJ3R5cGUnLCdwYXltZW50VGVybXMnKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBTaG93IHRoZSBmb3JtIGZvciBjcmVhdGluZyBhIG5ldyByZXNvdXJjZS4KICAgICAqCiAgICAgKiBAcmV0dXJuIFxJbGx1bWluYXRlXEh0dHBcUmVzcG9uc2UKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGNyZWF0ZSgpCiAgICB7CiAgICAgICAgLy8KICAgIH0KCiAgICAvKioKICAgICAqIFN0b3JlIGEgbmV3bHkgY3JlYXRlZCByZXNvdXJjZSBpbiBzdG9yYWdlLgogICAgICoKICAgICAqIEBwYXJhbSAgXElsbHVtaW5hdGVcSHR0cFxSZXF1ZXN0ICAkcmVxdWVzdAogICAgICogQHJldHVybiBcSWxsdW1pbmF0ZVxIdHRwXFJlc3BvbnNlCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBzdG9yZShSZXF1ZXN0ICRyZXF1ZXN0KQogICAgewogICAgICAgICR0aGlzLT52YWxpZGF0ZSgkcmVxdWVzdCwgWwogICAgICAgICAgICAndGVybScgPT4gJ3JlcXVpcmVkfG1heDoyMDAnLAogICAgICAgICAgICAncGVyY2VudGFnZScgPT4gJ3JlcXVpcmVkfGludGVnZXJ8bWF4OjEwMCcsCiAgICAgICAgICAgICdkYXlzJyA9PiAncmVxdWlyZWR8aW50ZWdlcnxtYXg6OTk5OScsCiAgICAgICAgICAgICd0eXBlJyA9PiAncmVxdWlyZWQnLAogICAgICAgICAgICAncmVtYXJrcycgPT4gJ251bGxhYmxlfG1heDozMDAnCiAgICAgICAgXSk7CgogICAgICAgIC8vJHBlcmNlbnRhZ2UgPSBQYXltZW50VGVybTo6c3VtKCdwZXJjZW50YWdlJykrJHJlcXVlc3QtPnBlcmNlbnRhZ2U7CiAgICAgICAgJHBlcmNlbnRhZ2UgPSAkcmVxdWVzdC0+cGVyY2VudGFnZTsKICAgICAgICBpZigkcGVyY2VudGFnZSA+IDEwMCl7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+YmFja1dpdGhFcnJvcigiUGVyY2VudGFnZSBsaW1pdCBFeGNlZWRlZCEiKTsKICAgICAgICB9CgogICAgICAgICRpbnB1dCA9ICRyZXF1ZXN0LT5leGNlcHQoJ190b2tlbicpOwoKICAgICAgICB0cnl7CiAgICAgICAgICAgIFBheW1lbnRUZXJtOjpjcmVhdGUoJGlucHV0KTsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5iYWNrV2l0aFN1Y2Nlc3MoJ1BheW1lbnQgVGVybSBjcmVhdGVkIHN1Y2Nlc3NmdWxseScpOwogICAgICAgIH1jYXRjaCAoXEV4Y2VwdGlvbiAkZSl7CgogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmJhY2tXaXRoRXJyb3IoJGUtPmdldE1lc3NhZ2UoKSk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogRGlzcGxheSB0aGUgc3BlY2lmaWVkIHJlc291cmNlLgogICAgICoKICAgICAqIEBwYXJhbSAgXEFwcFxNb2RlbHNcUG1zTW9kZWxzXFBheW1lbnRUZXJtICAkcGF5bWVudFRlcm0KICAgICAqIEByZXR1cm4gXElsbHVtaW5hdGVcSHR0cFxSZXNwb25zZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gc2hvdyhQYXltZW50VGVybSAkcGF5bWVudFRlcm0pCiAgICB7CiAgICAgICAgJHRpdGxlPSdFZGl0IFBheW1lbnQgVGVybSBJbmZvcm1hdGlvbic7CiAgICAgICAgJHN0YXR1cz1bCiAgICAgICAgICAgIFBheW1lbnRUZXJtOjpBQ1RJVkU9PlBheW1lbnRUZXJtOjpBQ1RJVkUsCiAgICAgICAgICAgIFBheW1lbnRUZXJtOjpJTkFDVElWRT0+UGF5bWVudFRlcm06OklOQUNUSVZFCiAgICAgICAgXTsKICAgICAgICAkdHlwZSA9IFsKICAgICAgICAgICAgJ3BhaWQnID0+ICJQYWlkIiwKICAgICAgICAgICAgJ2R1ZScgPT4gIkR1ZSIsCiAgICAgICAgXTsKICAgICAgICByZXR1cm4gdmlldygncG1zLmJhY2tlbmQucGFnZXMucGF5bWVudC10ZXJtLnNob3cnLGNvbXBhY3QoJ3RpdGxlJywnc3RhdHVzJywndHlwZScsJ3BheW1lbnRUZXJtJykpOwogICAgfQoKICAgIC8qKgogICAgICogU2hvdyB0aGUgZm9ybSBmb3IgZWRpdGluZyB0aGUgc3BlY2lmaWVkIHJlc291cmNlLgogICAgICoKICAgICAqIEBwYXJhbSAgXEFwcFxNb2RlbHNcUG1zTW9kZWxzXFBheW1lbnRUZXJtICAkcGF5bWVudFRlcm0KICAgICAqIEByZXR1cm4gXElsbHVtaW5hdGVcSHR0cFxSZXNwb25zZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZWRpdChQYXltZW50VGVybSAkcGF5bWVudFRlcm0pCiAgICB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oJHBheW1lbnRUZXJtKTsKICAgIH0KCiAgICAvKioKICAgICAqIFVwZGF0ZSB0aGUgc3BlY2lmaWVkIHJlc291cmNlIGluIHN0b3JhZ2UuCiAgICAgKgogICAgICogQHBhcmFtICBcSWxsdW1pbmF0ZVxIdHRwXFJlcXVlc3QgICRyZXF1ZXN0CiAgICAgKiBAcGFyYW0gIFxBcHBcTW9kZWxzXFBtc01vZGVsc1xQYXltZW50VGVybSAgJHBheW1lbnRUZXJtCiAgICAgKiBAcmV0dXJuIFxJbGx1bWluYXRlXEh0dHBcUmVzcG9uc2UKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHVwZGF0ZShSZXF1ZXN0ICRyZXF1ZXN0LCBQYXltZW50VGVybSAkcGF5bWVudFRlcm0pCiAgICB7CiAgICAgICAgJHRoaXMtPnZhbGlkYXRlKCRyZXF1ZXN0LCBbCiAgICAgICAgICAgICd0ZXJtJyA9PiAncmVxdWlyZWR8bWF4OjIwMCcsCiAgICAgICAgICAgICdwZXJjZW50YWdlJyA9PiAncmVxdWlyZWR8aW50ZWdlcnxtYXg6MTAwJywKICAgICAgICAgICAgJ2RheXMnID0+ICdyZXF1aXJlZHxpbnRlZ2VyfG1heDo5OTk5JywKICAgICAgICAgICAgJ3R5cGUnID0+ICdyZXF1aXJlZCcsCiAgICAgICAgICAgICdyZW1hcmtzJyA9PiAnbnVsbGFibGV8bWF4OjMwMCcKICAgICAgICBdKTsKCiAgICAgICAgLy8gJHBlcmNlbnRhZ2UgPSBQYXltZW50VGVybTo6d2hlcmVOb3RJbignaWQnLCBbJHBheW1lbnRUZXJtLT5pZF0pLT5zdW0oJ3BlcmNlbnRhZ2UnKSskcmVxdWVzdC0+cGVyY2VudGFnZTsKICAgICAgICAkcGVyY2VudGFnZSA9ICRyZXF1ZXN0LT5wZXJjZW50YWdlOwogICAgICAgIGlmKCRwZXJjZW50YWdlID4gMTAwKXsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5iYWNrV2l0aEVycm9yKCJQZXJjZW50YWdlIGxpbWl0IEV4Y2VlZGVkISIpOwogICAgICAgIH0KCiAgICAgICAgJGlucHV0ID0gJHJlcXVlc3QtPmV4Y2VwdCgncGFzc3dvcmQnLCAnX3Rva2VuJyk7CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgICRwYXltZW50VGVybS0+dXBkYXRlKCRpbnB1dCk7CgogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmJhY2tXaXRoU3VjY2VzcygnUGF5bWVudCBUZXJtIERhdGEgVXBkYXRlIHN1Y2Nlc3NmdWxseScpOwoKICAgICAgICB9IGNhdGNoIChcRXhjZXB0aW9uICRlKSB7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+YmFja1dpdGhFcnJvcigkZS0+Z2V0TWVzc2FnZSgpKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBSZW1vdmUgdGhlIHNwZWNpZmllZCByZXNvdXJjZSBmcm9tIHN0b3JhZ2UuCiAgICAgKgogICAgICogQHBhcmFtICBcQXBwXE1vZGVsc1xQbXNNb2RlbHNcUGF5bWVudFRlcm0gICRwYXltZW50VGVybQogICAgICogQHJldHVybiBcSWxsdW1pbmF0ZVxIdHRwXFJlc3BvbnNlCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBkZXN0cm95KFBheW1lbnRUZXJtICRwYXltZW50VGVybSkKICAgIHsKICAgICAgICB0cnl7CiAgICAgICAgICAgICRwYXltZW50VGVybS0+ZGVsZXRlKCk7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+YmFja1dpdGhTdWNjZXNzKCdQYXltZW50IFRlcm0gRGF0YSBVcGRhdGUgc3VjY2Vzc2Z1bGx5Jyk7CiAgICAgICAgfWNhdGNoKFxFeGNlcHRpb24gJGUpewogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmJhY2tXaXRoRXJyb3IoJGUtPmdldE1lc3NhZ2UoKSk7CgogICAgICAgIH0KICAgIH0KfQo=