<?php
bolt_decrypt( __FILE__ , 'cMaCJD'); return 0;
##!!!##