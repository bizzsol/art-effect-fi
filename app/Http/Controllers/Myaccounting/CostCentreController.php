<?php
bolt_decrypt( __FILE__ , 'JKrJOX'); return 0;
##!!!##