<?php
bolt_decrypt( __FILE__ , 'it6Do2'); return 0;
##!!!##