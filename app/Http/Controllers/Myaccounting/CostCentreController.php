<?php
bolt_decrypt( __FILE__ , 'Y6JOeU'); return 0;
##!!!##