<?php
bolt_decrypt( __FILE__ , '6FcNar'); return 0;
##!!!##CgpuYW1lc3BhY2UgQXBwXEh0dHBcQ29udHJvbGxlcnNcTXlhY2NvdW50aW5nOwoKdXNlIEFwcFxIdHRwXENvbnRyb2xsZXJzXENvbnRyb2xsZXI7CnVzZSBJbGx1bWluYXRlXEh0dHBcUmVxdWVzdDsKCnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xBY2NvdW50c1xDb21wYW55Owp1c2UgQXBwXE1vZGVsc1xQbXNNb2RlbHNcQWNjb3VudHNcUHJvZml0Q2VudHJlOwp1c2UgQXBwXE1vZGVsc1xQbXNNb2RlbHNcQWNjb3VudHNcQ29zdENlbnRyZTsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXEFjY291bnRzXFVzZXJDb3N0Q2VudHJlOwp1c2UgQXBwXE1vZGVsc1xQbXNNb2RlbHNcQWNjb3VudHNcQ2hhcnRPZkFjY291bnQ7CnVzZSBBcHBcTW9kZWxzXEhyXFVuaXQ7CnVzZSBBcHBcTW9kZWxzXEhyXERlcGFydG1lbnQ7CnVzZSBBcHBcVXNlcjsKCnVzZSBBcHAsREI7CnVzZSBJbGx1bWluYXRlXFN1cHBvcnRcRmFjYWRlc1xBdXRoOwp1c2UgRGF0YVRhYmxlczsKCmNsYXNzIENvc3RDZW50cmVDb250cm9sbGVyIGV4dGVuZHMgQ29udHJvbGxlcgp7ICAgCiAgICBwdWJsaWMgZnVuY3Rpb24gaGVhZGVyQ29sdW1ucygkdmFsdWU9JycpCiAgICB7CiAgICAgICAgcmV0dXJuIGFycmF5KAogICAgICAgICAgICBbJ1NMJywgJ1NMJ10sCiAgICAgICAgICAgIFsnY29tcGFueScsICdjb21wYW55J10sCiAgICAgICAgICAgIFsncHJvZml0X2NlbnRyZScsICdwcm9maXRfY2VudHJlJ10sCiAgICAgICAgICAgIFsnZGVwYXJ0bWVudCcsICdkZXBhcnRtZW50J10sCiAgICAgICAgICAgIFsnY29zdF9jZW50cmVfY29kZScsICdjb3N0X2NlbnRyZV9jb2RlJywndGV4dC1jZW50ZXInXSwKICAgICAgICAgICAgWydjb3N0X2NlbnRyZV9uYW1lJywgJ2Nvc3RfY2VudHJlX25hbWUnXSwKICAgICAgICAgICAgWydpc19wcm9maXRfY2VudHJlXz8nLCAnaXNfcHJvZml0X2NlbnRyZV8/JywgJ3RleHQtY2VudGVyJ10sCiAgICAgICAgICAgIC8vIFsndW5pdCcsICd1bml0JywgJ3RleHQtY2VudGVyJ10sIAogICAgICAgICAgICAvLyBbJ2xvZ28nLCAnbG9nbycsICd0ZXh0LWNlbnRlciddLCAKICAgICAgICAgICAgLy8gWydiYW5uZXInLCAnYmFubmVyJywgJ3RleHQtY2VudGVyJ10sIAogICAgICAgICAgICAvLyBbJ2xlZGdlcicsICdsZWRnZXInLCAndGV4dC1jZW50ZXInXSwgCiAgICAgICAgICAgIFsnYWN0aW9ucycsICdhY3Rpb25zJywgJ3RleHQtY2VudGVyJ10KICAgICAgICApOwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBpbmRleCgpCiAgICB7CiAgICAgICAgaWYocmVxdWVzdCgpLT5oYXMoJ3VwZGF0ZS1jb3N0LWNlbnRyZXMnKSl7CiAgICAgICAgICAgICRwcm9maXRDZW50cmVzID0gUHJvZml0Q2VudHJlOjp3aXRoKFsKICAgICAgICAgICAgICAgICdjb21wYW55JwogICAgICAgICAgICBdKQogICAgICAgICAgICAtPmdldCgpOwogICAgICAgICAgICAkdW5pdHMgPSBVbml0OjphbGwoKTsKICAgICAgICAgICAgZm9yZWFjaCAoJHByb2ZpdENlbnRyZXMgYXMgJHByb2ZpdENlbnRyZSkgewogICAgICAgICAgICAgICAgQ29zdENlbnRyZTo6dXBkYXRlT3JDcmVhdGUoWwogICAgICAgICAgICAgICAgICAgICdwcm9maXRfY2VudHJlX2lkJyA9PiAkcHJvZml0Q2VudHJlLT5pZCwKICAgICAgICAgICAgICAgICAgICAnaHJfdW5pdF9pZCcgPT4gJHVuaXRzLT53aGVyZSgnaHJfdW5pdF9jb2RlJywgJHByb2ZpdENlbnRyZS0+Y29tcGFueS0+Y29kZSktPmZpcnN0KCktPmhyX3VuaXRfaWQsCiAgICAgICAgICAgICAgICAgICAgJ2hyX2RlcGFydG1lbnRfaWQnID0+IDAsCiAgICAgICAgICAgICAgICAgICAgJ2NvZGUnID0+ICRwcm9maXRDZW50cmUtPmNvZGUuc3Vic3RyKCRwcm9maXRDZW50cmUtPmNvZGUsIHN0cmxlbigkcHJvZml0Q2VudHJlLT5jb21wYW55LT5jb2RlKSwgNiksCiAgICAgICAgICAgICAgICBdLCBbCiAgICAgICAgICAgICAgICAgICAgJ25hbWUnID0+ICRwcm9maXRDZW50cmUtPm5hbWUsCiAgICAgICAgICAgICAgICAgICAgJ3Bob25lJyA9PiAnLicsCiAgICAgICAgICAgICAgICAgICAgJ2VtYWlsJyA9PiAnLicsCiAgICAgICAgICAgICAgICAgICAgJ2FkZHJlc3MnID0+ICcuJywKICAgICAgICAgICAgICAgICAgICAnY2hhcnRfb2ZfYWNjb3VudF9pZCcgPT4gMTMxMwogICAgICAgICAgICAgICAgXSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiAnb2snOwogICAgICAgIH0KCiAgICAgICAgJHRpdGxlID0gJ0Nvc3QgQ2VudHJlcyc7CiAgICAgICAgJHByb2ZpdF9jZW50cmVfaWQgPSByZXF1ZXN0KCktPmhhcygncHJvZml0X2NlbnRyZV9pZCcpP3JlcXVlc3QoKS0+Z2V0KCdwcm9maXRfY2VudHJlX2lkJyk6MDsKICAgICAgICAkaHJfdW5pdF9pZCA9IHJlcXVlc3QoKS0+aGFzKCdocl91bml0X2lkJyk/cmVxdWVzdCgpLT5nZXQoJ2hyX3VuaXRfaWQnKTowOwogICAgICAgICRocl9kZXBhcnRtZW50X2lkID0gcmVxdWVzdCgpLT5oYXMoJ2hyX2RlcGFydG1lbnRfaWQnKT9yZXF1ZXN0KCktPmdldCgnaHJfZGVwYXJ0bWVudF9pZCcpOjA7CiAgICAgICAgCiAgICAgICAgJG9wdGlvbnMgPSBbCiAgICAgICAgICAgICdjb3N0LWNlbnRyZS1wcm9maWxlJz0+YXV0aCgpLT51c2VyKCktPmhhc1Blcm1pc3Npb25UbygnY29zdC1jZW50cmUtcHJvZmlsZScpLAogICAgICAgICAgICAnY29zdC1jZW50cmUtZWRpdCc9PmF1dGgoKS0+dXNlcigpLT5oYXNQZXJtaXNzaW9uVG8oJ2Nvc3QtY2VudHJlLWVkaXQnKSwKICAgICAgICAgICAgJ2Nvc3QtY2VudHJlLWRlbGV0ZSc9PmF1dGgoKS0+dXNlcigpLT5oYXNQZXJtaXNzaW9uVG8oJ2Nvc3QtY2VudHJlLWRlbGV0ZScpCiAgICAgICAgXTsKCiAgICAgICAgdHJ5IHsKCiAgICAgICAgICAgICRjb3N0Q2VudHJlcyA9IENvc3RDZW50cmU6OndpdGgoWwogICAgICAgICAgICAgICAgJ3Byb2ZpdENlbnRyZS5jb21wYW55JywKICAgICAgICAgICAgICAgICd1bml0JywKICAgICAgICAgICAgICAgICdkZXBhcnRtZW50JwogICAgICAgICAgICBdKQogICAgICAgICAgICAtPndoZW4oJHByb2ZpdF9jZW50cmVfaWQgPiAwLCBmdW5jdGlvbigkcXVlcnkpewogICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ3Byb2ZpdF9jZW50cmVfaWQnLCByZXF1ZXN0KCktPmdldCgncHJvZml0X2NlbnRyZV9pZCcpKTsKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLT53aGVuKCRocl91bml0X2lkID4gMCwgZnVuY3Rpb24oJHF1ZXJ5KXsKICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlKCdocl91bml0X2lkJywgcmVxdWVzdCgpLT5nZXQoJ2hyX3VuaXRfaWQnKSk7CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC0+d2hlbigkaHJfZGVwYXJ0bWVudF9pZCA+IDAsIGZ1bmN0aW9uKCRxdWVyeSl7CiAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnaHJfZGVwYXJ0bWVudF9pZCcsIHJlcXVlc3QoKS0+Z2V0KCdocl9kZXBhcnRtZW50X2lkJykpOwogICAgICAgICAgICB9KQogICAgICAgICAgICAtPndoZW4oIWRhdGF0YWJsZU9yZGVyaW5nKCksIGZ1bmN0aW9uKCRxdWVyeSl7CiAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT5vcmRlcmJ5KCdpZCcsICdkZXNjJyk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgaWYgKHJlcXVlc3QoKS0+YWpheCgpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gRGF0YXRhYmxlczo6b2YoJGNvc3RDZW50cmVzKQogICAgICAgICAgICAgICAgLT5hZGRJbmRleENvbHVtbigpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC0+YWRkQ29sdW1uKCdjb21wYW55JywgZnVuY3Rpb24oJGNvc3RDZW50cmUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNzZXQoJGNvc3RDZW50cmUtPnByb2ZpdENlbnRyZS0+Y29tcGFueS0+Y29kZSkgPyAnWycuJGNvc3RDZW50cmUtPnByb2ZpdENlbnRyZS0+Y29tcGFueS0+Y29kZS4nXSAnLiRjb3N0Q2VudHJlLT5wcm9maXRDZW50cmUtPmNvbXBhbnktPm5hbWUgOiAnJzsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAtPmZpbHRlckNvbHVtbignY29tcGFueScsIGZ1bmN0aW9uICgkcXVlcnksICRrZXl3b3JkKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmVIYXMoJ3Byb2ZpdENlbnRyZS5jb21wYW55JywgZnVuY3Rpb24gKCRxdWVyeSkgdXNlKCRrZXl3b3JkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRxdWVyeS0+d2hlcmUoJ25hbWUnLCAnTElLRScsICclJy4ka2V5d29yZC4nJScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+b3J3aGVyZSgnY29kZScsICdMSUtFJywgJyUnLiRrZXl3b3JkLiclJyk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLT5vcmRlckNvbHVtbignY29tcGFueScsIGZ1bmN0aW9uICgkcXVlcnksICRvcmRlcikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBwbGVhc2VTb3J0TWUoJHF1ZXJ5LCAkb3JkZXIsIFByb2ZpdENlbnRyZTo6c2VsZWN0KCdjb21wYW5pZXMubmFtZScpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+am9pbignY29tcGFuaWVzJywgJ2NvbXBhbmllcy5pZCcsICc9JywgJ3Byb2ZpdF9jZW50cmVzLmNvbXBhbnlfaWQnKQogICAgICAgICAgICAgICAgICAgICAgICAtPndoZXJlQ29sdW1uKCdwcm9maXRfY2VudHJlcy5pZCcsICdjb3N0X2NlbnRyZXMucHJvZml0X2NlbnRyZV9pZCcpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+dGFrZSgxKQogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9KQoKICAgICAgICAgICAgICAgIC0+YWRkQ29sdW1uKCdwcm9maXRfY2VudHJlJywgZnVuY3Rpb24oJGNvc3RDZW50cmUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNzZXQoJGNvc3RDZW50cmUtPnByb2ZpdENlbnRyZS0+bmFtZSkgPyAnWycuJGNvc3RDZW50cmUtPnByb2ZpdENlbnRyZS0+Y29kZS4nXSAnLiRjb3N0Q2VudHJlLT5wcm9maXRDZW50cmUtPm5hbWUgOiAnJzsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAtPmZpbHRlckNvbHVtbigncHJvZml0X2NlbnRyZScsIGZ1bmN0aW9uICgkcXVlcnksICRrZXl3b3JkKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmVIYXMoJ3Byb2ZpdENlbnRyZScsIGZ1bmN0aW9uICgkcXVlcnkpIHVzZSgka2V5d29yZCkgewogICAgICAgICAgICAgICAgICAgICAgICAkcXVlcnktPndoZXJlKCdjb2RlJywgJ0xJS0UnLCAnJScuJGtleXdvcmQuJyUnKS0+b3JXaGVyZSgnbmFtZScsICdMSUtFJywgJyUnLiRrZXl3b3JkLiclJyk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLT5vcmRlckNvbHVtbigncHJvZml0X2NlbnRyZScsIGZ1bmN0aW9uICgkcXVlcnksICRvcmRlcikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBwbGVhc2VTb3J0TWUoJHF1ZXJ5LCAkb3JkZXIsIFByb2ZpdENlbnRyZTo6c2VsZWN0KCdwcm9maXRfY2VudHJlcy5jb2RlJykKICAgICAgICAgICAgICAgICAgICAgICAgLT53aGVyZUNvbHVtbigncHJvZml0X2NlbnRyZXMuaWQnLCAnY29zdF9jZW50cmVzLnByb2ZpdF9jZW50cmVfaWQnKQogICAgICAgICAgICAgICAgICAgICAgICAtPnRha2UoMSkKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgfSkKCiAgICAgICAgICAgICAgICAtPmFkZENvbHVtbignY29zdF9jZW50cmVfY29kZScsIGZ1bmN0aW9uKCRjb3N0Q2VudHJlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRjb3N0Q2VudHJlLT5jb2RlOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC0+ZmlsdGVyQ29sdW1uKCdjb3N0X2NlbnRyZV9jb2RlJywgZnVuY3Rpb24gKCRxdWVyeSwgJGtleXdvcmQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnY29kZScsICdMSUtFJywgJyUnLiRrZXl3b3JkLiclJyk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLT5vcmRlckNvbHVtbignY29zdF9jZW50cmVfY29kZScsIGZ1bmN0aW9uICgkcXVlcnksICRvcmRlcikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPm9yZGVyQnkoJ2NvZGUnLCAkb3JkZXIpOwogICAgICAgICAgICAgICAgfSkKCiAgICAgICAgICAgICAgICAtPmFkZENvbHVtbignY29zdF9jZW50cmVfbmFtZScsIGZ1bmN0aW9uKCRjb3N0Q2VudHJlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRjb3N0Q2VudHJlLT5uYW1lOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC0+ZmlsdGVyQ29sdW1uKCdjb3N0X2NlbnRyZV9uYW1lJywgZnVuY3Rpb24gKCRxdWVyeSwgJGtleXdvcmQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnbmFtZScsICdMSUtFJywgJyUnLiRrZXl3b3JkLiclJyk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLT5vcmRlckNvbHVtbignY29zdF9jZW50cmVfbmFtZScsIGZ1bmN0aW9uICgkcXVlcnksICRvcmRlcikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPm9yZGVyQnkoJ25hbWUnLCAkb3JkZXIpOwogICAgICAgICAgICAgICAgfSkKCiAgICAgICAgICAgICAgICAtPmFkZENvbHVtbigndW5pdCcsIGZ1bmN0aW9uKCRjb3N0Q2VudHJlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzc2V0KCRjb3N0Q2VudHJlLT51bml0LT5ocl91bml0X3Nob3J0X25hbWUpPyRjb3N0Q2VudHJlLT51bml0LT5ocl91bml0X3Nob3J0X25hbWU6Jyc7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLT5maWx0ZXJDb2x1bW4oJ3VuaXQnLCBmdW5jdGlvbiAoJHF1ZXJ5LCAka2V5d29yZCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlSGFzKCd1bml0JywgZnVuY3Rpb24gKCRxdWVyeSkgdXNlKCRrZXl3b3JkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRxdWVyeS0+d2hlcmUoJ2hyX3VuaXRfc2hvcnRfbmFtZScsICdMSUtFJywgJyUnLiRrZXl3b3JkLiclJyk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KQoKICAgICAgICAgICAgICAgIC0+YWRkQ29sdW1uKCdkZXBhcnRtZW50JywgZnVuY3Rpb24oJGNvc3RDZW50cmUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNzZXQoJGNvc3RDZW50cmUtPmRlcGFydG1lbnQtPmhyX2RlcGFydG1lbnRfbmFtZSkgPyAnWycuJGNvc3RDZW50cmUtPmRlcGFydG1lbnQtPmhyX2RlcGFydG1lbnRfY29kZS4nXSAnLiRjb3N0Q2VudHJlLT5kZXBhcnRtZW50LT5ocl9kZXBhcnRtZW50X25hbWUgOiAnJzsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAtPmZpbHRlckNvbHVtbignZGVwYXJ0bWVudCcsIGZ1bmN0aW9uICgkcXVlcnksICRrZXl3b3JkKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmVIYXMoJ2RlcGFydG1lbnQnLCBmdW5jdGlvbiAoJHF1ZXJ5KSB1c2UoJGtleXdvcmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHF1ZXJ5LT53aGVyZSgnaHJfZGVwYXJ0bWVudF9jb2RlJywgJ0xJS0UnLCAnJScuJGtleXdvcmQuJyUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPm9yV2hlcmUoJ2hyX2RlcGFydG1lbnRfbmFtZScsICdMSUtFJywgJyUnLiRrZXl3b3JkLiclJyk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KQoKICAgICAgICAgICAgICAgIC0+ZWRpdENvbHVtbignbG9nbycsIGZ1bmN0aW9uKCRjb3N0Q2VudHJlKXsKICAgICAgICAgICAgICAgICAgICBpZighZW1wdHkoJGNvc3RDZW50cmUtPmxvZ28pKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICAgICc8aW1nIHNyYz0iJy5hc3NldCgkY29zdENlbnRyZS0+bG9nbykuJyIgc3R5bGU9Im1heC1oZWlnaHQ6IDE1cHgiPic7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC0+ZWRpdENvbHVtbignYmFubmVyJywgZnVuY3Rpb24oJGNvc3RDZW50cmUpewogICAgICAgICAgICAgICAgICAgIGlmKCFlbXB0eSgkY29zdENlbnRyZS0+YmFubmVyKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAgICAnPGltZyBzcmM9IicuYXNzZXQoJGNvc3RDZW50cmUtPmJhbm5lcikuJyIgc3R5bGU9Im1heC1oZWlnaHQ6IDE1cHgiPic7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC0+YWRkQ29sdW1uKCdpc19wcm9maXRfY2VudHJlXz8nLCBmdW5jdGlvbigkY29zdENlbnRyZSl7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRjb3N0Q2VudHJlLT5pc19wcm9maXRfY2VudHJlID09IDEgPyAnWWVzJyA6ICdObyc7CiAgICAgICAgICAgICAgICB9KQoKICAgICAgICAgICAgICAgIC8vIC0+YWRkQ29sdW1uKCdsZWRnZXInLCBmdW5jdGlvbiAoJGNvc3RDZW50cmUpIHsKICAgICAgICAgICAgICAgIC8vICAgICByZXR1cm4gJ1snLiRjb3N0Q2VudHJlLT5jaGFydE9mQWNjb3VudC0+Y29kZS4nXSAnLiRjb3N0Q2VudHJlLT5jaGFydE9mQWNjb3VudC0+bmFtZTsKICAgICAgICAgICAgICAgIC8vIH0pCiAgICAgICAgICAgICAgICAvLyAtPmZpbHRlckNvbHVtbignbGVkZ2VyJywgZnVuY3Rpb24gKCRxdWVyeSwgJGtleXdvcmQpIHsKICAgICAgICAgICAgICAgIC8vICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZUhhcygnY2hhcnRPZkFjY291bnQnLCBmdW5jdGlvbiAoJHF1ZXJ5KSB1c2UgKCRrZXl3b3JkKSB7CiAgICAgICAgICAgICAgICAvLyAgICAgICAgICRxdWVyeS0+d2hlcmUoJ2NvZGUnLCAnTElLRScsICclJyAuICRrZXl3b3JkIC4gJyUnKQogICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAtPm9yV2hlcmUoJ25hbWUnLCAnTElLRScsICclJyAuICRrZXl3b3JkIC4gJyUnKTsKICAgICAgICAgICAgICAgIC8vICAgICB9KTsKICAgICAgICAgICAgICAgIC8vIH0pCiAgICAgICAgICAgICAgICAvLyAtPm9yZGVyQ29sdW1uKCdsZWRnZXInLCBmdW5jdGlvbiAoJHF1ZXJ5LCAkb3JkZXIpIHsKICAgICAgICAgICAgICAgIC8vICAgICByZXR1cm4gcGxlYXNlU29ydE1lKCRxdWVyeSwgJG9yZGVyLCBDaGFydE9mQWNjb3VudDo6c2VsZWN0KCdjaGFydF9vZl9hY2NvdW50cy5uYW1lJykKICAgICAgICAgICAgICAgIC8vICAgICAgICAgLT53aGVyZUNvbHVtbignY2hhcnRfb2ZfYWNjb3VudHMuaWQnLCAnYmFua19hY2NvdW50cy5jaGFydF9vZl9hY2NvdW50X2lkJykKICAgICAgICAgICAgICAgIC8vICAgICAgICAgLT50YWtlKDEpCiAgICAgICAgICAgICAgICAvLyAgICAgKTsKICAgICAgICAgICAgICAgIC8vIH0pCgogICAgICAgICAgICAgICAgLT5hZGRDb2x1bW4oJ2FjdGlvbnMnLCBmdW5jdGlvbigkY29zdENlbnRyZSkgdXNlKCRvcHRpb25zKXsKICAgICAgICAgICAgICAgICAgICAkYWN0aW9ucyA9ICcnOwoKICAgICAgICAgICAgICAgICAgICBpZigkb3B0aW9uc1snY29zdC1jZW50cmUtcHJvZmlsZSddKXsKICAgICAgICAgICAgICAgICAgICAgICAgJGFjdGlvbnMgLj0gJzxhIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1zdWNjZXNzIHJvdW5kZWQtY2lyY2xlIG0tMSIgaHJlZj0iJy51cmwoJ2FjY291bnRpbmcvY29zdC1jZW50cmVzLycuJGNvc3RDZW50cmUtPmlkKS4nIj48aSBjbGFzcz0ibGFyIGxhLWFkZHJlc3MtY2FyZCI+PC9pPjwvYT4nOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYoJG9wdGlvbnNbJ2Nvc3QtY2VudHJlLWVkaXQnXSl7CiAgICAgICAgICAgICAgICAgICAgICAgICRhY3Rpb25zIC49ICc8YSBjbGFzcz0iYnRuIGJ0bi14cyBidG4tcHJpbWFyeSByb3VuZGVkLWNpcmNsZSBtLTEiIGhyZWY9IicuIHVybCgnYWNjb3VudGluZy9jb3N0LWNlbnRyZXMvJy4kY29zdENlbnRyZS0+aWQuJy9lZGl0JykuJyI+PGkgY2xhc3M9ImxhcyBsYS1lZGl0Ij48L2k+PC9hPic7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZigkb3B0aW9uc1snY29zdC1jZW50cmUtZGVsZXRlJ10pewogICAgICAgICAgICAgICAgICAgICAgICAkYWN0aW9ucyAuPSAnPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iYnRuIGJ0bi14cyBidG4tZGFuZ2VyIG0tMSIgZGF0YS1zcmM9Iicucm91dGUoJ2FjY291bnRpbmcuY29zdC1jZW50cmVzLmRlc3Ryb3knLCAkY29zdENlbnRyZS0+aWQpLiciIG9uY2xpY2s9ImRlbGV0ZUZyb21DUlVEKCQodGhpcykpIj48aSBjbGFzcz0ibGEgbGEtdHJhc2giPjwvaT48L2E+JzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRhY3Rpb25zOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC0+cmF3Q29sdW1ucyhbJ2NvbXBhbnknLCdsb2dvJywnYmFubmVyJywnYWN0aW9ucyddKQogICAgICAgICAgICAgICAgLT5tYWtlKHRydWUpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkZGF0YSA9IFsKICAgICAgICAgICAgICAgICd0aXRsZScgPT4gJHRpdGxlLAogICAgICAgICAgICAgICAgJ2NvbXBhbmllcycgPT4gQ29tcGFueTo6d2l0aChbCiAgICAgICAgICAgICAgICAgICAgJ3Byb2ZpdENlbnRyZXMnCiAgICAgICAgICAgICAgICBdKS0+Z2V0KCksCiAgICAgICAgICAgICAgICAndW5pdHMnID0+IFVuaXQ6OmFsbCgpLAogICAgICAgICAgICAgICAgJ2RlcGFydG1lbnRzJyA9PiBEZXBhcnRtZW50OjphbGwoKSwKICAgICAgICAgICAgICAgICdoZWFkZXJDb2x1bW5zJyA9PiAkdGhpcy0+aGVhZGVyQ29sdW1ucygpLAogICAgICAgICAgICBdOwoKICAgICAgICAgICAgcmV0dXJuIHZpZXcoJ2FjY291bnRpbmcuYmFja2VuZC5wYWdlcy5jb3N0Q2VudHJlcy5pbmRleCcsICRkYXRhKTsKICAgICAgICB9Y2F0Y2ggKFxUaHJvd2FibGUgJHRoKXsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5iYWNrV2l0aEVycm9yKCR0aC0+Z2V0TWVzc2FnZSgpKTsKICAgICAgICB9CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIGNyZWF0ZSgpCiAgICB7CiAgICAgICAgaWYocmVxdWVzdCgpLT5oYXMoJ2Nvc3QtY2VudHJlcycpKXsKICAgICAgICAgICAgJGNvbXBhbmllcyA9IENvbXBhbnk6OndpdGgoWwogICAgICAgICAgICAgICAgJ3Byb2ZpdENlbnRyZXMnCiAgICAgICAgICAgIF0pLT5nZXQoKTsKICAgICAgICAgICAgJHVuaXRzID0gVW5pdDo6YWxsKCk7CiAgICAgICAgICAgICRkZXBhcnRtZW50cyA9IERlcGFydG1lbnQ6OmFsbCgpOwoKICAgICAgICAgICAgZm9yZWFjaCgkY29tcGFuaWVzIGFzICRjb21wYW55KXsKICAgICAgICAgICAgICAgIGZvcmVhY2goJHVuaXRzIGFzICR1bml0KXsKICAgICAgICAgICAgICAgICAgICBmb3JlYWNoKCRkZXBhcnRtZW50cyBhcyAkZGVwYXJ0bWVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgIENvc3RDZW50cmU6OnVwZGF0ZU9yQ3JlYXRlKFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb21wYW55X2lkJyA9PiAkY29tcGFueS0+aWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaHJfdW5pdF9pZCcgPT4gJHVuaXQtPmhyX3VuaXRfaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaHJfZGVwYXJ0bWVudF9pZCcgPT4gJGRlcGFydG1lbnQtPmhyX2RlcGFydG1lbnRfaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgXSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvZGUnID0+IHJhbmQoMTAwLCA5OTkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ25hbWUnID0+ICRjb21wYW55LT5jb2RlLictJy4kdW5pdC0+aHJfdW5pdF9zaG9ydF9uYW1lLictJy4kZGVwYXJ0bWVudC0+aHJfZGVwYXJ0bWVudF9uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Bob25lJyA9PiAkY29tcGFueS0+cGhvbmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZW1haWwnID0+ICRjb21wYW55LT5lbWFpbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRyZXNzJyA9PiAkY29tcGFueS0+YWRkcmVzcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydF9vZl9hY2NvdW50X2lkJyA9PiAxODQsCiAgICAgICAgICAgICAgICAgICAgICAgIF0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYocmVxdWVzdCgpLT5oYXMoJ2dldC1jb21wYW55LWluZm9ybWF0aW9uJykpewogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbihbCiAgICAgICAgICAgICAgICAncHJvZml0X2NlbnRyZXMnID0+IFByb2ZpdENlbnRyZTo6d2hlcmUoJ2NvbXBhbnlfaWQnLCByZXF1ZXN0KCktPmdldCgnY29tcGFueV9pZCcpKS0+b3JkZXJCeSgnY29kZScsICdhc2MnKS0+Z2V0KCksCiAgICAgICAgICAgICAgICAnZGVwYXJ0bWVudHMnID0+IERlcGFydG1lbnQ6OndoZXJlSGFzKCd1bml0JywgZnVuY3Rpb24oJHF1ZXJ5KXsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnY29tcGFueV9pZCcsIHJlcXVlc3QoKS0+Z2V0KCdjb21wYW55X2lkJykpOwogICAgICAgICAgICAgICAgfSktPmdldCgpLAogICAgICAgICAgICAgICAgJ3VzZXJzJyA9PiBVc2VyOjp3aGVyZUhhcygnY29tcGFuaWVzJywgZnVuY3Rpb24oJHF1ZXJ5KXsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnY29tcGFueV9pZCcsIHJlcXVlc3QoKS0+Z2V0KCdjb21wYW55X2lkJykpOwogICAgICAgICAgICAgICAgfSktPmdldCgpCiAgICAgICAgICAgIF0pOwogICAgICAgIH0KCiAgICAgICAgJGRhdGEgPSBbCiAgICAgICAgICAgICd0aXRsZScgPT4gJ05ldyBDb3N0IENlbnRyZScsCiAgICAgICAgICAgICdjb21wYW5pZXMnID0+IENvbXBhbnk6OmFsbCgpLAogICAgICAgIF07CgogICAgICAgIHJldHVybiB2aWV3KCdhY2NvdW50aW5nLmJhY2tlbmQucGFnZXMuY29zdENlbnRyZXMuY3JlYXRlJywgJGRhdGEpOwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBjaGVja1VuaXREZXBhcnRtZW50KCRwcm9maXRfY2VudHJlX2lkLCAkaHJfdW5pdF9pZCwgJGhyX2RlcGFydG1lbnRfaWQpCiAgICB7CiAgICAgICAgaWYoJGhyX2RlcGFydG1lbnRfaWQgPT0gMCB8fCBDb3N0Q2VudHJlOjp3aGVyZShbCiAgICAgICAgICAgICdwcm9maXRfY2VudHJlX2lkJyA9PiAkcHJvZml0X2NlbnRyZV9pZCwKICAgICAgICAgICAgJ2hyX3VuaXRfaWQnID0+ICRocl91bml0X2lkLAogICAgICAgICAgICAnaHJfZGVwYXJ0bWVudF9pZCcgPT4gJGhyX2RlcGFydG1lbnRfaWQKICAgICAgICBdKS0+Y291bnQoKSA9PSAwKXsKICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oWwogICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnID0+IHRydWUKICAgICAgICAgICAgXSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbihbCiAgICAgICAgICAgICdzdWNjZXNzJyA9PiBmYWxzZQogICAgICAgIF0pOwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBzdG9yZShSZXF1ZXN0ICRyZXF1ZXN0KQogICAgewogICAgICAgICRyZXF1ZXN0LT52YWxpZGF0ZShbCiAgICAgICAgICAgIC8vICdjaGFydF9vZl9hY2NvdW50X2lkJyA9PiAncmVxdWlyZWQnLAogICAgICAgICAgICAnY29tcGFueV9pZCcgPT4gJ3JlcXVpcmVkJywKICAgICAgICAgICAgJ3Byb2ZpdF9jZW50cmVfaWQnID0+ICdyZXF1aXJlZCcsCiAgICAgICAgICAgICdocl9kZXBhcnRtZW50X2lkJyA9PiAncmVxdWlyZWQnLAogICAgICAgICAgICAnbmFtZScgPT4gJ3JlcXVpcmVkJywKICAgICAgICAgICAgLy8gJ3Bob25lJyA9PiBbJ3JlcXVpcmVkJywgJ3N0cmluZycsICdtYXg6MTQnLCAncmVnZXg6L14oWzAtOVxzXC1cK1woXCldKikkLyddLAogICAgICAgICAgICAvLyAnZW1haWwnID0+ICdyZXF1aXJlZCcsCiAgICAgICAgICAgIC8vICdhZGRyZXNzJyA9PiAncmVxdWlyZWQnLAogICAgICAgICAgICAnY29kZScgPT4gJ3JlcXVpcmVkfHVuaXF1ZTpjb3N0X2NlbnRyZXMnCiAgICAgICAgXSk7CgogICAgICAgIGlmKCRyZXF1ZXN0LT5oYXNGaWxlKCdsb2dvX2ZpbGUnKSl7CiAgICAgICAgICAgICRyZXF1ZXN0LT52YWxpZGF0ZShbCiAgICAgICAgICAgICAgICAnbG9nb19maWxlJyA9PiBbJ3JlcXVpcmVkJywnbWltZXM6anBlZyxqcGcscG5nLGdpZicsICdtYXg6MzA3MiddLAogICAgICAgICAgICBdKTsKICAgICAgICB9CgogICAgICAgIGlmKCRyZXF1ZXN0LT5oYXNGaWxlKCdiYW5uZXJfZmlsZScpKXsKICAgICAgICAgICAgJHJlcXVlc3QtPnZhbGlkYXRlKFsKICAgICAgICAgICAgICAgICdiYW5uZXJfZmlsZScgPT4gWydyZXF1aXJlZCcsJ21pbWVzOmpwZWcsanBnLHBuZyxnaWYnLCAnbWF4OjMwNzInXSwKICAgICAgICAgICAgXSk7CiAgICAgICAgfQoKICAgICAgICBEQjo6YmVnaW5UcmFuc2FjdGlvbigpOwoKICAgICAgICAkdW5pdCA9IFVuaXQ6OndoZXJlKCdjb21wYW55X2lkJywgJHJlcXVlc3QtPmNvbXBhbnlfaWQpLT5maXJzdCgpOwogICAgICAgICRtb2RlbCA9IENvc3RDZW50cmU6OndoZXJlKCdwcm9maXRfY2VudHJlX2lkJywgJHJlcXVlc3QtPnByb2ZpdF9jZW50cmVfaWQpCiAgICAgICAgLT53aGVyZSgnaHJfdW5pdF9pZCcsICR1bml0LT5ocl91bml0X2lkKQogICAgICAgIC0+d2hlcmUoJ2hyX2RlcGFydG1lbnRfaWQnLCAkcmVxdWVzdC0+aHJfZGVwYXJ0bWVudF9pZCkKICAgICAgICAtPndoZXJlKCduYW1lJywgJHJlcXVlc3QtPm5hbWUpCiAgICAgICAgLT5maXJzdCgpOwoKICAgICAgICBpZiAoIWlzc2V0KCRtb2RlbC0+aWQpKSB7CiAgICAgICAgICAgICB0cnl7CiAgICAgICAgICAgICAgICAkY29zdENlbnRyZSA9IG5ldyBDb3N0Q2VudHJlKCk7CiAgICAgICAgICAgICAgICAkY29zdENlbnRyZS0+ZmlsbCgkcmVxdWVzdC0+YWxsKCkpOwogICAgICAgICAgICAgICAgJGNvc3RDZW50cmUtPmhyX3VuaXRfaWQgPSAkdW5pdC0+aHJfdW5pdF9pZDsKICAgICAgICAgICAgICAgICRjb3N0Q2VudHJlLT5waG9uZSA9ICFlbXB0eSgkcmVxdWVzdC0+cGhvbmUpID8gJHJlcXVlc3QtPnBob25lIDogJzAxMjM0NTY3ODkwJzsKICAgICAgICAgICAgICAgICRjb3N0Q2VudHJlLT5lbWFpbCA9ICFlbXB0eSgkcmVxdWVzdC0+ZW1haWwpID8gJHJlcXVlc3QtPmVtYWlsIDogJ2V4YW1wbGVAZW1haWwuY29tJzsKICAgICAgICAgICAgICAgICRjb3N0Q2VudHJlLT5jaGFydF9vZl9hY2NvdW50X2lkID0gQ2hhcnRPZkFjY291bnQ6OndoZXJlKCdpZCcsICc+JywgMCktPmZpcnN0KCktPmlkOwogICAgICAgICAgICAgICAgJGNvc3RDZW50cmUtPnNhdmUoKTsKCiAgICAgICAgICAgICAgICBpZigkcmVxdWVzdC0+aGFzRmlsZSgnbG9nb19maWxlJykpewogICAgICAgICAgICAgICAgICAgICRjb3N0Q2VudHJlLT5sb2dvID0gJHRoaXMtPmZpbGVVcGxvYWQoJHJlcXVlc3QtPmZpbGUoJ2xvZ29fZmlsZScpLCAndXBsb2FkL2Nvc3QtY2VudHJlL2xvZ28nKTsKICAgICAgICAgICAgICAgICAgICAkY29zdENlbnRyZS0+c2F2ZSgpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmKCRyZXF1ZXN0LT5oYXNGaWxlKCdiYW5uZXJfZmlsZScpKXsKICAgICAgICAgICAgICAgICAgICAkY29zdENlbnRyZS0+YmFubmVyID0gJHRoaXMtPmZpbGVVcGxvYWQoJHJlcXVlc3QtPmZpbGUoJ2Jhbm5lcl9maWxlJyksICd1cGxvYWQvY29zdC1jZW50cmUvYmFubmVyJyk7CiAgICAgICAgICAgICAgICAgICAgJGNvc3RDZW50cmUtPnNhdmUoKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkdXNlcnMgPSBbXTsKICAgICAgICAgICAgICAgIGlmKGlzc2V0KCRyZXF1ZXN0LT51c2Vyc1swXSkpewogICAgICAgICAgICAgICAgICAgIGZvcmVhY2goJHJlcXVlc3QtPnVzZXJzIGFzICR1c2VyX2lkKXsKICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlfcHVzaCgkdXNlcnMsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1c2VyX2lkJyA9PiAkdXNlcl9pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb3N0X2NlbnRyZV9pZCcgPT4gJGNvc3RDZW50cmUtPmlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NyZWF0ZWRfYXQnID0+IGRhdGUoJ1ktbS1kIEg6aTpzJykKICAgICAgICAgICAgICAgICAgICAgICAgXSk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBVc2VyQ29zdENlbnRyZTo6aW5zZXJ0KCR1c2Vycyk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgREI6OmNvbW1pdCgpOwogICAgICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5yZWRpcmVjdEJhY2tXaXRoU3VjY2VzcygiQ29zdCBDZW50cmUgaGFzIGJlZW4gY3JlYXRlZCBzdWNjZXNzZnVsbHkiLCAnYWNjb3VudGluZy5jb3N0LWNlbnRyZXMuY3JlYXRlJyk7CiAgICAgICAgICAgIH1jYXRjaCAoXFRocm93YWJsZSAkdGgpewogICAgICAgICAgICAgICAgREI6OnJvbGxiYWNrKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMtPmJhY2tXaXRoRXJyb3IoJHRoLT5nZXRNZXNzYWdlKCkpOwogICAgICAgICAgICB9CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIERCOjpyb2xsYmFjaygpOwogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmJhY2tXaXRoRXJyb3IoJ1NvcnJ5ISEuIFRoaXMgVW5pdCAmIERlcGFydG1lbnQgaGF2ZSBhbHJlYWR5IGJlZW4gYWRkZWQuIFRyeSBhbm90aGVyIGNvbWJpbmF0aW9uLicpOwogICAgICAgIH0KICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gc2hvdygkaWQpCiAgICB7CiAgICAgICAgaWYocmVxdWVzdCgpLT5oYXMoJ3Byb2ZpdF9jZW50cmVfaWQnKSl7CiAgICAgICAgICAgIGlmKHJlcXVlc3QoKS0+aGFzKCdjb3N0X2NlbnRyZV9pZCcpKXsKICAgICAgICAgICAgICAgICRjb3N0Q2VudHJlID0gQ29zdENlbnRyZTo6ZmluZChyZXF1ZXN0KCktPmdldCgnY29zdF9jZW50cmVfaWQnKSk7CiAgICAgICAgICAgICAgICBpZigkY29zdENlbnRyZS0+Y29tcGFueV9pZCA9PSByZXF1ZXN0KCktPmdldCgncHJvZml0X2NlbnRyZV9pZCcpKXsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGNvc3RDZW50cmUtPmNvZGU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRjZW50cmUgPSBQcm9maXRDZW50cmU6OndpdGgoWydjb21wYW55J10pLT5maW5kKHJlcXVlc3QoKS0+Z2V0KCdwcm9maXRfY2VudHJlX2lkJykpOwogICAgICAgICAgICAkcHJlZml4ID0gJGNlbnRyZS0+Y29tcGFueS0+Y29kZS4nLSc7CiAgICAgICAgICAgICRwcmVmaXhfbGVuZ3RoID0gc3RybGVuKCRwcmVmaXgpOwogICAgICAgICAgICAkbWF4ID0gREI6OnRhYmxlKCdjb3N0X2NlbnRyZXMnKS0+d2hlcmUoJ3Byb2ZpdF9jZW50cmVfaWQnLCByZXF1ZXN0KCktPmdldCgncHJvZml0X2NlbnRyZV9pZCcpKS0+Y291bnQoKTsKICAgICAgICAgICAgJG5ldyA9IChpbnQpKCRtYXgpOwogICAgICAgICAgICAkbmV3Kys7CiAgICAgICAgICAgICRudW1iZXJfb2ZfemVybyA9IDQtc3RybGVuKCRuZXcpOwogICAgICAgICAgICAkemVybyA9IHN0cl9yZXBlYXQoIjAiLCAkbnVtYmVyX29mX3plcm8pOwogICAgICAgICAgICByZXR1cm4gJHByZWZpeC4kemVyby4kbmV3OwogICAgICAgIH0KCiAgICAgICAgJGNvc3RDZW50cmUgPSBDb3N0Q2VudHJlOjpmaW5kT3JGYWlsKCRpZCk7CiAgICAgICAgJGRhdGEgPSBbCiAgICAgICAgICAgICd0aXRsZScgPT4gJ0Nvc3QgQ2VudHJlIFByb2ZpbGUgLSAjJy4kY29zdENlbnRyZS0+bmFtZSwKICAgICAgICAgICAgJ2Nvc3RDZW50cmUnID0+ICRjb3N0Q2VudHJlCiAgICAgICAgXTsKCiAgICAgICAgcmV0dXJuIHZpZXcoJ2FjY291bnRpbmcuYmFja2VuZC5wYWdlcy5jb3N0Q2VudHJlcy5wcm9maWxlJywgJGRhdGEpOwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBlZGl0KCRpZCkKICAgIHsKICAgICAgICAkZGF0YSA9IFsKICAgICAgICAgICAgJ3RpdGxlJyA9PiAnRWRpdCBDb3N0IENlbnRyZScsCiAgICAgICAgICAgICdjb21wYW5pZXMnID0+IENvbXBhbnk6OndpdGgoWwogICAgICAgICAgICAgICAgJ3Byb2ZpdENlbnRyZXMnCiAgICAgICAgICAgIF0pLT5nZXQoKSwKICAgICAgICAgICAgJ3VuaXRzJyA9PiBVbml0OjphbGwoKSwKICAgICAgICAgICAgJ2RlcGFydG1lbnRzJyA9PiBEZXBhcnRtZW50OjphbGwoKSwKICAgICAgICAgICAgJ2Nvc3RDZW50cmUnID0+IENvc3RDZW50cmU6OndpdGgoWwogICAgICAgICAgICAgICAgJ2Nvc3RDZW50cmVVc2VycycKICAgICAgICAgICAgXSktPmZpbmRPckZhaWwoJGlkKQogICAgICAgIF07CgogICAgICAgIHJldHVybiB2aWV3KCdhY2NvdW50aW5nLmJhY2tlbmQucGFnZXMuY29zdENlbnRyZXMuZWRpdCcsICRkYXRhKTsKICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gdXBkYXRlKFJlcXVlc3QgJHJlcXVlc3QsICRpZCkKICAgIHsKICAgICAgICAkcmVxdWVzdC0+dmFsaWRhdGUoWwogICAgICAgICAgICAvLyAnY2hhcnRfb2ZfYWNjb3VudF9pZCcgPT4gJ3JlcXVpcmVkJywKICAgICAgICAgICAgJ2NvbXBhbnlfaWQnID0+ICdyZXF1aXJlZCcsCiAgICAgICAgICAgICdwcm9maXRfY2VudHJlX2lkJyA9PiAncmVxdWlyZWQnLAogICAgICAgICAgICAnaHJfZGVwYXJ0bWVudF9pZCcgPT4gJ3JlcXVpcmVkJywKICAgICAgICAgICAgJ25hbWUnID0+ICdyZXF1aXJlZCcsCiAgICAgICAgICAgIC8vICdwaG9uZScgPT4gWydyZXF1aXJlZCcsICdzdHJpbmcnLCAnbWF4OjE0JywgJ3JlZ2V4Oi9eKFswLTlcc1wtXCtcKFwpXSopJC8nXSwKICAgICAgICAgICAgLy8gJ2VtYWlsJyA9PiAncmVxdWlyZWQnLAogICAgICAgICAgICAvLyAnYWRkcmVzcycgPT4gJ3JlcXVpcmVkJywKICAgICAgICAgICAgJ2NvZGUnID0+ICdyZXF1aXJlZHx1bmlxdWU6Y29zdF9jZW50cmVzLGNvZGUsJy4kaWQsCiAgICAgICAgXSk7CgogICAgICAgIGlmKCRyZXF1ZXN0LT5oYXNGaWxlKCdsb2dvX2ZpbGUnKSl7CiAgICAgICAgICAgICRyZXF1ZXN0LT52YWxpZGF0ZShbCiAgICAgICAgICAgICAgICAnbG9nb19maWxlJyA9PiBbJ3JlcXVpcmVkJywnbWltZXM6anBlZyxqcGcscG5nLGdpZicsICdtYXg6MzA3MiddLAogICAgICAgICAgICBdKTsKICAgICAgICB9CgogICAgICAgIGlmKCRyZXF1ZXN0LT5oYXNGaWxlKCdiYW5uZXJfZmlsZScpKXsKICAgICAgICAgICAgJHJlcXVlc3QtPnZhbGlkYXRlKFsKICAgICAgICAgICAgICAgICdiYW5uZXJfZmlsZScgPT4gWydyZXF1aXJlZCcsJ21pbWVzOmpwZWcsanBnLHBuZyxnaWYnLCAnbWF4OjMwNzInXSwKICAgICAgICAgICAgXSk7CiAgICAgICAgfQoKICAgICAgICBEQjo6YmVnaW5UcmFuc2FjdGlvbigpOwogICAgICAgIHRyeXsKICAgICAgICAgICAgJHVuaXQgPSBVbml0Ojp3aGVyZSgnY29tcGFueV9pZCcsICRyZXF1ZXN0LT5jb21wYW55X2lkKS0+Zmlyc3QoKTsKICAgICAgICAgICAgJGNvc3RDZW50cmUgPSBDb3N0Q2VudHJlOjpmaW5kKCRpZCk7CiAgICAgICAgICAgICRjb3N0Q2VudHJlLT5maWxsKCRyZXF1ZXN0LT5hbGwoKSk7CiAgICAgICAgICAgICRjb3N0Q2VudHJlLT5ocl91bml0X2lkID0gJHVuaXQtPmhyX3VuaXRfaWQ7CiAgICAgICAgICAgICRjb3N0Q2VudHJlLT5waG9uZSA9ICFlbXB0eSgkcmVxdWVzdC0+cGhvbmUpID8gJHJlcXVlc3QtPnBob25lIDogJzAxMjM0NTY3ODkwJzsKICAgICAgICAgICAgJGNvc3RDZW50cmUtPmVtYWlsID0gIWVtcHR5KCRyZXF1ZXN0LT5lbWFpbCkgPyAkcmVxdWVzdC0+ZW1haWwgOiAnZXhhbXBsZUBlbWFpbC5jb20nOwogICAgICAgICAgICAkY29zdENlbnRyZS0+Y2hhcnRfb2ZfYWNjb3VudF9pZCA9IENoYXJ0T2ZBY2NvdW50Ojp3aGVyZSgnaWQnLCAnPicsIDApLT5maXJzdCgpLT5pZDsKICAgICAgICAgICAgJGNvc3RDZW50cmUtPnNhdmUoKTsKCiAgICAgICAgICAgIGlmKCRyZXF1ZXN0LT5oYXNGaWxlKCdsb2dvX2ZpbGUnKSl7CiAgICAgICAgICAgICAgICBpZighZW1wdHkoJGNvc3RDZW50cmUtPmxvZ28pKXsKICAgICAgICAgICAgICAgICAgICB1bmxpbmsocHVibGljX3BhdGgoJGNvc3RDZW50cmUtPmxvZ28pKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRjb3N0Q2VudHJlLT5sb2dvID0gJHRoaXMtPmZpbGVVcGxvYWQoJHJlcXVlc3QtPmZpbGUoJ2xvZ29fZmlsZScpLCAndXBsb2FkL2Nvc3QtY2VudHJlL2xvZ28nKTsKICAgICAgICAgICAgICAgICRjb3N0Q2VudHJlLT5zYXZlKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKCRyZXF1ZXN0LT5oYXNGaWxlKCdiYW5uZXJfZmlsZScpKXsKICAgICAgICAgICAgICAgIGlmKCFlbXB0eSgkY29zdENlbnRyZS0+YmFubmVyKSl7CiAgICAgICAgICAgICAgICAgICAgdW5saW5rKHB1YmxpY19wYXRoKCRjb3N0Q2VudHJlLT5iYW5uZXIpKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkY29zdENlbnRyZS0+YmFubmVyID0gJHRoaXMtPmZpbGVVcGxvYWQoJHJlcXVlc3QtPmZpbGUoJ2Jhbm5lcl9maWxlJyksICd1cGxvYWQvY29zdC1jZW50cmUvYmFubmVyJyk7CiAgICAgICAgICAgICAgICAkY29zdENlbnRyZS0+c2F2ZSgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBVc2VyQ29zdENlbnRyZTo6d2hlcmUoJ2Nvc3RfY2VudHJlX2lkJywgJGNvc3RDZW50cmUtPmlkKS0+Zm9yY2VEZWxldGUoKTsKICAgICAgICAgICAgJHVzZXJzID0gW107CiAgICAgICAgICAgIGlmKGlzc2V0KCRyZXF1ZXN0LT51c2Vyc1swXSkpewogICAgICAgICAgICAgICAgZm9yZWFjaCgkcmVxdWVzdC0+dXNlcnMgYXMgJHVzZXJfaWQpewogICAgICAgICAgICAgICAgICAgIGFycmF5X3B1c2goJHVzZXJzLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICd1c2VyX2lkJyA9PiAkdXNlcl9pZCwKICAgICAgICAgICAgICAgICAgICAgICAgJ2Nvc3RfY2VudHJlX2lkJyA9PiAkY29zdENlbnRyZS0+aWQsCiAgICAgICAgICAgICAgICAgICAgICAgICdjcmVhdGVkX2F0JyA9PiBkYXRlKCdZLW0tZCBIOmk6cycpCiAgICAgICAgICAgICAgICAgICAgXSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgVXNlckNvc3RDZW50cmU6Omluc2VydCgkdXNlcnMpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBEQjo6Y29tbWl0KCk7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+cmVkaXJlY3RCYWNrV2l0aFN1Y2Nlc3MoIkNvc3QgQ2VudHJlIGhhcyBiZWVuIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5IiwgJ2FjY291bnRpbmcuY29zdC1jZW50cmVzLmluZGV4Jyk7CiAgICAgICAgfWNhdGNoIChcVGhyb3dhYmxlICR0aCl7CiAgICAgICAgICAgIERCOjpyb2xsYmFjaygpOwogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmJhY2tXaXRoRXJyb3IoJHRoLT5nZXRNZXNzYWdlKCkpOwogICAgICAgIH0KICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gZGVzdHJveSgkaWQpCiAgICB7CiAgICAgICAgREI6OmJlZ2luVHJhbnNhY3Rpb24oKTsKICAgICAgICB0cnl7CiAgICAgICAgICAgICRjb3N0Q2VudHJlID0gQ29zdENlbnRyZTo6ZmluZCgkaWQpOwogICAgICAgICAgICBpZighZW1wdHkoJGNvc3RDZW50cmUtPmxvZ28pKXsKICAgICAgICAgICAgICAgIHVubGluayhwdWJsaWNfcGF0aCgkY29zdENlbnRyZS0+bG9nbykpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZighZW1wdHkoJGNvc3RDZW50cmUtPmJhbm5lcikpewogICAgICAgICAgICAgICAgdW5saW5rKHB1YmxpY19wYXRoKCRjb3N0Q2VudHJlLT5iYW5uZXIpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAkZGVsZXRlID0gQ29zdENlbnRyZTo6ZmluZCgkaWQpLT5kZWxldGUoKTsKCiAgICAgICAgICAgIERCOjpjb21taXQoKTsKICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oWwogICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnID0+IHRydWUsCiAgICAgICAgICAgICAgICAnbWVzc2FnZScgPT4gIkNvc3QgQ2VudHJlIGhhcyBiZWVuIERlbGV0ZWQhIgogICAgICAgICAgICBdKTsKICAgICAgICB9Y2F0Y2ggKFxUaHJvd2FibGUgJHRoKXsKICAgICAgICAgICAgREI6OnJvbGxiYWNrKCk7CiAgICAgICAgICAgIHJldHVybiByZXNwb25zZSgpLT5qc29uKFsKICAgICAgICAgICAgICAgICdzdWNjZXNzJyA9PiBmYWxzZSwKICAgICAgICAgICAgICAgICdtZXNzYWdlJyA9PiAkdGgtPmdldE1lc3NhZ2UoKQogICAgICAgICAgICBdKTsKICAgICAgICB9CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIGRhdGFFbnRyeVN0b3JlKCkKICAgIHsKICAgICAgICAkY29tcGFuaWVzID0gQ29tcGFueTo6d2l0aChbCiAgICAgICAgICAgICdwcm9maXRDZW50cmVzJwogICAgICAgIF0pLT5nZXQoKTsKICAgICAgICAkdW5pdHMgPSBVbml0OjphbGwoKTsKICAgICAgICAkZGVwYXJ0bWVudHMgPSBEZXBhcnRtZW50OjphbGwoKTsKCiAgICAgICAgZm9yZWFjaCgkY29tcGFuaWVzIGFzICRrZXkgPT4gJGNvbXBhbnkpewogICAgICAgICAgICBmb3JlYWNoKCR1bml0cyBhcyAka2V5ID0+ICR1bml0KXsKICAgICAgICAgICAgICAgIGZvcmVhY2goJGRlcGFydG1lbnRzIGFzICRrZXkgPT4gJGRlcGFydG1lbnQpewogICAgICAgICAgICAgICAgICAgIENvc3RDZW50cmU6OnVwZGF0ZU9yQ3JlYXRlKFsKICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbXBhbnlfaWQnID0+ICRjb21wYW55LT5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgJ2hyX3VuaXRfaWQnID0+ICR1bml0LT5ocl91bml0X2lkLAogICAgICAgICAgICAgICAgICAgICAgICAnaHJfZGVwYXJ0bWVudF9pZCcgPT4gJGRlcGFydG1lbnQtPmhyX2RlcGFydG1lbnRfaWQKICAgICAgICAgICAgICAgICAgICBdLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICdjb2RlJyA9PiAkdGhpcy0+Y29zdENlbnRyZUNvZGUoJGNvbXBhbnktPmlkKSwKICAgICAgICAgICAgICAgICAgICAgICAgJ25hbWUnID0+ICR1bml0LT5ocl91bml0X3Nob3J0X25hbWUuJy0nLiRkZXBhcnRtZW50LT5ocl9kZXBhcnRtZW50X25hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICdwaG9uZScgPT4gJzAxNzAwMDAwMDAwJywKICAgICAgICAgICAgICAgICAgICAgICAgJ2VtYWlsJyA9PiAnbWJtQG1ibWRoYWthLmNvbScsCiAgICAgICAgICAgICAgICAgICAgICAgICdhZGRyZXNzJyA9PiAnUGxvdCAjIDEzNTgsIFJvYWQgIyA5IChOZXcpLCA1MCAoT2xkKSBBdmVudWUgIyAxMSwgTWlycHVyIERPSFMsIERoYWthJywKICAgICAgICAgICAgICAgICAgICAgICAgJ2xvZ28nID0+ICd1cGxvYWQvY29zdC1jZW50cmUvbG9nby8yMDIyLzA0LzE3LzI1NzE3MDQyMjEyMDM0OS5wbmcnLAogICAgICAgICAgICAgICAgICAgICAgICAnYmFubmVyJyA9PiAndXBsb2FkL2Nvc3QtY2VudHJlL2Jhbm5lci8yMDIyLzA0LzE3LzU0MTcwNDIyMTIwMzQ5LnBuZycsCiAgICAgICAgICAgICAgICAgICAgXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBDb3N0Q2VudHJlOjphbGwoKTsKICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gY29zdENlbnRyZUNvZGUoJGlkKXsKICAgICAgICAkY29tcGFueSA9IENvbXBhbnk6OmZpbmQoJGlkKTsKICAgICAgICAkcHJlZml4ID0gJGNvbXBhbnktPmNvZGUuJy0nOwogICAgICAgICRwcmVmaXhfbGVuZ3RoID0gc3RybGVuKCRwcmVmaXgpOwogICAgICAgICRtYXggPSBEQjo6dGFibGUoJ2Nvc3RfY2VudHJlcycpLT53aGVyZSgnY29tcGFueV9pZCcsICRpZCktPmNvdW50KCk7CiAgICAgICAgJG5ldyA9IChpbnQpKCRtYXgpOwogICAgICAgICRuZXcrKzsKICAgICAgICAkbnVtYmVyX29mX3plcm8gPSA0LXN0cmxlbigkbmV3KTsKICAgICAgICAkemVybyA9IHN0cl9yZXBlYXQoIjAiLCAkbnVtYmVyX29mX3plcm8pOwogICAgICAgIHJldHVybiAkcHJlZml4LiR6ZXJvLiRuZXc7CiAgICB9Cn0K