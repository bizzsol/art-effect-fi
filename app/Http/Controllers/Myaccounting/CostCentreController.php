<?php
bolt_decrypt( __FILE__ , 'g7mRGD'); return 0;
##!!!##