<?php
bolt_decrypt( __FILE__ , '6kKVNg'); return 0;
##!!!##