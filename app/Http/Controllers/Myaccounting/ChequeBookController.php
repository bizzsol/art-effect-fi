<?php
bolt_decrypt( __FILE__ , 'h0SCii'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use \App\Models\PmsModels\Accounts\BankAccount;
use \App\Models\PmsModels\Accounts\ChequeBook;
use \App\Models\PmsModels\Accounts\ChequeBookPage;
use \App\Models\PmsModels\Accounts\ChequeBookPageEntry;
use \App\Models\PmsModels\Accounts\Entry;
use \App\Models\PmsModels\Accounts\ChequeRegister;

use App, DB, DataTables;
use Illuminate\Support\Facades\Auth;

class ChequeBookController extends Controller
{
    public function headerColumns($value = '')
    {
        return array(
            ['SL', 'SL'],
            ['bank_account', 'bank_account', 'text-center'],
            ['book_number', 'book_number', 'text-center'],
            ['receiving_date', 'receiving_date', 'text-center'],
            ['created_by', 'created_by', 'text-center'],
            ['total_pages', 'total_pages', 'text-center'],
            ['used_pages', 'used_pages', 'text-center'],
            ['damaged_pages', 'damaged_pages', 'text-center'],
            ['empty_pages', 'empty_pages', 'text-center'],
            ['actions', 'actions', 'text-center']
        );
    }

    public function index()
    {
        try {
            if (request()->ajax()) {
                return DataTables::of(ChequeBook::with([
                    'bankAccount.currency', 'pages', 'creator', 'pages.entries'
                ]))
                    ->addIndexColumn()
                    ->addColumn('bank_account', function ($book) {
                        return $book->bankAccount ? $book->bankAccount->name . ' (' . $book->bankAccount->number . ') (' . ($book->bankAccount->currency ? $book->bankAccount->currency->code : '') . ')' : '';
                    })
                    ->filterColumn('bank_account', function ($query, $keyword) {
                        return $query->whereHas('bankAccount', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%')
                                ->orWhere('number', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('bank_account', function ($query, $order) {
                        return pleaseSortMe($query, $order, BankAccount::select('bank_accounts.name')
                            ->whereColumn('bank_accounts.id', 'cheque_books.bank_account_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('created_by', function ($book) {
                        return $book->creator ? $book->creator->name : '';
                    })
                    ->filterColumn('created_by', function ($query, $keyword) {
                        return $query->whereHas('creator', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('created_by', function ($query, $order) {
                        return pleaseSortMe($query, $order, \App\User::select('users.name')
                            ->whereColumn('users.id', 'cheque_books.created_by')
                            ->take(1)
                        );
                    })
                    ->addColumn('total_pages', function ($book) {
                        return $book->pages->count();
                    })
                    ->addColumn('used_pages', function ($book) {
                        $used = 0;
                        $used = $book->pages->filter(function ($page) {
                            return $page->entries->count() > 0 ? $page->id : null;
                        });
                        $used->all();

                        return count($used);
                    })
                    ->addColumn('damaged_pages', function ($book) {
                        return $book->pages->where('is_damaged', 1)->count();
                    })
                    ->addColumn('empty_pages', function ($book) {
                        $used = 0;
                        $used = $book->pages->filter(function ($page) {
                            return $page->entries->count() > 0 ? $page->id : null;
                        });
                        $used->all();

                        return $book->pages->count() - (count($used) + $book->pages->where('is_damaged', 1)->count());
                    })
                    ->addColumn('actions', function ($book) {
                        $actions = '';
                        if (auth()->user()->hasPermissionTo('cheque-book-pages')) {
                            $actions .= '<a class="btn btn-xs btn-success mr-1" href="' . url('accounting/cheque-books/' . $book->id) . '" title="Cheque Book Pages"><i class="las la-book-open"></i>';
                        }

                        if (auth()->user()->hasPermissionTo('cheque-book-edit') && ($book->pages->where('entry_id', '>', 0)->count() == 0 && $book->pages->where('is_damaged', 1)->count() == 0)) {
                            $actions .= '<a class="btn btn-xs btn-primary" href="' . url('accounting/cheque-books/' . $book->id . '/edit') . '"><i class="la la-edit"></i></a>&nbsp;';
                        }

                        if (auth()->user()->hasPermissionTo('cheque-book-delete') && ($book->pages->where('entry_id', '>', 0)->count() == 0 && $book->pages->where('is_damaged', 1)->count() == 0)) {
                            $actions .= '<a class="btn btn-xs btn-danger" onclick="deleteFromCRUD($(this))" data-src="' . route('accounting.cheque-books.destroy', $book->id) . '"><i class="la la-trash"></i></a>&nbsp;';
                        }

                        return $actions;
                    })
                    ->rawColumns(['actions'])
                    ->toJson();
            }

            return view('accounting.backend.pages.chequeBooks.index', [
                'title' => 'Cheque Books',
                'headerColumns' => $this->headerColumns()
            ]);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function create()
    {
        $data = [
            'title' => 'New Cheque book',
            'bankAccounts' => BankAccount::with([
                'currency'
            ])->get(),
        ];

        return view('accounting.backend.pages.chequeBooks.create', $data);
    }

    public function store(Request $request)
    {
        $request->validate([
            'bank_account_id' => 'required',
            'book_number' => 'required|unique:cheque_books',
            'receiving_date' => 'required',
            'page_number_from' => 'required',
            'page_number_to' => 'required',
        ]);

        if ($request->page_number_from < 0 || $request->page_number_to < 0 || $request->page_number_from > $request->page_number_to) {
            return $this->backWithError("Cheque book Page number is invalid!");
        }

        \DB::beginTransaction();
        try {
            $chequeBook = ChequeBook::create($request->all());

            $pages = [];
            for ($i = $request->page_number_from; $i <= $request->page_number_to; $i++) {
                array_push($pages, [
                    'cheque_book_id' => $chequeBook->id,
                    'page_number' => $i,
                    'created_by' => auth()->user()->id
                ]);
            }

            if (isset($pages[0])) {
                ChequeBookPage::insert($pages);
            }

            \DB::commit();
            return $this->redirectBackWithSuccess("Cheque Book has been created successfully", 'accounting.cheque-books.create');
        } catch (\Throwable $th) {
            \DB::rollBack();
            return $this->backWithError($th->getMessage());
        }
    }

    public function pagesHeaderColumns($value = '')
    {
        return array(
            ['SL', 'SL'],
            ['bank_account', 'bank_account', 'text-center'],
            ['book_number', 'book_number', 'text-center'],
            ['page_number', 'page_number', 'text-center'],
            ['transactions', 'transactions'],
            ['damaged', 'damaged', 'text-center'],
            ['actions', 'actions', 'text-center']
        );
    }

    public function show($id)
    {
        try {
            if (request()->ajax()) {
                return DataTables::of(
                    ChequeBookPage::with([
                        'chequeBook.bankAccount.currency',
                        'entries.entry'
                    ])->where('cheque_book_id', $id)
                )
                    ->addIndexColumn()
                    ->addColumn('bank_account', function ($page) {
                        return $page->chequeBook->bankAccount ? $page->chequeBook->bankAccount->name . ' (' . $page->chequeBook->bankAccount->number . ') (' . ($page->chequeBook->bankAccount->currency ? $page->chequeBook->bankAccount->currency->code : '') . ')' : '';
                    })
                    ->filterColumn('bank_account', function ($query, $keyword) {
                        return $query->whereHas('chequeBook.bankAccount', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%')
                                ->orWhere('number', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('bank_account', function ($query, $order) {
                        return pleaseSortMe($query, $order, ChequeBook::select('bank_accounts.name')
                            ->join('bank_accounts', 'bank_accounts.id', '=', 'cheque_books.bank_account_id')
                            ->whereColumn('cheque_books.id', 'cheque_book_pages.cheque_book_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('book_number', function ($page) {
                        return $page->chequeBook->book_number;
                    })
                    ->filterColumn('book_number', function ($query, $keyword) {
                        return $query->whereHas('chequeBook', function ($query) use ($keyword) {
                            $query->where('book_number', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('book_number', function ($query, $order) {
                        return pleaseSortMe($query, $order, ChequeBook::select('cheque_books.book_number')
                            ->whereColumn('cheque_books.id', 'cheque_book_pages.cheque_book_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('transactions', function ($page) {
                        $transactions = '<div style="width: 200px"><ul class="mb-0">';
                        if ($page->entries->count() > 0) {
                            foreach ($page->entries as $key => $entry) {
                                $transactions .= '<li><a href="' . url('accounting/entries/' . $entry->entry_id) . '" target="_blank">' . $entry->entry->number . '</li></a>';
                            }
                        }
                        $transactions .= '</ul></div>';

                        return $transactions;
                    })
                    ->filterColumn('transactions', function ($query, $keyword) {
                        return $query->whereHas('entries.entry', function ($query) use ($keyword) {
                            $query->where('code', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('transactions', function ($query, $order) {
                        return pleaseSortMe($query, $order, ChequeBookPageEntry::select('entries.code')
                            ->join('entries', 'entries.id', '=', 'cheque_book_page_entries.entry_id')
                            ->whereColumn('cheque_book_page_entries.cheque_book_page_id', 'cheque_book_pages.id')
                            ->take(1)
                        );
                    })
                    ->addColumn('damaged', function ($page) {
                        return $page->is_damaged == 1 ? '<a class="btn btn-xs btn-danger">Yes</a>' : ($page->status
                        !== null ? '<a class="btn btn-xs btn-warning">' . ucfirst($page->status) . '</a>' : '');
                    })
                    ->addColumn('actions', function ($page) {
                        $actions = '';
                        if (auth()->user()->hasPermissionTo('cheque-book-page-damage') && $page->entries->count() ==
                            0 && $page->is_damaged == 0 && $page->status == null) {
                            $actions .= '<a class="btn btn-xs btn-danger mr-1" onclick="markAsDamaged($(this))" data-page-id="' . $page->id . '" title="Mark as Damaged">Mark as Damaged</a>';
                        }

                        if (auth()->user()->hasPermissionTo('cheque-book-page-damage') && $page->entries->count() == 0
                            && $page->is_damaged == 0 && $page->status === 'pending') {
                            $actions .= '<a class="btn btn-xs btn-warning mr-1" onclick="markAsDamagedApproved($(this))" data-page-id="' . $page->id . '" title="Mark as a Approved">Approved</a>';
                        }

                        if (auth()->user()->hasPermissionTo('cheque-book-tag-transactions') && $page->entries->count() == 0 && $page->is_damaged == 0) {
                            $actions .= '<a class="btn btn-xs btn-success mr-1" onclick="tagTransactions($(this))" data-page-id="' . $page->id . '" title="Tag Transactions">Tag Transactions</a>';
                        }

                        return $actions;
                    })
                    ->rawColumns(['transactions', 'damaged', 'actions'])
                    ->toJson();
            }

            return view('accounting.backend.pages.chequeBooks.pages', [
                'title' => 'Cheque Book Pages',
                'headerColumns' => $this->pagesHeaderColumns()
            ]);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function damage($id)
    {
        return view('accounting.backend.pages.chequeBooks.damage', [
            'page' => ChequeBookPage::findOrFail($id)
        ]);
    }

    public function damaged(Request $request, $id)
    {
        \DB::beginTransaction();
        try {
            $request->validate([
                'damaged_at' => 'required',
            ]);

            $chequeBookPage = ChequeBookPage::findOrFail($id);
            $chequeBookPage->fill($request->all());
            $chequeBookPage->status = 'pending';
            $chequeBookPage->save();

            \DB::commit();
            return response()->json([
                'success' => true,
                'message' => "Cheque Book Page Requested for damage successfully"
            ]);
        } catch (\Throwable $th) {
            \DB::rollBack();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function damagedApproval(Request $request)
    {
        \DB::beginTransaction();
        try {
            $request->validate([
                'id' => 'required',
            ]);

            $chequeBookPage = ChequeBookPage::findOrFail($request->id);
            $chequeBookPage->fill($request->all());
            $chequeBookPage->is_damaged = 1;
            $chequeBookPage->status = 'approved';
            $chequeBookPage->save();

            \DB::commit();
            return response()->json([
                'success' => true,
                'message' => "Cheque Book Page has been marked as Damaged successfully"
            ]);
        } catch (\Throwable $th) {
            \DB::rollBack();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function tagTransaction($id)
    {
        $page = ChequeBookPage::findOrFail($id);
        return view('accounting.backend.pages.chequeBooks.tag', [
            'page' => $page,
            'entries' => Entry::doesntHave('chequeBookPageEntry')
                ->whereHas('items', function ($query) use ($page) {
                    return $query->where('chart_of_account_id', $page->chequeBook->bankAccount->chart_of_account_id);
                })
                ->get(['id', 'number', 'code']),
        ]);
    }

    public function tagTransactions(Request $request, $id)
    {
        \DB::beginTransaction();
        try {
            $page = ChequeBookPage::findOrFail($id);

            ChequeBookPageEntry::where(['cheque_book_page_id' => $page->id])->delete();
            if (isset($request->transactions) && count($request->transactions) > 0) {
                foreach ($request->transactions as $key => $entry_id) {
                    $entry = Entry::findOrFail($entry_id);
                    ChequeBookPageEntry::updateOrCreate([
                        'cheque_book_page_id' => $page->id,
                        'entry_id' => $entry->id,
                    ]);

                    ChequeRegister::create([
                        'bank_account_id' => $page->chequeBook->bank_account_id,
                        'entry_id' => $entry->id,
                        'supplier_ledger_id' => 0,
                        'datetime' => $entry->date . ' ' . $entry->time,
                        'source' => $entry->entryType->name,
                        'type' => 'cheque',
                        'cheque_number' => $page->page_number,
                        'debit_credit' => isset($entry->items->where('chart_of_account_id', $page->chequeBook->bankAccount->chart_of_account_id)->first()->debit_credit) ? $entry->items->where('chart_of_account_id', $page->chequeBook->bankAccount->chart_of_account_id)->first()->debit_credit : 'C',
                        'amount' => $entry->credit,
                        'narration' => $entry->notes,
                    ]);
                }
            }

            \DB::commit();
            return response()->json([
                'success' => true,
                'message' => "Transactions have been tagged successfully"
            ]);
        } catch (\Throwable $th) {
            \DB::rollBack();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function edit($id)
    {
        $chequeBook = ChequeBook::with([
            'bankAccount'
        ])->findOrFail($id);
        $data = [
            'title' => 'Edit Cheque Book',
            'chequeBook' => $chequeBook,
            'bankAccounts' => BankAccount::with([
                'currency'
            ])->get(),
        ];

        return view('accounting.backend.pages.chequeBooks.edit', $data);
    }

    public function update(Request $request, $id)
    {
        $request->validate([
            'bank_account_id' => 'required',
            'book_number' => 'required|unique:cheque_books,book_number,' . $id,
            'receiving_date' => 'required',
        ]);

        \DB::beginTransaction();
        try {
            $chequeBook = ChequeBook::findOrFail($id);
            $chequeBook->fill($request->all())->save();

            \DB::commit();
            return $this->backWithSuccess("Cheque Book has been updated successfully");
        } catch (\Throwable $th) {
            \DB::rollBack();
            return $this->backWithError($th->getMessage());
        }
    }

    public function destroy($id)
    {
        \DB::beginTransaction();
        try {
            ChequeBook::find($id)->delete();
            \DB::commit();
            return response()->json([
                'success' => true,
                'message' => "Cheque Book has been Deleted!"
            ]);
        } catch (\Throwable $th) {
            \DB::rollBack();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }
}
