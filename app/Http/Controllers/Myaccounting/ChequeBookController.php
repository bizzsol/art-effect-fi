<?php
bolt_decrypt( __FILE__ , 'zTg51P'); return 0;
##!!!##