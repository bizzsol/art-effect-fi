<?php
bolt_decrypt( __FILE__ , 'S5KTGz'); return 0;
##!!!##