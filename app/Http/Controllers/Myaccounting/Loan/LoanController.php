<?php
bolt_decrypt( __FILE__ , 'o6SVgB'); return 0;
##!!!##