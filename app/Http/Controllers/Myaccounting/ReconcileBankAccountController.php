<?php
bolt_decrypt( __FILE__ , 'ER1Bul'); return 0;
##!!!##