<?php
bolt_decrypt( __FILE__ , 'PAcyPC'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use \App\Models\PmsModels\Accounts\BankAccount;
use \App\Models\PmsModels\Accounts\CurrencyType;
use \App\Models\PmsModels\Accounts\Currency;
use \App\Models\PmsModels\Accounts\Entry;
use \App\Models\PmsModels\Accounts\EntryItem;
use \App\Models\PmsModels\Accounts\BankReconciliationStatement;

use App\Imports\Accounting\BankStatementImport;
use Maatwebsite\Excel\Facades\Excel;

use App, DB;
use Illuminate\Support\Facades\Auth;

class ReconcileBankAccountController extends Controller
{
    public function index()
    {
        $title = 'Reconcile Bank Account';
        
        try {
            $bankAccount = BankAccount::with([
                'currency'
            ])->find(request()->get('bank_account_id'));
            $date = request()->has('date') && strtotime(request()->get('date')) > 0 ? request()->get('date') : date('Y-m-d');
            $accounts = [isset($bankAccount->chart_of_account_id) ? $bankAccount->chart_of_account_id : 0];

            $bookBalance = $this->bookBalance($date, $accounts);

            $code = '';
            if(isset($bankAccount->id)){
                $code = entryUniqueCode(strlen($bankAccount->code)+6, $bankAccount->code.'-', 'bank_reconciliation_statements', 'code');
            }

            $data = [
                'title' => $title,
                'bankAccounts' => BankAccount::with(['currency'])->get(),
                'costCentres' => getCostCentres(),
                'bankAccount' => $bankAccount,
                'accounts' => $accounts,
                'date' => $date,
                'debit' => $bookBalance['debit'],
                'credit' => $bookBalance['credit'],
                'balance' => $bookBalance['balance'],
                'code' => $code,
                'entries' => Entry::with([
                    'items',
                    'entryType',
                    'purchaseOrder',
                    'exchangeRate.currency'
                ])
                ->whereHas('items', function($query) use($accounts){
                    return $query->whereNull('reconciliation_date')
                                 ->whereIn('chart_of_account_id', $accounts);
                })
                ->where('date', '<=', $date)
                ->get()
            ];
            return view('accounting.backend.pages.reconcileBankAccount.index', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function bookBalance($date, $accounts)
    {
        $debit = EntryItem::whereHas('entry', function($query) use($date){
            return $query->where('date', '<=', $date);
        })
        ->whereNotNull('reconciliation_date')
        ->whereIn('chart_of_account_id', $accounts)
        ->where('debit_credit', 'D')
        ->sum('amount');

        $credit = EntryItem::whereHas('entry', function($query) use($date){
            return $query->where('date', '<=', $date);
        })
        ->whereNotNull('reconciliation_date')
        ->whereIn('chart_of_account_id', $accounts)
        ->where('debit_credit', 'C')
        ->sum('amount');

        $balance = systemDoubleValue($debit-$credit, 2);

        return [
            'debit' => $debit,
            'credit' => $credit,
            'balance' => $balance,
        ];
    }

    public function create()
    {
        
    }

    public function store(Request $request)
    {
        $request->validate([
            'bank_account_id' => 'required',
            'date' => 'required',
            'entries' => 'required',
            'entries.*' => 'required',
            'debits' => 'required',
            'credits' => 'required',
            // 'bank_balance' => 'required',
            'bank_charges' => 'required',
            // 'file' => 'required|mimes:xlsx, xls',
            'cost_centre_id' => 'required'
        ]);

        DB::beginTransaction();
        try{

            $bankAccount = BankAccount::find($request->bank_account_id);
            $accounts = [isset($bankAccount->chart_of_account_id) ? $bankAccount->chart_of_account_id : 0];
            $bookBalance = $this->bookBalance($request->date, $accounts)['balance'];
            $exchange_rate_id = getExchangeRates($bankAccount->currency_id, $request->date, date('H:i:s'))['rate']->id;

            $data = [];
            if($request->hasFile('file')){
                $sheets = Excel::toArray(new BankStatementImport, $request->file);
                if(isset($sheets[0])){
                    foreach($sheets as $sheet){
                        $data = collect($sheet)->whereNotNull('receipt_number')->keyBy('receipt_number')->toArray();
                    }
                }
            }

            $reconcilled = Entry::whereIn('number', array_keys($data))
            ->whereHas('items', function($query) use($accounts){
                return $query->whereNotNull('reconciliation_date')
                             ->whereIn('chart_of_account_id', $accounts);
            })
            ->where('date', '<=', $request->date)
            ->count();

            if($reconcilled > 0){
                return response()->json([
                    'success' => false,
                    'message' => "Sorry! There are some already reconcilled statments exists in the Bank Statement you uploaded!"
                ]);
            }

            $entries = Entry::where('date', '<=', $request->date)
            ->whereHas('items', function($query) use($accounts){
                return $query->whereNull('reconciliation_date')
                             ->whereIn('chart_of_account_id', $accounts);
            })
            ->get();

            $reconciling_entries = [];
            $pending_entries = [];
            $total_debit = 0;
            $total_credit = 0;
            if(isset($entries[0])){
                foreach($entries as $key => $entry){
                    $debit = $entry->items->whereIn('chart_of_account_id', $accounts)->where('debit_credit', 'D')->whereNull('reconciliation_date')->sum('amount');
                    $credit = $entry->items->whereIn('chart_of_account_id', $accounts)->where('debit_credit', 'C')->whereNull('reconciliation_date')->sum('amount');

                    if(isset($data[$entry->number]) && $data[$entry->number]['debit'] == $credit && $data[$entry->number]['credit'] == $debit){
                        array_push($reconciling_entries, $entry->id);
                        $total_debit += $debit;
                        $total_credit += $credit;
                    }else{
                        array_push($pending_entries, $entry->id);
                    }
                }
            }

            // return [
            //     'bookBalance' => $bookBalance,
            //     'reconciling_entries' => $reconciling_entries,
            //     'pending_entries' => $pending_entries,
            //     'total_debit' => $total_debit,
            //     'total_credit' => $total_credit,
            // ];
            
            // $rec_debit = 0;
            // $rec_credit = 0;
            // foreach($request->entries as $key => $entry_id){
            //     $rec_debit += $request->debits[$entry_id];
            //     $rec_credit += $request->credits[$entry_id];
            // }

            $rec_amount = ($total_debit-$total_credit);
            $diff = systemDoubleValue(((($bookBalance+$request->bank_interest_earned+$rec_amount)-$request->bank_balance)-$request->bank_charges), 2);

            // return [
            //     'bookBalance' => $bookBalance,
            //     'rec_debit' => $total_debit,
            //     'rec_credit' => $total_credit,
            //     'rec_amount' => $rec_amount,
            //     'bank_balance' => $request->bank_balance,
            //     'bank_charges' => $request->bank_charges,
            //     'diff' => $diff,
            // ];

            // if($diff == 0){
                // foreach ($request->entries as $key => $entry_id) {
                //     EntryItem::where('entry_id', $entry_id)
                //     ->whereNull('reconciliation_date')
                //     ->whereIn('chart_of_account_id', $accounts)
                //     ->update([
                //         'reconciliation_date' => $request->date,
                //         'updated_by' => auth()->user()->id,
                //         'updated_at' => date('Y-m-d H:i:s'),
                //     ]);
                // }

                EntryItem::whereIn('entry_id', $reconciling_entries)
                ->whereNull('reconciliation_date')
                ->whereIn('chart_of_account_id', $accounts)
                ->update([
                    'reconciliation_date' => $request->date,
                    'updated_by' => auth()->user()->id,
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);

                if($request->bank_interest_earned > 0){
                    $items = array([
                        'cost_centre_id' => $request->cost_centre_id,
                        'chart_of_account_id' => $bankAccount->chart_of_account_id,
                        'debit' => $request->bank_interest_earned,
                        'credit' => 0,
                        'narration' => 'Bank Reconcilliation :: Bank Interest Earned :: Bank Account Debit',
                    ],[
                        'cost_centre_id' => $request->cost_centre_id,
                        'chart_of_account_id' => accountDefaultSettings()['bank_interest_account'],
                        'debit' => 0,
                        'credit' => $request->bank_interest_earned,
                        'narration' => 'Bank Reconcilliation :: Bank Interest Earned :: Revenue Credit',
                    ]);

                    $entry = saveLedgerEntries(5, date('Y-m-d H:i:s', strtotime($request->date.' '.date('H:i:s'))), 1, '', 'Bank Reconcilliation :: Bank Interest Earned', $items, $exchange_rate_id, 0, 0, 0, getCostCentreCompany($request->cost_centre_id));
                    if($entry['success']){
                        EntryItem::where('entry_id', $entry['entry']->id)
                        ->where('chart_of_account_id', $bankAccount->chart_of_account_id)
                        ->update([
                            'reconciliation_date' => $request->date,
                            'updated_by' => auth()->user()->id,
                            'updated_at' => date('Y-m-d H:i:s'),
                        ]);
                    }
                }

                if($request->bank_charges > 0){
                    $items = array([
                        'cost_centre_id' => $request->cost_centre_id,
                        'chart_of_account_id' => $bankAccount->bank_charges_account,
                        'debit' => $request->bank_charges,
                        'credit' => 0,
                        'narration' => 'Bank Reconcilliation :: Bank Charges Payment :: Bank Charges Debit',
                    ],[
                        'cost_centre_id' => $request->cost_centre_id,
                        'chart_of_account_id' => $bankAccount->chart_of_account_id,
                        'debit' => 0,
                        'credit' => $request->bank_charges,
                        'narration' => 'Bank Reconcilliation :: Bank Charges Payment :: Bank Account Credit',
                    ]);
                    $entry = saveLedgerEntries(4, date('Y-m-d H:i:s', strtotime($request->date.' '.date('H:i:s'))), 1, '', 'Bank Reconcilliation :: Bank Charges Payment', $items, $exchange_rate_id, 0, 0, 0, getCostCentreCompany($request->cost_centre_id));
                    if($entry['success']){
                        EntryItem::where('entry_id', $entry['entry']->id)
                        ->where('chart_of_account_id', $bankAccount->chart_of_account_id)
                        ->update([
                            'reconciliation_date' => $request->date,
                            'updated_by' => auth()->user()->id,
                            'updated_at' => date('Y-m-d H:i:s'),
                        ]);
                    }
                }


                $code = '';
                if(isset($bankAccount->id)){
                    $code = entryUniqueCode(strlen($bankAccount->code)+6, $bankAccount->code.'-', 'bank_reconciliation_statements', 'code');
                }

                BankReconciliationStatement::create([
                    'bank_account_id' => $bankAccount->id,
                    'code' => $code,
                    'date' => $request->date,
                    'book_balance' => $bookBalance,
                    'bank_interest_earned' => $request->bank_interest_earned,
                    'bank_interest_earned_narration' => $request->bank_interest_earned_narration,
                    'bank_balance' => $bookBalance+$request->bank_interest_earned-$request->bank_charges,
                    'reconciling_amount' => $rec_amount,
                    'bank_charges' => $request->bank_charges,
                    'bank_charges_narration' => $request->bank_charges_narration,
                    'difference' => $diff,
                    'reconciling_entries' => json_encode($reconciling_entries),
                    'pending_entries' => json_encode($pending_entries),
                ]);

                // return [
                //     'reconciling_entries' => $reconciling_entries,
                //     'pending_entries' => $pending_entries,
                // ];

                DB::commit();
                session()->flash('message', "Bank Reconcilliation completed successfully with reference #".$code);
                session()->flash('alert-type', 'success');
                return response()->json([
                    'success' => true,
                ]);
            // }

            // return response()->json([
            //     'success' => false,
            //     'message' => "The Difference must be Zero to complete the Reconcilliation."
            // ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }
}
