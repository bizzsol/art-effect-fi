<?php
bolt_decrypt( __FILE__ , 'H0PjUq'); return 0;
##!!!##