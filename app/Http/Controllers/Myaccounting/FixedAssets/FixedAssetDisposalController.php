<?php
bolt_decrypt( __FILE__ , 'MVD6Tw'); return 0;
##!!!##