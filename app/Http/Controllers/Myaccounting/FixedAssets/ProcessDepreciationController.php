<?php
bolt_decrypt( __FILE__ , 'Tl9Gx0'); return 0;
##!!!##