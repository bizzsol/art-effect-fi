<?php
bolt_decrypt( __FILE__ , 'KZVS9q'); return 0;
##!!!##