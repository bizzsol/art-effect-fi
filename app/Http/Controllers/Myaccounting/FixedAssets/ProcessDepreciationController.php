<?php
bolt_decrypt( __FILE__ , 'vVu1EI'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting\FixedAssets;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use \App\Models\PmsModels\Accounts\Company;
use App\Models\FixedAssets\FixedAssetBatch;
use App\Models\FixedAssets\FixedAssetBatchItem;
use App\Models\FixedAssets\FixedAssetBatchItemDepreciation;
use App\Models\FixedAssets\FixedAssetBatchUser;
use App\User;
use App\Models\PmsModels\Category;
use App\Models\PmsModels\Product;
use App\Models\PmsModels\Accounts\CostCentre;

use App, DB;
use Illuminate\Support\Facades\Auth;

class ProcessDepreciationController extends Controller
{
    public function index()
    {
        try {
            $data = [
                'title' => 'Process Depreciations',
                'companies' => Company::has('profitCentres.costCentres')
                ->whereHas('users', function($query){
                    return $query->where('user_id', auth()->user()->id);
                })
                ->get(),
            ];
            return view('accounting.backend.pages.fixedAssets.processDepreciation.index', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function create()
    {
        if(request()->has('get-products')){
            $categories = Category::whereHas('products.fixedAssetBatchItems', function($query){
                return $query->where('is_disposed', 0);
            })
            ->get();
            return view('accounting.backend.pages.fixedAssets.processDepreciation.products', [
                'categories' => $categories,
                'products' => Product::with([
                    'attributes.attributeOption.attribute'
                ])
                ->whereIn('category_id', $categories->pluck('id')->toArray())
                ->whereHas('fixedAssetBatchItems', function($query){
                    return $query->where('is_disposed', 0);
                })
                ->whereHas('fixedAssetBatchItems.batch.costCentre.profitCentre', function($query){
                    return $query->where('company_id', request()->get('company_id'));
                })
                ->get()
            ]);
        }

        if(request()->get('action') == 'batches'){
            $data = [
                'batches' => FixedAssetBatch::with([
                    'goodsReceivedItemsStockIn.relGoodsReceivedItems.relGoodsReceivedNote.relPurchaseOrder.purchaseOrderRequisitions'
                ])
                ->whereHas('items', function($query){
                    return $query->where('is_disposed', 0);
                })
                ->when(request()->get('product_id') > 0, function($query){
                    return $query->whereHas('items', function($query){
                        return $query->where('final_asset_id', request()->get('product_id'));
                    });
                })
                ->get(),
            ];
            return view('accounting.backend.pages.fixedAssets.processDepreciation.batches', $data);
        }elseif(request()->get('action') == 'items'){
            $from = date('Y-m-01', strtotime(request()->get('year').'-'.request()->get('month')));
            $to = date('Y-m-t', strtotime(request()->get('year').'-'.request()->get('month')));

            $finalAssets = FixedAssetBatchItem::with([

            ])
            ->whereHas('batch.costCentre.profitCentre', function($query){
                return $query->where('company_id', request()->get('company_id'));
            })
            ->when(request()->get('product_id') > 0, function($query){
                return $query->where('final_asset_id', request()->get('product_id'));
            })
            ->whereDoesntHave('depreciations', function($query) use($from, $to){
                return $query->where('from', $from)
                ->where('to', $to);
            })
            ->whereHas('batch', function($query) use($from, $to){
                return $query->where('depreciation_start_date', '<=', $to);
            })
            ->where('is_disposed', 0)
            ->groupBy('asset_code')
            ->get();
            
            $data = [
                'from' => $from,
                'to' => $to,
                'finalAssets' => $finalAssets,
                'items' => FixedAssetBatchItem::with([

                ])
                ->whereHas('batch.costCentre.profitCentre', function($query){
                    return $query->where('company_id', request()->get('company_id'));
                })
                ->when(request()->get('product_id') > 0, function($query){
                    return $query->where('final_asset_id', request()->get('product_id'));
                })
                ->whereDoesntHave('depreciations', function($query) use($from, $to){
                    return $query->where('from', $from)
                    ->where('to', $to);
                })
                ->whereHas('batch', function($query) use($from, $to){
                    return $query->where('depreciation_start_date', '<=', $to);
                })
                ->where('is_disposed', 0)
                ->get(),
            ];
            return view('accounting.backend.pages.fixedAssets.processDepreciation.items', $data);
        }
    }

    public function store(Request $request)
    {
        $request->validate([
            'from' => 'required',
            'to' => 'required',
            'assets' => 'required',
            'assets.*' => 'required',
        ]);

        DB::beginTransaction();
        try{
            $journalEntries = [];
            $count = 0;
            $amounts = [];

            if(isset($request->assets[0])){
                foreach($request->assets as $key => $asset_code){
                    $items = FixedAssetBatchItem::where('asset_code', $asset_code)->where('is_disposed', 0)->get();

                    if($items->count() > 0){
                        foreach ($items as $item) {
                            $amount = systemDoubleValue(calculateDepreciationAmount($item, $request->from, $request->to), 2);
                            $depreciation = FixedAssetBatchItemDepreciation::create([
                                'fixed_asset_batch_item_id' => $item->id,
                                'date' => date('Y-m-d'),
                                'from' => $request->from,
                                'to' => $request->to,
                                'amount' => $amount,
                                'remarks' => $request->remarks[$item->asset_code],
                            ]);

                            if(!array_key_exists($item->batch->cost_centre_id, $amounts)){
                                $amounts[$item->batch->cost_centre_id] = 0;
                            }
                            $amounts[$item->batch->cost_centre_id] += $amount;

                            $exchange_rate_id = $item->batch->goodsReceivedItemsStockIn->relPurchaseOrder->relQuotation->exchange_rate_id;

                            $finalAsset = $item;
                        }

                        foreach($amounts as $cost_centre_id => $amount){
                            $journalEntries[] = [
                                'cost_centre_id' => $cost_centre_id,
                                'chart_of_account_id' => (isset($finalAsset->finalAsset->depreciation_cost_account_id) && $finalAsset->finalAsset->depreciation_cost_account_id > 0 ? $finalAsset->finalAsset->depreciation_cost_account_id : accountDefaultSettings()['depreciation_cost_account']),
                                'debit' => $amount,
                                'credit' => 0,
                                'narration' => 'Fixed Asset Depreciation Cost Debit',
                                'type' => 'depreciation',
                                'source' => json_encode([
                                    'asset_code' => $asset_code,
                                    'from' => $request->from,
                                    'to' => $request->to,
                                ])
                            ];

                            $journalEntries[] = [
                                'cost_centre_id' => $cost_centre_id,
                                'chart_of_account_id' => (isset($finalAsset->finalAsset->inventory_adjustments_account_id) && $finalAsset->finalAsset->inventory_adjustments_account_id > 0 ? $finalAsset->finalAsset->inventory_adjustments_account_id : accountDefaultSettings()['inventory_adjustments_account']),
                                'debit' => 0,
                                'credit' => $amount,
                                'narration' => 'Fixed Asset Adjustment Credit ',
                                'type' => 'depreciation',
                                'source' => json_encode([
                                    'asset_code' => $asset_code,
                                    'from' => $request->from,
                                    'to' => $request->to,
                                ])
                            ];
                        }

                        $count++;
                    }
                }
            }

            if($count > 0){
                saveLedgerEntries(5, date('Y-m-d H:i:s', strtotime($request->to.' '.date('H:i:s'))), 1, '', 'Monthly Depreciation of Fixed Asset', $journalEntries, $exchange_rate_id, 0, 0, 0, getCostCentreCompany($cost_centre_id));

                DB::commit();
                return $this->backWithSuccess($count." assets have been depriciated.");
            }
            return $this->backWithError("Something went wrong!");
        }catch(\Throwable $th){
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
    }
}
