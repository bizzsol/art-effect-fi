<?php
bolt_decrypt( __FILE__ , '1JVcvV'); return 0;
##!!!##CgpuYW1lc3BhY2UgQXBwXEh0dHBcQ29udHJvbGxlcnNcTXlhY2NvdW50aW5nXEZpeGVkQXNzZXRzOwoKdXNlIEFwcFxIdHRwXENvbnRyb2xsZXJzXENvbnRyb2xsZXI7CnVzZSBJbGx1bWluYXRlXEh0dHBcUmVxdWVzdDsKCnVzZSBBcHBcTW9kZWxzXEZpeGVkQXNzZXRzXEZpeGVkQXNzZXRMb2NhdGlvbjsKdXNlIEFwcFxNb2RlbHNcRml4ZWRBc3NldHNcRml4ZWRBc3NldEJhdGNoOwp1c2UgQXBwXE1vZGVsc1xGaXhlZEFzc2V0c1xGaXhlZEFzc2V0QmF0Y2hJdGVtOwp1c2UgQXBwXE1vZGVsc1xGaXhlZEFzc2V0c1xGaXhlZEFzc2V0QmF0Y2hJdGVtVXNlcjsKdXNlIEFwcFxVc2VyOwp1c2UgQXBwXE1vZGVsc1xQbXNNb2RlbHNcQ2F0ZWdvcnk7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xQcm9kdWN0OwoKdXNlIEFwcCxEQjsKdXNlIElsbHVtaW5hdGVcU3VwcG9ydFxGYWNhZGVzXEF1dGg7CgpjbGFzcyBGaXhlZEFzc2V0RGlzdHJpYnV0aW9uc0NvbnRyb2xsZXIgZXh0ZW5kcyBDb250cm9sbGVyCnsKICAgIHB1YmxpYyBmdW5jdGlvbiBpbmRleCgpCiAgICB7CiAgICAgICAgJHRpdGxlID0gJ0ZpeGVkIEFzc2V0IERpc3RyaWJ1dGlvbnMnOwogICAgICAgICRjYXRlZ29yaWVzID0gQ2F0ZWdvcnk6OmhhcygncHJvZHVjdHMuZml4ZWRBc3NldEJhdGNoSXRlbXMnKQogICAgICAgIC0+Z2V0KCk7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJGRhdGEgPSBbCiAgICAgICAgICAgICAgICAndGl0bGUnID0+ICR0aXRsZSwKICAgICAgICAgICAgICAgICdjYXRlZ29yaWVzJyA9PiAkY2F0ZWdvcmllcywKICAgICAgICAgICAgICAgICdwcm9kdWN0cycgPT4gUHJvZHVjdDo6d2l0aChbCiAgICAgICAgICAgICAgICAgICAgJ2F0dHJpYnV0ZXMuYXR0cmlidXRlT3B0aW9uLmF0dHJpYnV0ZScKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAtPndoZXJlSW4oJ2NhdGVnb3J5X2lkJywgJGNhdGVnb3JpZXMtPnBsdWNrKCdpZCcpLT50b0FycmF5KCkpCiAgICAgICAgICAgICAgICAtPmhhcygnZml4ZWRBc3NldEJhdGNoSXRlbXMnKQogICAgICAgICAgICAgICAgLT5nZXQoKSwKICAgICAgICAgICAgXTsKICAgICAgICAgICAgcmV0dXJuIHZpZXcoJ2FjY291bnRpbmcuYmFja2VuZC5wYWdlcy5maXhlZEFzc2V0cy5maXhlZEFzc2V0RGlzdHJpYnV0aW9ucy5pbmRleCcsICRkYXRhKTsKICAgICAgICB9Y2F0Y2ggKFxUaHJvd2FibGUgJHRoKXsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5iYWNrV2l0aEVycm9yKCR0aC0+Z2V0TWVzc2FnZSgpKTsKICAgICAgICB9CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIGNyZWF0ZSgpCiAgICB7CiAgICAgICAgaWYocmVxdWVzdCgpLT5nZXQoJ2FjdGlvbicpID09ICdiYXRjaGVzJyl7CiAgICAgICAgICAgICRkYXRhID0gWwogICAgICAgICAgICAgICAgJ2JhdGNoZXMnID0+IEZpeGVkQXNzZXRCYXRjaDo6d2l0aChbCiAgICAgICAgICAgICAgICAgICAgJ2dvb2RzUmVjZWl2ZWRJdGVtc1N0b2NrSW4ucmVsR29vZHNSZWNlaXZlZEl0ZW1zLnJlbEdvb2RzUmVjZWl2ZWROb3RlLnJlbFB1cmNoYXNlT3JkZXIucHVyY2hhc2VPcmRlclJlcXVpc2l0aW9ucycKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAtPndoZXJlSGFzKCdpdGVtcycsIGZ1bmN0aW9uKCRxdWVyeSl7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ2lzX2Rpc3Bvc2VkJywgMCk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLT53aGVyZUhhcygnaXRlbXMnLCBmdW5jdGlvbigkcXVlcnkpewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlKCdmaW5hbF9hc3NldF9pZCcsIHJlcXVlc3QoKS0+Z2V0KCdwcm9kdWN0X2lkJykpOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC0+Z2V0KCksCiAgICAgICAgICAgIF07CiAgICAgICAgICAgIHJldHVybiB2aWV3KCdhY2NvdW50aW5nLmJhY2tlbmQucGFnZXMuZml4ZWRBc3NldHMuZml4ZWRBc3NldERpc3RyaWJ1dGlvbnMuYmF0Y2hlcycsICRkYXRhKTsKICAgICAgICB9ZWxzZWlmKHJlcXVlc3QoKS0+Z2V0KCdhY3Rpb24nKSA9PSAnaXRlbXMnKXsKCiAgICAgICAgICAgICRpdGVtcyA9IEZpeGVkQXNzZXRCYXRjaEl0ZW06OndpdGgoWwogICAgICAgICAgICAgICAgJ2JhdGNoLmdvb2RzUmVjZWl2ZWRJdGVtc1N0b2NrSW4ucmVsR29vZHNSZWNlaXZlZEl0ZW1zLnJlbFByb2R1Y3QuYXR0cmlidXRlcy5hdHRyaWJ1dGVPcHRpb24uYXR0cmlidXRlJywKICAgICAgICAgICAgICAgICd1c2VycycsICdjdXJyZW50VXNlcicsCiAgICAgICAgICAgICAgICAnZmluYWxBc3NldC5hdHRyaWJ1dGVzLmF0dHJpYnV0ZU9wdGlvbi5hdHRyaWJ1dGUnCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgIC0+d2hlbihyZXF1ZXN0KCktPmdldCgncHJvZHVjdF9pZCcpID4gMCwgZnVuY3Rpb24oJHF1ZXJ5KXsKICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlKCdmaW5hbF9hc3NldF9pZCcsIHJlcXVlc3QoKS0+Z2V0KCdwcm9kdWN0X2lkJykpOwogICAgICAgICAgICB9KQogICAgICAgICAgICAtPndoZW4oIWVtcHR5KHJlcXVlc3QoKS0+Z2V0KCdhc3NldF9jb2RlJykpLCBmdW5jdGlvbigkcXVlcnkpewogICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ2Fzc2V0X2NvZGUnLCByZXF1ZXN0KCktPmdldCgnYXNzZXRfY29kZScpKTsKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLT5ncm91cEJ5KCdhc3NldF9jb2RlJykKICAgICAgICAgICAgLT53aGVyZSgnaXNfZGlzcG9zZWQnLCAwKQogICAgICAgICAgICAtPmdldCgpOwoKICAgICAgICAgICAgJGRhdGEgPSBbCiAgICAgICAgICAgICAgICAndXNlcnMnID0+IFVzZXI6OmFsbCgpLAogICAgICAgICAgICAgICAgJ2l0ZW1zJyA9PiAkaXRlbXMsCiAgICAgICAgICAgICAgICAnZml4ZWRBc3NldExvY2F0aW9ucycgPT4gRml4ZWRBc3NldExvY2F0aW9uOjphbGwoKSwKICAgICAgICAgICAgICAgICdwcm9kdWN0X2lkJyA9PiByZXF1ZXN0KCktPmdldCgncHJvZHVjdF9pZCcpLAogICAgICAgICAgICAgICAgJ2Fzc2V0X2NvZGUnID0+IHJlcXVlc3QoKS0+Z2V0KCdhc3NldF9jb2RlJykKICAgICAgICAgICAgXTsKICAgICAgICAgICAgcmV0dXJuIHZpZXcoJ2FjY291bnRpbmcuYmFja2VuZC5wYWdlcy5maXhlZEFzc2V0cy5maXhlZEFzc2V0RGlzdHJpYnV0aW9ucy5pdGVtcycsICRkYXRhKTsKICAgICAgICB9CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIHN0b3JlKFJlcXVlc3QgJHJlcXVlc3QpCiAgICB7CiAgICAgICAgREI6OmJlZ2luVHJhbnNhY3Rpb24oKTsKICAgICAgICB0cnl7CiAgICAgICAgICAgICRpdGVtcyA9IEZpeGVkQXNzZXRCYXRjaEl0ZW06OndpdGgoWwogICAgICAgICAgICAgICAgJ2JhdGNoLmdvb2RzUmVjZWl2ZWRJdGVtc1N0b2NrSW4ucmVsR29vZHNSZWNlaXZlZEl0ZW1zLnJlbFByb2R1Y3QuYXR0cmlidXRlcy5hdHRyaWJ1dGVPcHRpb24uYXR0cmlidXRlJywKICAgICAgICAgICAgICAgICd1c2VycycsICdjdXJyZW50VXNlcicsCiAgICAgICAgICAgICAgICAnZmluYWxBc3NldC5hdHRyaWJ1dGVzLmF0dHJpYnV0ZU9wdGlvbi5hdHRyaWJ1dGUnCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgIC0+d2hlbigkcmVxdWVzdC0+cHJvZHVjdF9pZCA+IDAsIGZ1bmN0aW9uKCRxdWVyeSkgdXNlKCRyZXF1ZXN0KXsKICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlKCdmaW5hbF9hc3NldF9pZCcsICRyZXF1ZXN0LT5wcm9kdWN0X2lkKTsKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLT53aGVuKCFlbXB0eSgkcmVxdWVzdC0+YXNzZXRfY29kZSksIGZ1bmN0aW9uKCRxdWVyeSkgdXNlKCRyZXF1ZXN0KXsKICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlKCdhc3NldF9jb2RlJywgJHJlcXVlc3QtPmFzc2V0X2NvZGUpOwogICAgICAgICAgICB9KQogICAgICAgICAgICAtPndoZXJlKCdpc19kaXNwb3NlZCcsIDApCiAgICAgICAgICAgIC0+Z2V0KCk7CgoKICAgICAgICAgICAgaWYoaXNzZXQoJGl0ZW1zWzBdKSl7CiAgICAgICAgICAgICAgICBmb3JlYWNoKCRpdGVtcyBhcyAka2V5ID0+ICRpdGVtKXsKICAgICAgICAgICAgICAgICAgICBpZigkcmVxdWVzdC0+Zml4ZWRfYXNzZXRfbG9jYXRpb25faWRbJGl0ZW0tPmFzc2V0X2NvZGVdID4gMCl7CiAgICAgICAgICAgICAgICAgICAgICAgICRjdXJyZW50VXNlciA9IEZpeGVkQXNzZXRCYXRjaEl0ZW1Vc2VyOjp3aGVyZShbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZml4ZWRfYXNzZXRfYmF0Y2hfaXRlbV9pZCcgPT4gJGl0ZW0tPmlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lzX3Rha2VuJyA9PiAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLT5vcmRlckJ5KCdmcm9tJywgJ2Rlc2MnKS0+Zmlyc3QoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICRuZXcgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICBpZihpc3NldCgkY3VycmVudFVzZXItPmlkKSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkY3VycmVudFVzZXItPmZpeGVkX2Fzc2V0X2xvY2F0aW9uX2lkID09ICRyZXF1ZXN0LT5maXhlZF9hc3NldF9sb2NhdGlvbl9pZFskaXRlbS0+YXNzZXRfY29kZV0gJiYgJGN1cnJlbnRVc2VyLT51c2VyX2lkID09ICRyZXF1ZXN0LT51c2VyX2lkWyRpdGVtLT5hc3NldF9jb2RlXSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJG5ldyA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjdXJyZW50VXNlci0+Z2l2aW5nX3JlbWFya3MgPSAkcmVxdWVzdC0+cmVtYXJrc1skaXRlbS0+YXNzZXRfY29kZV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGN1cnJlbnRVc2VyLT5zYXZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRuZXcpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXNzZXQoJGN1cnJlbnRVc2VyLT5pZCkpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjdXJyZW50VXNlci0+dG8gPSBkYXRlKCdZLW0tZCcsIHN0cnRvdGltZShkYXRlKCdZLW0tZCcsIHN0cnRvdGltZSgkcmVxdWVzdC0+ZnJvbVskaXRlbS0+YXNzZXRfY29kZV0pKS4nIC0xIGRheXMnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGN1cnJlbnRVc2VyLT5pc190YWtlbiA9IDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGN1cnJlbnRVc2VyLT50YWtlbl9yZW1hcmtzID0gJHJlcXVlc3QtPnJlbWFya3NbJGl0ZW0tPmFzc2V0X2NvZGVdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjdXJyZW50VXNlci0+c2F2ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpeGVkQXNzZXRCYXRjaEl0ZW1Vc2VyOjpjcmVhdGUoWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmaXhlZF9hc3NldF9iYXRjaF9pdGVtX2lkJyA9PiAkaXRlbS0+aWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ZpeGVkX2Fzc2V0X2xvY2F0aW9uX2lkJyA9PiAkcmVxdWVzdC0+Zml4ZWRfYXNzZXRfbG9jYXRpb25faWRbJGl0ZW0tPmFzc2V0X2NvZGVdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1c2VyX2lkJyA9PiAkcmVxdWVzdC0+dXNlcl9pZFskaXRlbS0+YXNzZXRfY29kZV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Zyb20nID0+ICRyZXF1ZXN0LT5mcm9tWyRpdGVtLT5hc3NldF9jb2RlXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ2l2aW5nX3JlbWFya3MnID0+ICRyZXF1ZXN0LT5yZW1hcmtzWyRpdGVtLT5hc3NldF9jb2RlXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRyZXF1ZXN0LT51c2VyX2lkWyRpdGVtLT5hc3NldF9jb2RlXSA+IDApewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRtZXNzYWdlcyA9ICc8c3BhbiBjbGFzcz0ibm90aWZpY2F0aW9uLWxpbmtzIiBkYXRhLXRpdGxlPSJGaXhlZCBBc3NldCBEaXN0cmlidXRpb24iPkEgTmV3IEZpeGVkIEFzc2V0IHdpdGggQXNzZXQgY29kZSAjJy4kaXRlbS0+YXNzZXRfY29kZS4nIGhhcyBiZWVuIGdpdmVuIHRvIHlvdS48L3NwYW4+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDcmVhdGVPclVwZGF0ZU5vdGlmaWNhdGlvbigkbWVzc2FnZXMsICd1bnJlYWQnLCAnJywnJywgJHJlcXVlc3QtPnVzZXJfaWRbJGl0ZW0tPmFzc2V0X2NvZGVdLCAnJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIERCOjpjb21taXQoKTsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5iYWNrV2l0aFN1Y2Nlc3MoIkZpeGVkIEl0ZW1zIGhhcyBiZWVuIERpc3RyaWJ1dGVkIFN1Y2Nlc3NmdWxseS4iKTsKICAgICAgICB9Y2F0Y2ggKFxUaHJvd2FibGUgJHRoKXsKICAgICAgICAgICAgREI6OnJvbGxiYWNrKCk7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+YmFja1dpdGhFcnJvcigkdGgtPmdldE1lc3NhZ2UoKSk7CiAgICAgICAgfQogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBzaG93KCRpZCkKICAgIHsKICAgICAgICAkZGF0YSA9IFsKICAgICAgICAgICAgJ3VzZXJzJyA9PiBGaXhlZEFzc2V0QmF0Y2hJdGVtVXNlcjo6d2l0aChbCiAgICAgICAgICAgICAgICAndXNlcicsICdmaXhlZEFzc2V0TG9jYXRpb24nCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgIC0+d2hlcmUoJ2ZpeGVkX2Fzc2V0X2JhdGNoX2l0ZW1faWQnLCAkaWQpLT5nZXQoKQogICAgICAgIF07CiAgICAgICAgcmV0dXJuIHZpZXcoJ2FjY291bnRpbmcuYmFja2VuZC5wYWdlcy5maXhlZEFzc2V0cy5maXhlZEFzc2V0RGlzdHJpYnV0aW9ucy5oaXN0b3J5JywgJGRhdGEpOwogICAgfQoKfQo=