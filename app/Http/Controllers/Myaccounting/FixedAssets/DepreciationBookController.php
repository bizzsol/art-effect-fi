<?php
bolt_decrypt( __FILE__ , 'AbPGJs'); return 0;
##!!!##