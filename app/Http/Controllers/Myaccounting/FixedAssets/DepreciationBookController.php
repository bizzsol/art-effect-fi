<?php
bolt_decrypt( __FILE__ , 'XLfbE1'); return 0;
##!!!##