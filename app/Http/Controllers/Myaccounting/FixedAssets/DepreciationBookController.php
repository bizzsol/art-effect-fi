<?php
bolt_decrypt( __FILE__ , 'RJAr7q'); return 0;
##!!!##