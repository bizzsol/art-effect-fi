<?php
bolt_decrypt( __FILE__ , 'PW0CtT'); return 0;
##!!!##