<?php
bolt_decrypt( __FILE__ , 'K2RLaf'); return 0;
##!!!##