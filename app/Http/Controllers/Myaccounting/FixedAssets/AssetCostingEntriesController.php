<?php
bolt_decrypt( __FILE__ , 'vvHBW3'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting\FixedAssets;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use App\Models\PmsModels\Accounts\Company;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\Models\PmsModels\Purchase\PurchaseOrderItem;
use App\Models\PmsModels\Product;
use App\Models\FixedAssets\AssetCostingEntry;
use App\Models\PmsModels\Accounts\BankAccount;
use App\Models\PmsModels\Accounts\CostCentre;
use App\Models\PmsModels\Grn\GoodsReceivedItemStockIn;
use App\Models\PmsModels\Suppliers;
use App\Models\PmsModels\SupplierPayment;

use App, DB;
use Illuminate\Support\Facades\Auth;

class AssetCostingEntriesController extends Controller
{
    public function index()
    {
        $title = 'Asset Costing Entries';
        try {
            $data = [
                'title' => $title,
                'companies' => Company::has('profitCentres.costCentres')
                ->whereHas('users', function($query){
                    return $query->where('user_id', auth()->user()->id);
                })
                ->get(),
            ];
            return view('accounting.backend.pages.fixedAssets.assetCostingEntries.index', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function create()
    {
        if(request()->get('action') == 'po'){
            $data = [
                'purchaseOrders' => PurchaseOrder::where('is_closed', 0)
                ->whereHas('Unit', function($query){
                    return $query->where('company_id', request()->get('company_id'));
                })
                // ->where(function($query){
                //     return $query->whereHas('relPurchaseOrderItems.relProduct.category', function($query){
                //         return $query->where('is_cwip', 1);
                //     })
                //     ->orWhereHas('purchaseOrderRequisitions.requisition.projectTask');
                // })
                ->has('relGoodsReceivedItemStockIn')
                ->get(),
            ];
            return view('accounting.backend.pages.fixedAssets.assetCostingEntries.po', $data);
        }elseif(request()->get('action') == 'stocks'){
            $data = [
                'stocks' => GoodsReceivedItemStockIn::whereHas('relPurchaseOrder.Unit', function($query){
                    return $query->where('company_id', request()->get('company_id'));
                })
                ->where('purchase_order_id', request()->get('purchase_order_id'))
                // ->where(function($query){
                //     return $query->whereHas('relGoodsReceivedItems.relProduct.category', function($query){
                //         return $query->where('is_cwip', 1);
                //     });
                // })
                ->doesntHave('batches')
                ->get(),
            ];
            return view('accounting.backend.pages.fixedAssets.assetCostingEntries.stocks', $data);
        }elseif(request()->get('action') == 'costs'){
            $purchaseOrder = PurchaseOrder::with([
                'relPurchaseOrderItems',
                'relQuotation.exchangeRate.currency'
            ])
            ->find(request()->get('purchase_order_id'));
            $data = [
                'purchase_order_id' => request()->get('purchase_order_id'),
                'purchaseOrder' => $purchaseOrder,
                'goods_received_items_stock_in_id' => request()->get('goods_received_items_stock_in_id'),
                'items' => GoodsReceivedItemStockIn::with([
                    'relGoodsReceivedItems.relProduct.productUnit',
                    'relGoodsReceivedItems.relProduct.attributes.attributeOption.attribute'
                ])
                // ->where(function($query){
                //     return $query->whereHas('relGoodsReceivedItems.relProduct.category', function($query){
                //         return $query->where('is_cwip', 1);
                //     });
                // })
                ->doesntHave('batches')
                ->whereHas('relGoodsReceivedItems', function($query){
                    return $query->where('goods_received_note_id', request()->get('goods_received_items_stock_in_id'));
                })
                ->where(function($query) use($purchaseOrder){
                    return $query->whereHas('relGoodsReceivedItems.relProduct', function($query) use($purchaseOrder){
                        return $query->whereIn('id', isset($purchaseOrder->id) ? $purchaseOrder->relPurchaseOrderItems->pluck('product_id')->toArray() : []);
                    });
                })
                ->get(),
                'costCentres' => getCostCentres(true, request()->get('company_id')),
            ];
            return view('accounting.backend.pages.fixedAssets.assetCostingEntries.costs', $data);
        }elseif(request()->get('action') == 'cost-details'){
            $data = [
                'costs' => AssetCostingEntry::with([
                    'creator'
                ])
                ->where('po_id', request()->get('purchase_order_id'))
                ->where('product_id', request()->get('product_id'))
                ->get(),
            ];
            return view('accounting.backend.pages.fixedAssets.assetCostingEntries.cost-details', $data);
        }
    }

    public function store(Request $request)
    {
        $request->validate([
            'purchase_order_id' => 'required',
            'products' => 'required',
            'products.*' => 'required',
            'costs' => 'required',
            'costs.*' => 'required',
            'datetime' => 'required',
            'datetime.*' => 'required',
            'cost_centre_id' => 'required',
        ]);

        if($request->cost_centre_id <= 0){
            return response()->json([
                'success' => false,
                'message' => "Please Choose Cost Centre"
            ]);
        }

        $total = 0;
        foreach($request->products as $key => $goods_received_items_stock_in_id){
            $total += $request->costs[$goods_received_items_stock_in_id];
        }

        if($total <= 0){
            return response()->json([
                'success' => false,
                'message' => "Please enter some cost amounts."
            ]);
        }

        if(in_array($request->payment_type, ['cheque', 'fund-transfer'])){
            $request->validate([
                'payment_details' => 'required'
            ]);
        }

        $datetime = date('Y-m-d H:i:s');

        DB::beginTransaction();
        try{

            $purchaseOrder = PurchaseOrder::find($request->purchase_order_id);

            $ledgerEntries = [];
            foreach($request->products as $key => $goods_received_items_stock_in_id){
                if($request->costs[$goods_received_items_stock_in_id] > 0){
                    $stockIn = GoodsReceivedItemStockIn::findOrFail($goods_received_items_stock_in_id);

                    $cost = AssetCostingEntry::create([
                        'purchase_order_id' => $request->purchase_order_id,
                        'supplier_id' => ($request->payment_type == 'supplier-payable' ? $request->payment_supplier_id : $stockIn->relPurchaseOrder->relQuotation->supplier_id),
                        'goods_received_items_stock_in_id' => $stockIn->id,
                        'date' => date('Y-m-d', strtotime($request->datetime[$goods_received_items_stock_in_id])),
                        'time' => date('H:i:s', strtotime($request->datetime[$goods_received_items_stock_in_id])),
                        'cost' => $request->costs[$goods_received_items_stock_in_id],
                        'details' => $request->details[$goods_received_items_stock_in_id],
                        'attachments' => $request->hasFile('attachments.'.$goods_received_items_stock_in_id) ? $this->fileUpload($request->file('attachments.'.$goods_received_items_stock_in_id), 'upload/asset-cost-entries') : '',
                    ]);

                    $accountDefaultSettings = accountDefaultSettings();

                    $debit_account = (isset($stockIn->relGoodsReceivedItems->relProduct->inventory_account_id) && $stockIn->relGoodsReceivedItems->relProduct->inventory_account_id > 0 ? $stockIn->relGoodsReceivedItems->relProduct->inventory_account_id : $accountDefaultSettings['inventory_account']);
                    if(isset($stockIn->relGoodsReceivedItems->relProduct->id) && $stockIn->relGoodsReceivedItems->relProduct->is_service == 1){
                        $debit_account = (isset($stockIn->relGoodsReceivedItems->relProduct->cogs_account_id) && $stockIn->relGoodsReceivedItems->relProduct->cogs_account_id > 0 ? $stockIn->relGoodsReceivedItems->relProduct->cogs_account_id : $accountDefaultSettings['cogs_account']);
                    }

                    array_push($ledgerEntries, [
                        'cost_centre_id' => $request->cost_centre_id,
                        'chart_of_account_id' => $debit_account,
                        'debit' => $request->costs[$goods_received_items_stock_in_id],
                        'credit' => 0,
                        'narration' => 'Cost Entry :: '.($stockIn->relGoodsReceivedItems->relProduct->category->is_cwip == 1 ? 'CWIP' : ($stockIn->relGoodsReceivedItems->relProduct->is_service == 1 ? 'Service Costing' : 'Inventory')).' Debit',
                        'type' => 'asset-cost-entry',
                        'source' => $cost->id
                    ]);

                    $credit_account = $request->chart_of_account_id;
                    if($request->payment_type == 'cash'){
                        $credit_account = $accountDefaultSettings['cash_in_hand_account'];
                    }elseif($request->payment_type == 'cheque' || $request->payment_type == 'fund-transfer'){
                        $bankAccount = BankAccount::find($request->bank_account_id);
                        if(isset($bankAccount->chart_of_account_id) && $bankAccount->chart_of_account_id > 0){
                            $credit_account = $bankAccount->chart_of_account_id;
                        }else{
                            $credit_account = $accountDefaultSettings['bank_account'];
                        }
                    }elseif($request->payment_type == 'supplier-payable'){
                        $supplier = Suppliers::find($request->payment_supplier_id);
                        $credit_account = (isset($supplier->payable_account_id) && $supplier->payable_account_id > 0 ? $supplier->payable_account_id : $accountDefaultSettings['supplier_payable_account']);
                        if(isset($supplier->id)){
                            $supplierPayment = SupplierPayment::create([
                                'supplier_id' => $supplier->id,
                                'purchase_order_id' => $request->purchase_order_id,
                                'transection_date' => date('Y-m-d', strtotime($request->datetime[$goods_received_items_stock_in_id])),
                                'transection_type' => 'purchase',
                                'exchange_rate_id' => $purchaseOrder->relQuotation->exchange_rate_id,
                                'bill_number' => $request->payment_details,
                                'bill_amount' => $request->costs[$goods_received_items_stock_in_id],
                                'pay_amount' => 0,
                                'pay_date' => date('Y-m-d', strtotime($request->datetime[$goods_received_items_stock_in_id])),
                                'bill_type' => 'asset-costing-entries',
                                'status' => 'audited' 
                            ]);

                            saveSupplierLedger($supplier->id, date('Y-m-d', strtotime($request->datetime[$goods_received_items_stock_in_id])), 0, $request->costs[$goods_received_items_stock_in_id], '', '', 'Asset Costing Entries :: Supplier Payable Credit', (isset($request->bank_account_id) ? $request->bank_account_id : 0), $supplierPayment->id, $purchaseOrder->relQuotation->exchange_rate_id);
                        }
                    }

                    array_push($ledgerEntries, [
                        'cost_centre_id' => $request->cost_centre_id,
                        'chart_of_account_id' => $credit_account,
                        'debit' => 0,
                        'credit' => $request->costs[$goods_received_items_stock_in_id],
                        'narration' => 'Cost Entry :: '.ucwords(str_replace('-', ' ', $request->payment_type)).' Credit',
                        'type' => 'asset-cost-entry',
                        'source' => $cost->id
                    ]);

                    $datetime = $request->datetime[$goods_received_items_stock_in_id];
                }
            }

            if(isset($ledgerEntries[0])){
                $entry = saveLedgerEntries(($request->payment_type == 'supplier-payable' ? 5 : 4), $datetime, 1, '', $request->naration, $ledgerEntries, $purchaseOrder->relQuotation->exchangeRate->id, 0, 0, 0, getCostCentreCompany($request->cost_centre_id));
                savePOEntry($entry, ($request->payment_type == 'supplier-payable' ? $request->payment_supplier_id : $purchaseOrder->relQuotation->supplier_id), $request->purchase_order_id, 'asset-cost-entry');
            }

            DB::commit();
            
            session()->flash('alert-type', 'success');
            session()->flash('message', "Asset Costing Entries has been saved successfully.");
            return response()->json([
                'success' => true,
            ]);
        }catch(\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function show($id)
    {
        $goodsReceivedItemStockIn = GoodsReceivedItemStockIn::findOrFail($id);

        $costs = AssetCostingEntry::with([
            'creator'
        ])
        ->where('goods_received_items_stock_in_id', $goodsReceivedItemStockIn->id)
        ->get();
        return response()->json([
            'title' => 'Asset Costing Details for GRN #'.$goodsReceivedItemStockIn->relGoodsReceivedItems->relGoodsReceivedNote->grn_reference_no.', Item #'.$goodsReceivedItemStockIn->relGoodsReceivedItems->relProduct->name.' '.getProductAttributesFaster($goodsReceivedItemStockIn->relGoodsReceivedItems->relProduct),
            'body' => view('accounting.backend.pages.fixedAssets.assetCostingEntries.cost-details', compact('costs'))->render()
        ]);
    }
}
