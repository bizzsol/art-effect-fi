<?php
bolt_decrypt( __FILE__ , 'q7MS2h'); return 0;
##!!!##