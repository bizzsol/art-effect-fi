<?php
bolt_decrypt( __FILE__ , 'KvcN5D'); return 0;
##!!!##