<?php
bolt_decrypt( __FILE__ , 'CpWH0i'); return 0;
##!!!##