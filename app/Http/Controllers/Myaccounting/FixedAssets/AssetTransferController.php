<?php
bolt_decrypt( __FILE__ , 'NGMieP'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting\FixedAssets;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use App\Models\FixedAssets\FixedAssetBatch;
use App\Models\FixedAssets\FixedAssetBatchItem;
use App\Models\FixedAssets\FixedAssetBatchItemDepreciation;
use App\Models\FixedAssets\FixedAssetBatchUser;
use App\Models\FixedAssets\FixedAssetBatchItemSchedule;
use App\Models\FixedAssets\FixedAssetBatchItemScheduleEntry;
use App\Models\FixedAssets\FixedAssetLocation;
use App\Models\FixedAssets\AssetTransfer;
use App\Models\FixedAssets\AssetTransferEntry;
use App\Models\FixedAssets\FixedAssetBatchItemUser;
use App\User;
use App\Models\PmsModels\Category;
use App\Models\PmsModels\Product;
use App\Models\PmsModels\Accounts\Company;
use App\Models\PmsModels\Accounts\CurrencyType;
use App\Models\PmsModels\Accounts\CostCentre;
use App\Models\PmsModels\Accounts\BankAccount;

use App, DB, DataTables;
use Illuminate\Support\Facades\Auth;

class AssetTransferController extends Controller
{
    public function headerColumns($value='')
     {
        return array(
            ['SL', 'SL'],
            ['company', 'company','text-left'],
            ['asset_name', 'asset_name','text-left'],
            ['sub_category', 'sub_category','text-left'],
            ['category', 'category', 'text-left'],
            ['identification_mark', 'identification_mark', 'text-center'],
            ['initial_cost', 'initial_cost', 'text-center'], 
            ['initial_life', 'initial_life', 'text-center'], 
            ['initial_rate', 'initial_rate', 'text-center'], 
            ['consumed_life', 'consumed_life', 'text-center'], 
            ['accumulated_depreciation', 'accumulated_depreciation', 'text-center'], 
            ['cost', 'cost', 'text-center'], 
            ['life', 'life', 'text-center'], 
            ['rate', 'rate', 'text-center'], 
            ['created_by', 'created_by', 'text-center'], 
            ['location', 'location', 'text-center'],
        );
    }
    
    public function index()
    {
        $title = 'Asset Transfer';
        try {
            if (request()->ajax()) {
                 $schedules = FixedAssetBatchItemSchedule::with([
                    'batchItem.finalAsset.attributes.attributeOption.attribute',
                    'batchItem.finalAsset.productUnit',
                    'batchItem.finalAsset.category.category',
                    'batchItem.batch.items',
                    'batchItem.currentUser.fixedAssetLocation',
                    'batchItem.depreciations',

                    'batchItem.batch.goodsReceivedItemsStockIn.relPurchaseOrder.relPurchaseOrderItems',
                    'batchItem.batch.goodsReceivedItemsStockIn.relPurchaseOrder.relQuotation.relQuotationItems',
                    'batchItem.batch.goodsReceivedItemsStockIn.assetCostingEntries',

                    'entries.entry.entryType',
                    'creator',

                    'batchItem.batch.costCentre.profitCentre.company'
                ])
                ->when(!datatableOrdering(), function($query){
                    return $query->orderby('fixed_asset_batch_item_schedules.id', 'desc');
                });

                $codes = $schedules->get()->pluck('batchItem.asset_code')->toArray();
                $allBatchItems = FixedAssetBatchItem::whereIn('asset_code', $codes)->get();
                $allDepreciations = FixedAssetBatchItemDepreciation::with(['batchItem'])
                ->whereHas('batchItem', function($query) use($codes){
                    return $query->whereIn('asset_code', $codes);
                })->get();

                return DataTables::of($schedules)
                ->addIndexColumn()

                ->addColumn('company', function($schedule){
                    return isset($schedule->batchItem->batch->costCentre->profitCentre->company->code) ? $schedule->batchItem->batch->costCentre->profitCentre->company->code : '';
                })
                ->filterColumn('company', function ($query, $keyword) {
                    return $query->whereHas('batchItem.batch.costCentre.profitCentre.company', function ($query) use($keyword) {
                        $query->where('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                
                ->addColumn('asset_name', function($schedule){
                    return isset($schedule->batchItem->finalAsset->name) ? $schedule->batchItem->finalAsset->name.' '.getProductAttributesFaster($schedule->batchItem->finalAsset) : '';
                })
                ->filterColumn('asset_name', function ($query, $keyword) {
                    return $query->whereHas('batchItem.finalAsset', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('sub_category', function($schedule){
                    return isset($schedule->batchItem->finalAsset->category->name) ? $schedule->batchItem->finalAsset->category->name : '';
                })
                ->filterColumn('sub_category', function ($query, $keyword) {
                    return $query->whereHas('batchItem.finalAsset.category', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('category', function($schedule){
                    return isset($schedule->batchItem->finalAsset->category->category->name) ? $schedule->batchItem->finalAsset->category->category->name : '';
                })
                ->filterColumn('category', function ($query, $keyword) {
                    return $query->whereHas('batchItem.finalAsset.category.category', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('location', function($schedule){
                    return $schedule->batchItem->currentUser ? $schedule->batchItem->currentUser->fixedAssetLocation->name : 'Not Distributed';
                })
                ->filterColumn('location', function ($query, $keyword) {
                    return $query->whereHas('batchItem.currentUser.fixedAssetLocation', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('capitalization_date', function($schedule){
                    return date('Y-m-d', strtotime($schedule->batchItem->batch->created_at));
                })
                ->filterColumn('capitalization_date', function ($query, $keyword) {
                    return $query->whereHas('batchItem.batch', function ($query) use($keyword) {
                        $query->where('created_at', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('identification_mark', function($schedule){
                    return $schedule->batchItem->asset_code;
                })
                ->filterColumn('identification_mark', function ($query, $keyword) {
                    return $query->whereHas('batchItem', function ($query) use($keyword) {
                        $query->where('asset_code', 'LIKE', '%'.$keyword.'%');
                    });
                })

                ->editColumn('initial_cost', function($schedule){
                    return systemMoneyFormat($schedule->initial_cost);
                })
                ->editColumn('initial_rate', function($schedule){
                    return systemMoneyFormat($schedule->initial_rate);
                })
                ->editColumn('accumulated_depreciation', function($schedule){
                    return systemMoneyFormat($schedule->accumulated_depreciation);
                })
                ->editColumn('cost', function ($schedule) {
                    $entry = $schedule->entries->first()->entry;
                    if(isset($entry->id)){
                        return '<a class="text-primary" onclick="getShortDetails($(this))" data-id="' . ($entry->id) . '" data-entry-type="' . ($entry->entryType->name) . '" data-code="' . ($entry->code) . '">
                            <p style="width: 150px;white-space: normal">'.systemMoneyFormat($schedule->cost).'</p>
                        </a>';
                    }
                })
                ->editColumn('rate', function($schedule){
                    return systemMoneyFormat($schedule->rate);
                })
                ->addColumn('created_by', function($schedule){
                    return $schedule->creator ? $schedule->creator->name : '';
                })
                ->filterColumn('created_by', function ($query, $keyword) {
                    return $query->whereHas('creator', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })

                ->rawColumns(['cost'])
                ->make(true);
            }

            $data = [
                'title' => $title,
                'headerColumns' => $this->headerColumns()
            ];
            return view('accounting.backend.pages.fixedAssets.assetTransfers.index', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function create()
    {
        if(request()->get('action') == 'batches'){
            return view('accounting.backend.pages.fixedAssets.assetTransfers.batches', [
                'batches' => FixedAssetBatch::with([
                    'goodsReceivedItemsStockIn.relGoodsReceivedItems.relGoodsReceivedNote.relPurchaseOrder.purchaseOrderRequisitions'
                ])
                ->whereHas('items', function($query){
                    return $query->where('is_disposed', 0);
                })
                ->whereHas('items.currentUser.fixedAssetLocation.unit', function($query){
                    return $query->whereIn('company_id', auth()->user()->companies->pluck('company_id')->toArray());
                })
                ->when(request()->get('company_id') > 0, function($query){
                    return $query->whereHas('items.currentUser.fixedAssetLocation.unit', function($query){
                        return $query->where('company_id', request()->get('company_id'));
                    });
                })
                ->when(request()->get('product_id') > 0, function($query){
                    return $query->whereHas('items', function($query){
                        return $query->where('final_asset_id', request()->get('product_id'));
                    });
                })
                ->get(),
                'selected' => request()->get('selected')
            ]);
        }elseif(request()->get('action') == 'items'){
            return view('accounting.backend.pages.fixedAssets.assetTransfers.items', [
                'finalAssets' => FixedAssetBatchItem::with([

                ])
                ->whereHas('currentUser.fixedAssetLocation.unit', function($query){
                    return $query->whereIn('company_id', auth()->user()->companies->pluck('company_id')->toArray());
                })
                ->when(request()->get('company_id') > 0, function($query){
                    return $query->whereHas('currentUser.fixedAssetLocation.unit', function($query){
                        return $query->where('company_id', request()->get('company_id'));
                    });
                })
                ->when(request()->get('product_id') > 0, function($query){
                    return $query->where('final_asset_id', request()->get('product_id'));
                })
                ->where('is_disposed', 0)
                ->groupBy('asset_code')
                ->get(),
                'selected' => request()->get('selected')
            ]);
        }elseif(request()->get('action') == 'locations'){
            return view('accounting.backend.pages.fixedAssets.assetTransfers.locations', [
                'locations' => FixedAssetLocation::whereHas('unit', function($query){
                    return  $query->where('company_id', request()->get('company_id'));
                })->get(),
            ]);
        }elseif(request()->get('action') == 'cost-centres'){
            return getCostCentres(true, request()->get('company_id'), true);
        }elseif(request()->get('action') == 'users'){
            return view('accounting.backend.pages.fixedAssets.assetTransfers.users', [
                'users' => \App\User::whereHas('companies', function($query){
                    return  $query->where('company_id', request()->get('company_id'));
                })->get(),
            ]);
        }

        $title = 'Asset Transfer';
        $categories = Category::whereHas('products.fixedAssetBatchItems', function($query){
            return $query->where('is_disposed', 0);
        })
        ->get();
        try {
            $item = FixedAssetBatchItem::find(request()->get('fixed_asset_batch_item_id'));
            $data = [
                'title' => $title,
                'companies' => Company::has('profitCentres.costCentres')
                ->whereHas('users', function($query){
                    return $query->where('user_id', auth()->user()->id);
                })
                ->get(),
                'categories' => $categories,
                'products' => Product::with([
                    'attributes.attributeOption.attribute'
                ])
                ->whereIn('category_id', $categories->pluck('id')->toArray())
                ->whereHas('fixedAssetBatchItems', function($query){
                    return $query->where('is_disposed', 0);
                })
                ->get(),
                'currencyTypes' => CurrencyType::with(['currencies'])->get(),
                'item' => $item,
            ];
            return view('accounting.backend.pages.fixedAssets.assetTransfers.create', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function store(Request $request)
    {
        $request->validate([
            'fixed_asset_batch_item_id' => 'required',
            'destination_company_id' => 'required',
            'cost_centre_id' => 'required',
            'fixed_asset_location_id' => 'required',
            'user_id' => 'required',
        ]);

        DB::beginTransaction();
        try{
            $item = FixedAssetBatchItem::with([
                'finalAsset',
                'depreciations',
                'batch.costCentre.profitCentre.company',
                'currentUser'
            ])->findOrFail($request->fixed_asset_batch_item_id);

            $depreciation_count = $item->depreciations->count();
            $depreciation_total = $item->depreciations->sum('amount');

            $transfer = AssetTransfer::create([
                'fixed_asset_batch_item_id' => $item->id,
                'from_location_id' => $item->currentUser->fixed_asset_location_id,
                'to_location_id' => $request->fixed_asset_location_id,
                'date' => date('Y-m-d'),
                'unplanned_depreciation' => 0,
                'written_value' => $item->asset_value-$depreciation_total,
                'rate' => $item->depreciation_rate,
                'life' => (100/$item->depreciation_rate)-($depreciation_count > 0 ? systemDoubleValue($depreciation_count/12, 2) : 0),
                'created_by' => auth()->user()->id,
            ]);

            if($transfer){

                FixedAssetBatchItemUser::create([
                    'fixed_asset_batch_item_id' => $item->id,
                    'fixed_asset_location_id' => $request->fixed_asset_location_id,
                    'user_id' => $request->user_id,
                    'from' => date('Y-m-d'),
                    'created_by' => auth()->user()->id,
                ]);
                
                $accountDefaultSettings = accountDefaultSettings();
                $asset_ledger = $accountDefaultSettings['cwip_asset_account'];
                if($item->finalAsset->is_fixed_asset == 1){
                    $asset_ledger = (isset($item->finalAsset->inventory_account_id) && $item->finalAsset->inventory_account_id > 0 ? $item->finalAsset->inventory_account_id : $accountDefaultSettings['fixed_asset_account']);
                }elseif($item->finalAsset->is_cwip == 1){
                    $asset_ledger = (isset($item->finalAsset->cwip_asset_account_id) && $item->finalAsset->cwip_asset_account_id > 0 ? $item->finalAsset->cwip_asset_account_id : $accountDefaultSettings['cwip_asset_account']);
                }else{
                    $asset_ledger = (isset($item->finalAsset->inventory_account_id) && $item->finalAsset->inventory_account_id > 0 ? $item->finalAsset->inventory_account_id : $accountDefaultSettings['inventory_account']);
                }

                //Asset Transfer Source Company
                $cost_centre_id = (isset($item->currentUser->cost_centre_id) ? $item->currentUser->cost_centre_id : $item->batch->cost_centre_id);
                $company = Company::findOrFail(getCostCentreCompany($cost_centre_id));
                $items = [];
                array_push($items, [
                    'cost_centre_id' => $cost_centre_id,
                    'chart_of_account_id' => $company->intercompany_debit_ledger_id,
                    'debit' => $transfer->written_value,
                    'credit' => 0,
                    'narration' => 'Asset Transfer :: Inter-Company Debit for '.$company->code,
                    'type' => 'asset-transfer',
                    'source' => $transfer->id
                ]);
                array_push($items, [
                    'cost_centre_id' => $cost_centre_id,
                    'chart_of_account_id' => $asset_ledger,
                    'debit' => 0,
                    'credit' => $transfer->written_value,
                    'narration' => 'Asset Transfer :: Asset Value Credit',
                    'type' => 'asset-transfer',
                    'source' => $transfer->id
                ]);

                $entry = saveLedgerEntries(5, date('Y-m-d H:i:s'), 1, '', "Asset Transfer", $items, $item->batch->goodsReceivedItemsStockIn->relPurchaseOrder->relQuotation->exchange_rate_id, 0, 0, 1, $company->id);
                if(isset($entry['entry']->id)){
                    AssetTransferEntry::create([
                        'asset_transfer_id' => $transfer->id,
                        'entry_id' => $entry['entry']->id,
                    ]);
                }
                //Asset Transfer Source Company

                //Asset Transfer Destination Company
                $company = Company::findOrFail(getCostCentreCompany($request->cost_centre_id));
                $items = [];
                array_push($items, [
                    'cost_centre_id' => $request->cost_centre_id,
                    'chart_of_account_id' => $asset_ledger,
                    'debit' => $transfer->written_value,
                    'credit' => 0,
                    'narration' => 'Asset Transfer :: Asset Transfer Debit',
                    'type' => 'asset-transfer',
                    'source' => $transfer->id
                ]);
                array_push($items, [
                    'cost_centre_id' => $request->cost_centre_id,
                    'chart_of_account_id' => $company->intercompany_credit_ledger_id,
                    'debit' => 0,
                    'credit' => $transfer->written_value,
                    'narration' => 'Asset Transfer :: Inter-Company Credit for '.$company->code,
                    'type' => 'asset-transfer',
                    'source' => $transfer->id
                ]);
                
                $entry = saveLedgerEntries(5, date('Y-m-d H:i:s'), 1, '', "Asset Transfer", $items, $item->batch->goodsReceivedItemsStockIn->relPurchaseOrder->relQuotation->exchange_rate_id, 0, 0, 1, $company->id);

                if(isset($entry['entry']->id)){
                    AssetTransferEntry::create([
                        'asset_transfer_id' => $transfer->id,
                        'entry_id' => $entry['entry']->id,
                    ]);
                }
                //Asset Transfer Destination Company
            }
            
            DB::commit();
            session()->flash('alert-type', 'success');
            session()->flash('message', 'Asset Has been Transferred Successfully.');
            return response()->json([
                'success' => true,
            ]);
        }catch(\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }
}
