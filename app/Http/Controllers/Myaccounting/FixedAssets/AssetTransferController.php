<?php
bolt_decrypt( __FILE__ , 'fS2J6w'); return 0;
##!!!##