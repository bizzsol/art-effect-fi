<?php
bolt_decrypt( __FILE__ , 'h3kTNX'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting\FixedAssets;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use App\Models\FixedAssets\FixedAssetBatch;
use App\Models\FixedAssets\FixedAssetBatchItem;
use App\Models\FixedAssets\FixedAssetBatchItemUser;
use App\Models\FixedAssets\FixedAssetItemMovement;
use App\Models\FixedAssets\FixedAssetItemPhysicalStatus;
use App\Models\FixedAssets\FixedAssetBatchItemDepreciation;
use App\User;
use App\Models\PmsModels\Category;
use App\Models\PmsModels\Product;
use App\Models\PmsModels\Accounts\Company;
use App\Models\PmsModels\Accounts\CostCentre;
use App\Models\Hr\Unit;
use App\Models\Hr\Department;
use App,DB, DataTables;
use Illuminate\Support\Facades\Auth;

class FixedAssetReportController extends Controller
{
    /**
     * Set global data table headers.
     *
     * @return headerColumns
     */
     public function asssetRegisterHeaderColumns($value='')
     {
        $rows =  array(
            ['SL', 'SL'],
            ['asset_name', 'asset_name','text-left'],
            ['sub_category', 'sub_category','text-left'],
            ['category', 'category', 'text-left'],
            ['identification_mark', 'identification_mark', 'text-center'],
            ['capitalization_date', 'capitalization_date', 'text-center'], 
            ['opening_cost', 'opening_cost', 'text-right'],
            ['addition', 'addition', 'text-right'],
            ['disposal', 'disposal', 'text-right'],
            ['cost', 'cost', 'text-right'],
            ['depreciation_rate', 'depreciation_rate', 'text-center'],
            ['opening_depreciation', 'opening_depreciation', 'text-right'],
            ['depreciation_for_period', 'depreciation_for_period', 'text-right'],
            ['depreciation_disposed', 'depreciation_disposed', 'text-right'], 
            ['accumulated_depreciation', 'accumulated_depreciation', 'text-right'], 
            ['book_value', 'book_value', 'text-right'],
            ['location', 'location', 'text-center'],
            ['status', 'status', 'text-center'],
        );
        return $rows;
    }

    /**
     * Fixed assets report based on category.
     * subcategory, product, users and date
     * @return \Illuminate\Http\Response
     */
    public function assetRegister()
    {
        try {
            $companies = Company::has('profitCentres.costCentres')
            ->whereHas('users', function($query){
                return $query->where('user_id', auth()->user()->id);
            })
            ->get();
            $company_id = request()->get('company_id') > 0 ? request()->get('company_id') : $companies[0]->id;
            $fiscalYear = getActiveFiscalYear($company_id);

            $from = request()->has('from') && strtotime(request()->get('from')) > 0 ? date('Y-m-d', strtotime(request()->get('from'))) : date('Y-m-d', strtotime($fiscalYear->start));
            $to = request()->has('to') && strtotime(request()->get('to')) > 0 ? date('Y-m-d', strtotime(request()->get('to'))) : date('Y-m-d', strtotime($fiscalYear->end));

            if (request()->ajax()) {
                 $items = FixedAssetBatchItem::with([
                    'finalAsset.attributes.attributeOption.attribute',
                    'finalAsset.productUnit',
                    'finalAsset.category.category',
                    'batch.items',
                    'currentUser.fixedAssetLocation',
                    'depreciations',

                    'batch.goodsReceivedItemsStockIn.relPurchaseOrder.relPurchaseOrderItems',
                    'batch.goodsReceivedItemsStockIn.relPurchaseOrder.relQuotation.relQuotationItems',
                    'batch.goodsReceivedItemsStockIn.assetCostingEntries',
                ])
                ->groupBy('asset_code')
                ->whereHas('batch.costCentre.profitCentre', function($query) use($company_id){
                    return $query->where('company_id', $company_id);
                })
                ->when(!datatableOrdering(), function($query){
                    return $query->orderby('id', 'desc');
                });

                $codes = $items->pluck('asset_code')->toArray();
                $allBatchItems = FixedAssetBatchItem::whereIn('asset_code', $codes)->get();
                $allDepreciations = FixedAssetBatchItemDepreciation::with(['batchItem'])
                ->whereHas('batchItem', function($query) use($codes){
                    return $query->whereIn('asset_code', $codes);
                })->get();

                return Datatables::of($items)
                ->addIndexColumn()
                ->addColumn('asset_name', function($item){
                    return isset($item->finalAsset->name) ? $item->finalAsset->name.' '.getProductAttributesFaster($item->finalAsset) : '';
                })
                ->filterColumn('asset_name', function ($query, $keyword) {
                    return $query->whereHas('finalAsset', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('sub_category', function($item){
                    return isset($item->finalAsset->category->name) ? $item->finalAsset->category->name : '';
                })
                ->filterColumn('sub_category', function ($query, $keyword) {
                    return $query->whereHas('finalAsset.category', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('category', function($item){
                    return isset($item->finalAsset->category->category->name) ? $item->finalAsset->category->category->name : '';
                })
                ->filterColumn('category', function ($query, $keyword) {
                    return $query->whereHas('finalAsset.category.category', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('location', function($item){
                    return $item->currentUser ? $item->currentUser->fixedAssetLocation->name : 'Not Distributed';
                })
                ->filterColumn('location', function ($query, $keyword) {
                    return $query->whereHas('currentUser.fixedAssetLocation', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('capitalization_date', function($item){
                    return date('Y-m-d', strtotime($item->batch->created_at));
                })
                ->filterColumn('capitalization_date', function ($query, $keyword) {
                    return $query->whereHas('batch', function ($query) use($keyword) {
                        $query->where('created_at', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('opening_cost', function($item) use($from, $to, $allBatchItems, $allDepreciations){
                    $opening_addition = $allBatchItems->where('asset_code', $item->asset_code)->where('created_at', '<', $from)->sum('asset_value');
                    $opening_depreciated = $allDepreciations->where('to', '<', $from)
                    ->where('batchItem.asset_code', $item->asset_code)
                    ->where('batchItem.is_disposed', 0)
                    ->sum('amount');
                    $opening_disposal = $allBatchItems->where('asset_code', $item->asset_code)
                    ->where('is_disposed', 1)->where('disposed_at', '<', $from)->sum('asset_value');
                    return systemMoneyFormat(($opening_addition-$opening_disposal)-$opening_depreciated);
                })
                ->addColumn('addition', function($item) use($from, $to, $allBatchItems){
                    $addition = $allBatchItems->where('asset_code', $item->asset_code)
                    ->where('created_at', '>=', $from)
                    ->where('created_at', '<=', $to)
                    ->sum('asset_value');
                    return systemMoneyFormat($addition);
                })
                ->addColumn('disposal', function($item) use($from, $to, $allBatchItems){
                    $disposal = $allBatchItems->where('asset_code', $item->asset_code)
                    ->where('is_disposed', 1)
                    ->where('disposed_at', '>=', $from)
                    ->where('disposed_at', '<=', $to)
                    ->sum('asset_value');
                    return systemMoneyFormat($disposal);
                })
                ->addColumn('cost', function($item) use($from, $to, $allBatchItems, $allDepreciations){
                    $opening_addition = $allBatchItems->where('asset_code', $item->asset_code)->where('created_at', '<', $from)->sum('asset_value');
                    $opening_depreciated = $allDepreciations->where('to', '<', $from)
                    ->where('batchItem.asset_code', $item->asset_code)
                    ->where('batchItem.is_disposed', 0)
                    ->sum('amount');
                    $opening_disposal = $allBatchItems->where('asset_code', $item->asset_code)
                    ->where('is_disposed', 1)->where('disposed_at', '<', $from)->sum('asset_value');

                    $addition = $allBatchItems->where('asset_code', $item->asset_code)
                    ->where('created_at', '>=', $from)
                    ->where('created_at', '<=', $to)
                    ->sum('asset_value');

                    $disposal = $allBatchItems->where('asset_code', $item->asset_code)
                    ->where('is_disposed', 1)
                    ->where('disposed_at', '>=', $from)
                    ->where('disposed_at', '<=', $to)
                    ->sum('asset_value');

                    return systemMoneyFormat((($opening_addition-$opening_disposal)-$opening_depreciated)+$addition-$disposal);
                })
                ->addColumn('depreciation_rate', function($item){
                    return $item->depreciation_rate.'%';
                })
                ->filterColumn('depreciation_rate', function ($query, $keyword) {
                    return $query->where('depreciation_rate', 'LIKE', '%'.$keyword.'%');
                })
                ->addColumn('opening_depreciation', function($item) use($from, $to, $allDepreciations){
                    $opening_depreciation = $allDepreciations->where('batchItem.asset_code', $item->asset_code)->where('to', '<', $from)
                    ->sum('amount');
                    return systemMoneyFormat($opening_depreciation);
                })
                ->addColumn('depreciation_for_period', function($item) use($from, $to, $allDepreciations){
                    $opening_depreciation = $allDepreciations->where('batchItem.asset_code', $item->asset_code)->where('to', '<', $from)->sum('amount');
                    $accumulated_depreciation = $allDepreciations->where('to', '<=', $to)
                    ->where('batchItem.asset_code', $item->asset_code)
                    ->sum('amount');
                    return systemMoneyFormat($accumulated_depreciation-$opening_depreciation);
                })
                ->addColumn('depreciation_disposed', function($item) use($from, $to, $allDepreciations){
                    $accumulated_depreciation = $allDepreciations->where('to', '<=', $to)
                    ->where('batchItem.asset_code', $item->asset_code)
                    ->where('batchItem.is_disposed', 1)
                    ->sum('amount');
                    return systemMoneyFormat($accumulated_depreciation);
                })
                ->addColumn('accumulated_depreciation', function($item) use($to, $allDepreciations){
                    $accumulated_depreciation = $allDepreciations->where('to', '<=', $to)
                    ->where('batchItem.asset_code', $item->asset_code)
                    ->where('batchItem.is_disposed', 0)
                    ->sum('amount');
                    return systemMoneyFormat($accumulated_depreciation);
                })
                ->addColumn('book_value', function($item) use($to, $allBatchItems, $allDepreciations){
                    $asset_value = $allBatchItems->where('asset_code', $item->asset_code)
                    ->where('is_disposed', 0)
                    ->sum('asset_value');
                    $accumulated_depreciation = $allDepreciations->where('to', '<=', $to)
                    ->where('batchItem.asset_code', $item->asset_code)
                    ->where('batchItem.is_disposed', 0)
                    ->sum('amount');
                    return systemMoneyFormat($asset_value-$accumulated_depreciation);
                })
                ->addColumn('identification_mark', function($item){
                    return $item->asset_code;
                })
                ->filterColumn('identification_mark', function ($query, $keyword) {
                    return $query->where('asset_code', 'LIKE', '%'.$keyword.'%');
                })
                ->addColumn('status', function($item){
                    return $item->is_disposed == 0 ? 'Active' : ucwords($item->disposal_type);
                })
                ->skipTotalRecords()
                ->rawColumns([])
                ->toJson();
            }

            $data = [
                'title' => 'Fixed Asset Register',
                'companies' => $companies,
                'company_id' => $company_id,
                'from' => $from,
                'to' => $to,
                'headerColumns' => $this->asssetRegisterHeaderColumns()
            ];
            return view('accounting.backend.pages.fixedAssets.fixedAssetReports.assetRegister', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Fixed assets report based on category.
     * subcategory, product, users and date
     * @return \Illuminate\Http\Response
     */
    public function assetCostBreakdown()
    {
        $title = 'Asset Cost Breakdown';
        try {
            $fiscalYear = getActiveFiscalYear(auth()->user()->costCentre->profitCentre->company_id);
            $from = request()->has('from') && strtotime(request()->get('from')) > 0 ? date('Y-m-d', strtotime(request()->get('from'))) : date('Y-m-d', strtotime($fiscalYear->start));
            $to = request()->has('to') && strtotime(request()->get('to')) > 0 ? date('Y-m-d', strtotime(request()->get('to'))) : date('Y-m-d', strtotime($fiscalYear->end));

            $items = FixedAssetBatchItem::with([
                'finalAsset.attributes.attributeOption.attribute',
                'finalAsset.productUnit',
                'finalAsset.category.category',
                'batch.items',
                'currentUser.fixedAssetLocation',
                'depreciations',

                'batch.goodsReceivedItemsStockIn.relPurchaseOrder.relPurchaseOrderItems',
                'batch.goodsReceivedItemsStockIn.relPurchaseOrder.relQuotation.relQuotationItems',
                'batch.goodsReceivedItemsStockIn.assetCostingEntries',
            ])
            ->whereHas('batch.costCentre.profitCentre', function($query){
                return $query->whereIn('company_id', auth()->user()->companies->pluck('company_id')->toArray());
            })
            ->groupBy('asset_code')
            ->get();

            $codes = $items->pluck('asset_code')->toArray();
            $allBatchItems = FixedAssetBatchItem::whereIn('asset_code', $codes)->get();
            $allDepreciations = FixedAssetBatchItemDepreciation::with(['batchItem'])
            ->whereHas('batchItem', function($query) use($codes){
                return $query->whereIn('asset_code', $codes);
            })->get();

            $data = [
                'title' => $title.' ('.$from.' to '.$to.')',
                'from' => $from,
                'to' => $to,
                'items' => $items,
                'allBatchItems' => $allBatchItems,
                'allDepreciations' => $allDepreciations,
            ];

            if(request()->has('report_type') && request()->get('report_type') == 'pdf'){
                return viewMPDF('accounting.backend.pages.fixedAssets.fixedAssetReports.assetCostBreakdownPDF', $data, $title, $title);
            }

            if(request()->has('report_type') && request()->get('report_type') == 'report'){
                return view('accounting.backend.pages.fixedAssets.fixedAssetReports.assetCostBreakdownReport', $data);
            }

            return view('accounting.backend.pages.fixedAssets.fixedAssetReports.assetCostBreakdown', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function categoryWiseAssetRegister()
    {
        try{
            $category_id = request()->has('category_id') ? request()->get('category_id') : 0;
            $fiscalYear = getActiveFiscalYear(auth()->user()->costCentre->profitCentre->company_id);
            $from = request()->has('from') && strtotime(request()->get('from')) > 0 ? date('Y-m-d', strtotime(request()->get('from'))) : date('Y-m-d', strtotime($fiscalYear->start));
            $to = request()->has('to') && strtotime(request()->get('to')) > 0 ? date('Y-m-d', strtotime(request()->get('to'))) : date('Y-m-d', strtotime($fiscalYear->end));

            $category = Category::find($category_id);

            $data = [
                'title' => 'Category wise Asset Register '.(isset($category->id) ? '#'.$category->name.' ('.$category->code.')' : '').' ('.($from.' to '.$to).')',
                'categories' => Category::has('subCategory.products.fixedAssetBatchItems.finalAsset')->get(),
                'category_id' => $category_id,
                'from' => $from,
                'to' => $to,
            ];
            
            if($category_id > 0){
                $items = FixedAssetBatchItem::with([
                    'finalAsset.attributes.attributeOption.attribute',
                    'finalAsset.productUnit',
                    'finalAsset.category.category',
                    'batch.items',
                    'currentUser.fixedAssetLocation',
                    'depreciations',

                    'batch.goodsReceivedItemsStockIn.relPurchaseOrder.relPurchaseOrderItems',
                    'batch.goodsReceivedItemsStockIn.relPurchaseOrder.relQuotation.relQuotationItems',
                    'batch.goodsReceivedItemsStockIn.assetCostingEntries',
                ])
                ->whereHas('batch.costCentre.profitCentre', function($query){
                    return $query->whereIn('company_id', auth()->user()->companies->pluck('company_id')->toArray());
                })
                ->whereHas('finalAsset.category.category', function($query) use($category_id){
                    return $query->where('id', $category_id);
                })
                ->groupBy('asset_code')
                // ->whereHas('batch', function($query) use($from){
                //     return $query->where('created_at', '>=', $from);
                // })
                ->get();

                $codes = $items->pluck('asset_code')->toArray();
                $allBatchItems = FixedAssetBatchItem::whereIn('asset_code', $codes)->get();
                $allDepreciations = FixedAssetBatchItemDepreciation::with(['batchItem'])
                ->whereHas('batchItem', function($query) use($codes){
                    return $query->whereIn('asset_code', $codes);
                })->get();

                $data['items'] = $items;
                $data['allBatchItems'] = $allBatchItems;
                $data['allDepreciations'] = $allDepreciations;

                return viewMPDF('accounting.backend.pages.fixedAssets.fixedAssetReports.categoryWiseAssetRegisterPDF', $data, $data['title'], $data['title'], 'a4', 'L');
            }

            return view('accounting.backend.pages.fixedAssets.fixedAssetReports.categoryWiseAssetRegister', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function subCategoryWiseAssetRegister()
    {
        try{
            $sub_category_id = request()->has('category_id') ? request()->get('category_id') : 0;
            $fiscalYear = getActiveFiscalYear(auth()->user()->costCentre->profitCentre->company_id);
            $from = request()->has('from') && strtotime(request()->get('from')) > 0 ? date('Y-m-d', strtotime(request()->get('from'))) : date('Y-m-d', strtotime($fiscalYear->start));
            $to = request()->has('to') && strtotime(request()->get('to')) > 0 ? date('Y-m-d', strtotime(request()->get('to'))) : date('Y-m-d', strtotime($fiscalYear->end));

            $category = Category::find($sub_category_id);

            $data = [
                'title' => 'Sub Category wise Asset Register '.(isset($category->id) ? '#'.$category->name.' ('.$category->code.')' : '').((isset($category->id) ? ' #'.$category->category->name.' ('.$category->category->code.')' : '')).' ('.($from.' to '.$to).')',
                'categories' => Category::has('products.fixedAssetBatchItems.finalAsset')->get(),
                'sub_category_id' => $sub_category_id,
                'from' => $from,
                'to' => $to,
            ];
            
            if($sub_category_id > 0){
                $items = FixedAssetBatchItem::with([
                    'finalAsset.attributes.attributeOption.attribute',
                    'finalAsset.productUnit',
                    'finalAsset.category.category',
                    'batch.items',
                    'currentUser.fixedAssetLocation',
                    'depreciations',

                    'batch.goodsReceivedItemsStockIn.relPurchaseOrder.relPurchaseOrderItems',
                    'batch.goodsReceivedItemsStockIn.relPurchaseOrder.relQuotation.relQuotationItems',
                    'batch.goodsReceivedItemsStockIn.assetCostingEntries',
                ])
                ->whereHas('batch.costCentre.profitCentre', function($query){
                    return $query->whereIn('company_id', auth()->user()->companies->pluck('company_id')->toArray());
                })
                ->whereHas('finalAsset.category', function($query) use($sub_category_id){
                    return $query->where('id', $sub_category_id);
                })
                ->groupBy('asset_code')
                // ->whereHas('batch', function($query) use($from){
                //     return $query->where('created_at', '>=', $from);
                // })
                ->get();

                $codes = $items->pluck('asset_code')->toArray();
                $allBatchItems = FixedAssetBatchItem::whereIn('asset_code', $codes)->get();
                $allDepreciations = FixedAssetBatchItemDepreciation::with(['batchItem'])
                ->whereHas('batchItem', function($query) use($codes){
                    return $query->whereIn('asset_code', $codes);
                })->get();

                $data['items'] = $items;
                $data['allBatchItems'] = $allBatchItems;
                $data['allDepreciations'] = $allDepreciations;

                return viewMPDF('accounting.backend.pages.fixedAssets.fixedAssetReports.subCategoryWiseAssetRegisterPDF', $data, $data['title'], $data['title'], 'a4', 'L');
            }

            return view('accounting.backend.pages.fixedAssets.fixedAssetReports.subCategoryWiseAssetRegister', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Set global data table headers.
     *
     * @return headerColumns
     */
     public function headerColumns($value='')
     {
        $rows =  array(
            ['SL', 'SL'],
            ['asset', 'asset','text-center'],
            ['GRN', 'GRN','text-left'],
            ['batch_id', 'batch_id', 'text-left'], 
            ['asset_code', 'asset_code', 'text-left'], 
            ['location', 'location', 'text-left'],
            ['user', 'user', 'text-left'],
            ['using_from', 'using_from', 'text-left'], 
            ['remarks', 'remarks', 'text-left'],
            ['actions', 'actions', 'text-center'],
        );
        return $rows;
    }

    /**
     * Fixed assets report based on category.
     * subcategory, product, users and date
     * @return \Illuminate\Http\Response
     */
    public function assetReport()
    {
        $title = 'Report - Fixed Asset';
        try {
            $items = FixedAssetBatchItem::with([
                'finalAsset.attributes.attributeOption.attribute',
                'batch.requisitionDeliveryItem.relRequisitionDelivery.relRequisition',
                'users',
                'currentUser.fixedAssetLocation',
                'currentUser.user',
            ])
            ->whereHas('batch.costCentre.profitCentre', function($query){
                return $query->whereIn('company_id', auth()->user()->companies->pluck('company_id')->toArray());
            })
            ->groupBy('asset_code')
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });

            if (request()->ajax()) {
                return Datatables::of($items)
                ->addIndexColumn()
                ->addColumn('asset', function($item){
                    return isset($item->finalAsset->name) ? $item->finalAsset->name.' '.getProductAttributesFaster($item->finalAsset) : '';
                })
                ->filterColumn('asset', function ($query, $keyword) {
                    return $query->whereHas('finalAsset', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('GRN', function($item){
                    return isset($item->batch->goodsReceivedItemsStockIn->relGoodsReceivedItems->relGoodsReceivedNote->grn_reference_no) ? $item->batch->goodsReceivedItemsStockIn->relGoodsReceivedItems->relGoodsReceivedNote->grn_reference_no : '';
                })
                ->filterColumn('GRN', function ($query, $keyword) {
                    return $query->whereHas('batch.goodsReceivedItemsStockIn.relGoodsReceivedItems.relGoodsReceivedNote', function ($query) use($keyword) {
                        $query->where('grn_reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('batch_id', function($item){
                    return isset($item->batch->batch)?$item->batch->batch:'';
                })
                ->filterColumn('batch_id', function ($query, $keyword) {
                    return $query->whereHas('batch', function ($query) use($keyword) {
                        $query->where('batch', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('location', function($item){
                    return $item->currentUser ? $item->currentUser->fixedAssetLocation->name : 'Not Distributed';
                })
                ->filterColumn('location', function ($query, $keyword) {
                    return $query->whereHas('currentUser.fixedAssetLocation', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('user', function($item){
                    return $item->currentUser ? ($item->currentUser->user ? $item->currentUser->user->name : '') : 'Not Distributed';
                })
                ->filterColumn('user', function ($query, $keyword) {
                    return $query->whereHas('currentUser.user', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('using_from', function($item){
                    return $item->currentUser ? $item->currentUser->from .' - '.(strtotime($item->currentUser->to) > 0 ? $item->currentUser->to : 'Now') : 'Not Distributed' ;
                })
                ->filterColumn('using_from', function ($query, $keyword) {
                    return $query->whereHas('currentUser', function ($query) use($keyword) {
                        $query->where('from', 'LIKE', '%'.$keyword.'%')->orWhere('to', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('remarks', function($item){
                    return $item->currentUser ? $item->currentUser->giving_remarks : '';
                })
                ->filterColumn('remarks', function ($query, $keyword) {
                    return $query->whereHas('users', function ($query) use($keyword) {
                      $query->where('giving_remarks', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('actions', function($item){
                    $actions='';
                    if($item->users->count() > 0){
                        $actions.='<a class="btn btn-xs btn-success" onclick="loadHistory('.$item->id .', '. $item->asset_code .')"><i class="las la-file-alt"></i>&nbsp;History</a>';
                    }
                    
                    return $actions;
                })
                ->rawColumns(['using_from','actions'])
                ->make(true);
            }

            $data = [
                'title' => $title,
                'headerColumns'=>$this->headerColumns()
            ];
            return view('accounting.backend.pages.fixedAssets.fixedAssetReports.fxReport', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Get subcategory based on category.
     *
     * @return \Illuminate\Http\Response
     */

    public function getSubCategories($id)
    {
        $response = '';
        $subCategory=Category::when($id > 0, function($query) use($id){
            return $query->where('parent_id',$id);
        })
        // ->where(function($query){
        //     return $query->where('is_fixed_asset', 1)->orWhere('is_cwip', 1);
        // })
        ->has('products.requisitionDeliveryItem.batches.items')
        ->get();

        $response .= "<option value='0'>-All Category-</option>";
        if (isset($subCategory) && count((array)$subCategory)>0) {
            foreach ($subCategory as $data) {
                $response.= '<option value="'.$data->id.'" '.(request()->get('selected') == $data->id ? 'selected' : '').'>'.$data->name.'('.$data->code.')'.'</option>';
            }
        }
        return $response;
    }

    /**
     * Get product based on category.
     *
     * @return \Illuminate\Http\Response
     */

    public function getProducts($id)
    {
        $response = '';
        $products = Product::with([
            'attributes.attributeOption.attribute'
        ])
        ->when($id>0, function($query) use($id){
            return $query->where('category_id',$id);
        })->has('requisitionDeliveryItem.batches.items')->get();

        $response .= "<option value='0'>-All Product-</option>";
        if ($products->count() > 0) {
            foreach ($products as $product) {
                $response.= '<option value="'.$product->id.'" '.(request()->get('selected') == $product->id ? 'selected' : '').'>'.$product->name.' '.getProductAttributesFaster($product).'</option>';
            }
        }
        return $response;
    }

    /**
     * Get batches based on product id.
     *
     * @return \Illuminate\Http\Response
     */

    public function getBatches($id)
    {
        $data = [
            'batches' => FixedAssetBatch::has('items')
            ->whereHas('requisitionDeliveryItem', function($query) use($id){
                return $query->where('product_id', $id);
            })->get(),
            'selected' => request()->has('selected')?request()->get('selected'):'',
        ];
        return view('accounting.backend.pages.fixedAssets.fixedAssetReports.batches', $data);
    }

    /**
     * Cost center wise report.
     *
     * @return \Illuminate\Http\Response
    */

    public function CCRheaderColumns()
    {
        $rows =  array(
            ['SL', 'SL'],
            ['asset', 'asset','text-center'],
            ['GRN', 'GRN','text-left'],
            ['batch_id', 'batch_id', 'text-left'], 
            ['asset_code', 'asset_code', 'text-left'], 
            ['cost_centre', 'cost_centre', 'text-left'],
            ['location', 'location', 'text-left'],
            ['user', 'user', 'text-left'],
            ['using_from', 'using_from', 'text-left'], 
            ['remarks', 'remarks', 'text-left'],
            ['actions', 'actions', 'text-center'],
        );
        return $rows;
    }

    public function costCenterWiseReport()
    {
        $title = 'Report - Cost Centre Wise';
        try {
            $items = FixedAssetBatchItem::with([
                'finalAsset.attributes.attributeOption.attribute',
                'batch.requisitionDeliveryItem.relRequisitionDelivery.relRequisition',
                'users',
                'currentUser.user.costCentre'
            ])
            ->whereHas('batch.costCentre.profitCentre', function($query){
                return $query->whereIn('company_id', auth()->user()->companies->pluck('company_id')->toArray());
            })
            ->groupBy('asset_code')
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });

            if (request()->ajax()) {
                return Datatables::of($items)
                ->addIndexColumn()
                ->addColumn('asset', function($item){
                    return isset($item->finalAsset->name) ? $item->finalAsset->name.' '.getProductAttributesFaster($item->finalAsset) : '';
                })
                ->filterColumn('asset', function ($query, $keyword) {
                    return $query->whereHas('finalAsset', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('GRN', function($item){
                    return isset($item->batch->goodsReceivedItemsStockIn->relGoodsReceivedItems->relGoodsReceivedNote->grn_reference_no) ? $item->batch->goodsReceivedItemsStockIn->relGoodsReceivedItems->relGoodsReceivedNote->grn_reference_no : '';
                })
                ->filterColumn('GRN', function ($query, $keyword) {
                    return $query->whereHas('batch.goodsReceivedItemsStockIn.relGoodsReceivedItems.relGoodsReceivedNote', function ($query) use($keyword) {
                        $query->where('grn_reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('batch_id', function($item){
                    return isset($item->batch->batch)?$item->batch->batch:'';
                })
                ->filterColumn('batch_id', function ($query, $keyword) {
                    return $query->whereHas('batch', function ($query) use($keyword) {
                        $query->where('batch', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('cost_centre', function($item){
                    return $item->currentUser && $item->currentUser->user && $item->currentUser->user->costCentre ? $item->currentUser->user->costCentre->name : 'Not Distributed';
                })
                ->filterColumn('cost_centre', function ($query, $keyword) {
                    return $query->whereHas('currentUser.user.costCentre', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('location', function($item){
                    return $item->currentUser ? $item->currentUser->fixedAssetLocation->name : 'Not Distributed';
                })
                ->filterColumn('location', function ($query, $keyword) {
                    return $query->whereHas('currentUser.fixedAssetLocation', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('user', function($item){
                    return $item->currentUser ? ($item->currentUser->user ? $item->currentUser->user->name : '') : 'Not Distributed';
                })
                ->filterColumn('user', function ($query, $keyword) {
                    return $query->whereHas('currentUser.user', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('using_from', function($item){
                    return $item->currentUser ? $item->currentUser->from .' - '.(strtotime($item->currentUser->to) > 0 ? $item->currentUser->to : 'Now') : 'Not Distributed' ;
                })
                ->filterColumn('using_from', function ($query, $keyword) {
                    return $query->whereHas('currentUser', function ($query) use($keyword) {
                        $query->where('from', 'LIKE', '%'.$keyword.'%')->orWhere('to', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('remarks', function($item){
                    return $item->currentUser ? $item->currentUser->giving_remarks : '';
                })
                ->filterColumn('remarks', function ($query, $keyword) {
                    return $query->whereHas('users', function ($query) use($keyword) {
                      $query->where('giving_remarks', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('actions', function($item){
                    $actions='';
                    if($item->users->count() > 0){
                        $actions.='<a class="btn btn-xs btn-success" onclick="loadHistory('.$item->id .', '. $item->asset_code .')"><i class="las la-file-alt"></i>&nbsp;History</a>';
                    }
                    
                    return $actions;
                })
                ->rawColumns(['using_from','actions'])
                ->make(true);
            }

            $data = [
                'title' => $title,
                'headerColumns'=>$this->CCRheaderColumns()
            ];
            return view('accounting.backend.pages.fixedAssets.fixedAssetReports.costCenterReport', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }


    /**
     * Set global data table headers.
     *
     * @return headerColumns
     */
     public function PHeaderColumns($value='')
     {
        $rows =  array(
            ['SL', 'SL'],
            ['asset', 'asset','text-left'],
            ['GRN', 'GRN','text-left'],
            ['batch_id', 'batch_id', 'text-center'], 
            ['asset_code', 'asset_code', 'text-center'], 
            ['location', 'location', 'text-left'],
            ['user', 'user', 'text-left'],
            ['inspector', 'inspector', 'text-left'], 
            ['date', 'date', 'text-left'],
            ['time', 'time', 'text-center'],
            ['remarks', 'remarks', 'text-center'],
            ['ratings', 'ratings', 'text-center'],
            ['image', 'image', 'text-center'],
        );
        return $rows;
    }

    /**
     * Fixed asset physical status report.
     *
     * @return \Illuminate\Http\Response
    */

    public function physicalStatusReport()
    {
        $title = 'Fixed Asset Physical Status Report';
        try {
            $inspections = FixedAssetItemPhysicalStatus::with([
                'batchItem.finalAsset.attributes.attributeOption.attribute',
                'batchItem.batch.requisitionDeliveryItem.relRequisitionDelivery.relRequisition',
                'user',
                'inspector'
            ])
            ->whereHas('batchItem.batch.costCentre.profitCentre', function($query){
                return $query->whereIn('company_id', auth()->user()->companies->pluck('company_id')->toArray());
            })
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });

            if (request()->ajax()) {
                return Datatables::of($inspections)
                ->addIndexColumn()
                ->addColumn('asset', function($inspection){
                    return isset($inspection->batchItem->finalAsset->name) ? $inspection->batchItem->finalAsset->name.' '.getProductAttributesFaster($inspection->batchItem->finalAsset) : '';
                })
                ->filterColumn('asset', function ($query, $keyword) {
                    return $query->whereHas('batchItem.finalAsset', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('GRN', function($inspection){
                    return isset($inspection->batchItem->batch->goodsReceivedItemsStockIn->relGoodsReceivedItems->relGoodsReceivedNote->grn_reference_no) ? $inspection->batchItem->batch->goodsReceivedItemsStockIn->relGoodsReceivedItems->relGoodsReceivedNote->grn_reference_no : '';
                })
                ->filterColumn('GRN', function ($query, $keyword) {
                    return $query->whereHas('batchItem.batch.goodsReceivedItemsStockIn.relGoodsReceivedItems.relGoodsReceivedNote', function ($query) use($keyword) {
                        $query->where('grn_reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('batch_id', function($inspection){
                    return isset($inspection->batchItem->batch->batch)?$inspection->batchItem->batch->batch:'';
                })
                ->filterColumn('batch_id', function ($query, $keyword) {
                    return $query->whereHas('batchItem.batch', function ($query) use($keyword) {
                        $query->where('batch', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('asset_code', function($inspection){
                    return isset($inspection->batchItem->asset_code)?$inspection->batchItem->asset_code:'';
                })
                ->filterColumn('asset_code', function ($query, $keyword) {
                    return $query->whereHas('batchItem', function ($query) use($keyword) {
                        $query->where('asset_code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('location', function($inspection){
                    return $inspection->fixedAssetLocation ? $inspection->fixedAssetLocation->name : 'Not Distributed';
                })
                ->filterColumn('location', function ($query, $keyword) {
                    return $query->whereHas('fixedAssetLocation', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('user', function($inspection){
                    return $inspection->user ? $inspection->user->name : 'Not Distributed';
                })
                ->filterColumn('user', function ($query, $keyword) {
                    return $query->whereHas('user', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })

                ->addColumn('user', function($inspection){
                    return $inspection->user ? $inspection->user->name : '';
                })
                ->filterColumn('user', function ($query, $keyword) {
                    return $query->whereHas('user', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('inspector', function($inspection){
                    return $inspection->inspector ? $inspection->inspector->name : '';
                })
                ->filterColumn('inspector', function ($query, $keyword) {
                    return $query->whereHas('inspector', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->editColumn('time', function($inspection){
                    return date('g:i a', strtotime($inspection->time));
                })
                ->editColumn('image', function($inspection){
                    return !empty($inspection->image) && file_exists($inspection->image) ? '<a class="btn btn-xs btn-primary" href="'.url($inspection->image).'" target="_blank"><i class="la la-image"></i></a>' : '';
                })
                ->rawColumns(['image'])
                ->make(true);
            }

            $data = [
                'title' => $title,
                'headerColumns' => $this->PHeaderColumns(),
            ];
            return view('accounting.backend.pages.fixedAssets.fixedAssetReports.physicalStatusReport', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Posted Fixed asset movement status report.
     *
     * @return \Illuminate\Http\Response
    */

    public function PFAMHeaderColumns($value='')
     {
        $rows =  array(
            ['SL', 'SL'],
            ['asset', 'asset','text-center'],
            ['GRN', 'GRN','text-center'],
            ['batch_id', 'batch_id', 'text-center'], 
            ['asset_code', 'asset_code', 'text-center'], 
            ['requested_by', 'requested_by', 'text-center'],
            ['location', 'location', 'text-center'], 
            ['move_to', 'move_to', 'text-center'], 
            ['actions', 'actions', 'text-center'],
        );
        return $rows;
    }

    public function postedFAMovementStatusReport()
    {
        $title = 'Posted Fixed Asset Movement Status Report';
        try {
            $movements = FixedAssetItemMovement::with([
                'batchItemUser.batchItem.finalAsset.attributes.attributeOption.attribute',
                'batchItemUser.batchItem.batch.goodsReceivedItemsStockIn.relGoodsReceivedItems.relGoodsReceivedNote',
                'batchItemUser.user',
                'user'
            ])
            ->whereHas('batchItemUser.batchItem.batch.costCentre.profitCentre', function($query){
                return $query->whereIn('company_id', auth()->user()->companies->pluck('company_id')->toArray());
            })
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });

            if (request()->ajax()) {
                return Datatables::of($movements)
                ->addIndexColumn()
                ->addColumn('asset', function($movement){
                    return isset($movement->batchItemUser->batchItem->finalAsset->name) ? $movement->batchItemUser->batchItem->finalAsset->name.' '.getProductAttributesFaster($movement->batchItemUser->batchItem->finalAsset) : '';
                })
                ->filterColumn('asset', function ($query, $keyword) {
                    return $query->whereHas('batchItemUser.batchItem.finalAsset', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('GRN', function($movement){
                    return isset($movement->batchItemUser->batchItem->batch->goodsReceivedItemsStockIn->relGoodsReceivedItems->relGoodsReceivedNote->grn_reference_no) ? $movement->batchItemUser->batchItem->batch->goodsReceivedItemsStockIn->relGoodsReceivedItems->relGoodsReceivedNote->grn_reference_no : '';
                })
                ->filterColumn('GRN', function ($query, $keyword) {
                    return $query->whereHas('batchItemUser.batchItem.batch.goodsReceivedItemsStockIn.relGoodsReceivedItems.relGoodsReceivedNote', function ($query) use($keyword) {
                        $query->where('grn_reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('batch_id', function($movement){
                    return isset($movement->batchItemUser->batchItem->batch->batch)?$movement->batchItemUser->batchItem->batch->batch:'';
                })
                ->filterColumn('batch_id', function ($query, $keyword) {
                    return $query->whereHas('batchItemUser.batchItem.batch', function ($query) use($keyword) {
                        $query->where('batch', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('asset_code', function($movement){
                    return isset($movement->batchItemUser->batchItem->asset_code)?$movement->batchItemUser->batchItem->asset_code:'';
                })
                ->filterColumn('asset_code', function ($query, $keyword) {
                    return $query->whereHas('batchItemUser.batchItem', function ($query) use($keyword) {
                        $query->where('asset_code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('requested_by', function($movement){
                    return $movement->batchItemUser->user->name.' ('.$movement->batchItemUser->user->phone.')';
                })
                ->filterColumn('requested_by', function ($query, $keyword) {
                    return $query->whereHas('batchItemUser.user', function ($query) use($keyword) {
                       $query->where('name', 'LIKE', '%'.$keyword.'%');
                   });
                })
                ->addColumn('location', function($movement){
                    return $movement->fixedAssetLocation->name.' ('.$movement->fixedAssetLocation->phone.')';
                })
                ->filterColumn('location', function ($query, $keyword) {
                    return $query->whereHas('fixedAssetLocation', function ($query) use($keyword) {
                       $query->where('name', 'LIKE', '%'.$keyword.'%');
                   });
                })
                ->addColumn('move_to', function($movement){
                    return $movement->user ? $movement->user->name.' ('.$movement->user->phone.')' : '';
                })
                ->filterColumn('move_to', function ($query, $keyword) {
                    return $query->whereHas('user', function ($query) use($keyword) {
                       $query->where('name', 'LIKE', '%'.$keyword.'%');
                   });
                })
                ->addColumn('actions', function($movement){
                    return '<a class="mb-1 btn btn-xs btn-dark">Movement '. ucwords($movement->status).'</a>';
                })
                ->rawColumns(['requested_by', 'move_to', 'actions'])
                ->make(true);
            }

            $data = [
                'title' => $title,
                'headerColumns'=>$this->PFAMHeaderColumns(),
            ];
            return view('accounting.backend.pages.fixedAssets.fixedAssetReports.postedFAMovementStatusReport', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }

    }

}
