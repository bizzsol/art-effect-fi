<?php
bolt_decrypt( __FILE__ , 'rgRT39'); return 0;
##!!!##