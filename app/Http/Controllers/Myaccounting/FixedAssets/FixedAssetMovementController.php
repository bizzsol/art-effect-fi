<?php
bolt_decrypt( __FILE__ , 'In03wo'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting\FixedAssets;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use App\Models\FixedAssets\FixedAssetBatch;
use App\Models\FixedAssets\FixedAssetBatchItem;
use App\Models\FixedAssets\FixedAssetItemMovement;
use App\Models\FixedAssets\FixedAssetBatchItemUser;
use App\User;
use App\Models\PmsModels\Category;
use App\Models\PmsModels\Product;

use App,DB, DataTables;
use Illuminate\Support\Facades\Auth;

class FixedAssetMovementController extends Controller
{   
     public function headerColumns($value='')
     {
        $rows =  array(
            ['SL', 'SL'],
            ['asset', 'asset','text-center'],
            ['GRN', 'GRN','text-center'],
            ['batch_id', 'batch_id','text-center'],
            ['asset_code', 'asset_code', 'text-center'],
            ['requested_by', 'requested_by', 'text-center'], 
            ['location', 'location', 'text-center'], 
            ['move_to', 'move_to', 'text-center'], 
            ['remarks', 'remarks', 'text-center'], 
            ['actions', 'actions', 'text-center'],
        );
        return $rows;
    }

    public function index()
    {
        $title = 'Fixed Asset Movements';
        try {
            $movements= FixedAssetItemMovement::with([
                'batchItemUser.batchItem.batch.goodsReceivedItemsStockIn.relGoodsReceivedItems.relProduct.attributes.attributeOption.attribute',
                'batchItemUser.batchItem.batch.goodsReceivedItemsStockIn.relGoodsReceivedItems.relGoodsReceivedNote',
                'batchItemUser.user',
                'user'
            ])
            ->whereHas('batchItemUser.batchItem.batch.costCentre.profitCentre', function($query){
                return $query->whereIn('company_id', auth()->user()->companies->pluck('company_id')->toArray());
            })
            ->whereHas('batchItemUser.batchItem', function($query){
                return $query->where('is_disposed', 0);
            })
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });

            if (request()->ajax()) {
                return Datatables::of($movements)
                ->addIndexColumn()
                ->addColumn('asset', function($movement){
                    return isset($movement->batchItemUser->batchItem->finalAsset->name) ? $movement->batchItemUser->batchItem->finalAsset->name.' '.getProductAttributesFaster($movement->batchItemUser->batchItem->finalAsset) : '';
                })
                ->filterColumn('asset', function ($query, $keyword) {
                    return $query->whereHas('batchItemUser.batchItem.finalAsset', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('GRN', function($movement){
                    return isset($movement->batchItemUser->batchItem->batch->goodsReceivedItemsStockIn->relGoodsReceivedItems->relGoodsReceivedNote->grn_reference_no) ? $movement->batchItemUser->batchItem->batch->goodsReceivedItemsStockIn->relGoodsReceivedItems->relGoodsReceivedNote->grn_reference_no : '';
                })
                ->filterColumn('GRN', function ($query, $keyword) {
                    return $query->whereHas('batchItemUser.batchItem.batch.goodsReceivedItemsStockIn.relGoodsReceivedItems.relGoodsReceivedNote', function ($query) use($keyword) {
                        $query->where('grn_reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('batch_id', function($movement){
                    return isset($movement->batchItemUser->batchItem->batch->batch)?$movement->batchItemUser->batchItem->batch->batch:'';
                })
                ->filterColumn('batch_id', function ($query, $keyword) {
                    return $query->whereHas('batchItemUser.batchItem.batch', function ($query) use($keyword) {
                        $query->where('batch', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('asset_code', function($movement){
                    return isset($movement->batchItemUser->batchItem->asset_code)?$movement->batchItemUser->batchItem->asset_code:'';
                })
                ->filterColumn('asset_code', function ($query, $keyword) {
                    return $query->whereHas('batchItemUser.batchItem', function ($query) use($keyword) {
                        $query->where('asset_code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('requested_by', function($movement){
                    return  $movement->batchItemUser->user->name.' ('.$movement->batchItemUser->user->phone.')';
                })
                ->filterColumn('requested_by', function ($query, $keyword) {
                    return $query->whereHas('batchItemUser.user', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%')
                              ->orWhere('phone', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('location', function($movement){
                    return $movement->fixedAssetLocation ? $movement->fixedAssetLocation->name : '';
                })
                ->filterColumn('location', function ($query, $keyword) {
                    return $query->whereHas('fixedAssetLocation', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('move_to', function($movement){
                    return $movement->user ? $movement->user->name.' ('.$movement->user->phone.')' : '';
                })
                ->filterColumn('move_to', function ($query, $keyword) {
                    return $query->whereHas('user', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%')
                              ->orWhere('phone', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('actions', function($movement){
                    return view('accounting.backend.pages.fixedAssets.fixedAssetMovements.action',compact('movement'))->render();
                })
                ->rawColumns(['requested_by','move_to','actions'])
                ->make(true);
            }

            $data = [
                'title' => $title,
                'headerColumns' => $this->headerColumns(),
            ];
            return view('accounting.backend.pages.fixedAssets.fixedAssetMovements.index', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function create()
    {
        $data = [
            'batches' => FixedAssetBatch::whereHas('items', function($query){
                return $query->where('is_disposed', 0);
            })
            ->whereHas('requisitionDeliveryItem', function($query){
                return $query->where('product_id', request()->get('product_id'));
            })
            ->get(),
            'selected' => request()->has('selected')?request()->get('selected'):'',
        ];
        return view('accounting.backend.pages.fixedAssets.fixedAssetMovements.batches', $data);
    }

    public function show($id)
    {
        $data = [
            'movement' => FixedAssetItemMovement::findOrFail($id),
            'status' => request()->get('status')
        ];
        return view('accounting.backend.pages.fixedAssets.fixedAssetMovements.approval', $data);
    }

    public function update(Request $request, $id)
    {
        DB::beginTransaction();
        try{
            $movement = FixedAssetItemMovement::findOrFail($id);
            $movement->status = $request->status;

            if(in_array($request->status, ['approved', 'cancelled'])){
                $movement->approval_remarks = $request->remarks;
                $movement->approved_by = auth()->user()->id;
            }else{
                $movement->movement_remarks = $request->remarks;
                $movement->moved_by = auth()->user()->id;
            }

            $movement->save();

            if($request->status == "moved"){

                $movement->batchItemUser->to = date('Y-m-d', strtotime(date('Y-m-d', strtotime($movement->expected_date)).' -1 days'));
                $movement->batchItemUser->is_taken = 1;
                $movement->batchItemUser->taken_remarks = $request->remarks;
                $movement->batchItemUser->save();

                FixedAssetBatchItemUser::create([
                    'fixed_asset_batch_item_id' => $movement->batchItemUser->fixed_asset_batch_item_id,
                    'fixed_asset_location_id' => $movement->fixed_asset_location_id,
                    'cost_centre_id' => \App\User::findOrFail($movement->user_id)->cost_centre_id,
                    'user_id' => $movement->user_id,
                    'from' => $movement->expected_date,
                    'giving_remarks' => $request->remarks,
                ]);

                if($movement->user_id > 0){
                    $messages = '<span class="notification-links" data-title="Fixed Asset Distribution">A New Fixed Asset with Asset code #'.$movement->batchItemUser->batchItem->asset_code.' has been given to you.</span>';
                    CreateOrUpdateNotification($messages, 'unread', '', '', $movement->user_id,'');
                }
            }

            DB::commit();
            return response()->json([
                'success' => true,
                'message' => "Fixed Items Movement Requisition has been ".ucwords($request->status)." Successfully."
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }
}
