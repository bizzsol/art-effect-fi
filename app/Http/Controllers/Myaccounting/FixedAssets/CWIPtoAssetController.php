<?php
bolt_decrypt( __FILE__ , '75jlyE'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting\FixedAssets;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use App\Models\PmsModels\Accounts\Company;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\Models\PmsModels\Purchase\PurchaseOrderItem;
use App\Models\PmsModels\Product;
use App\Models\FixedAssets\AssetCostingEntry;
use App\Models\FixedAssets\FixedAssetBatch;
use App\Models\FixedAssets\FixedAssetBatchItem;
use App\Models\FixedAssets\FixedAssetBatchItemUser;
use App\Models\PmsModels\RequisitionDelivery;
use App\Models\PmsModels\RequisitionDeliveryItem;
use App\Models\PmsModels\QuotationsItems;
use App\Models\PmsModels\Accounts\CostCentre;
use App\Models\FixedAssets\FixedAssetLocation;

use App\Models\PmsModels\Grn\GoodsReceivedItemStockIn;

use App, DB;
use Illuminate\Support\Facades\Auth;

class CWIPtoAssetController extends Controller
{
    public function index()
    {
        $title = 'CWIP to Asset';
        try {
            $data = [
                'title' => $title,
                'companies' => Company::has('profitCentres.costCentres')
                ->whereHas('users', function($query){
                    return $query->where('user_id', auth()->user()->id);
                })
                ->get(),
            ];
            return view('accounting.backend.pages.fixedAssets.CWIPtoAsset.index', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function create()
    {
        if(request()->get('action') == 'po'){
            $data = [
                'purchaseOrders' => PurchaseOrder::where('is_closed', 0)
                ->whereHas('Unit', function($query){
                    return $query->where('company_id', request()->get('company_id'));
                })
                ->where(function($query){
                    return $query->whereHas('relPurchaseOrderItems.relProduct', function($query){
                        return $query->where('is_cwip', 1);
                    })
                    ->orWhereHas('purchaseOrderRequisitions.requisition.projectTask');
                })
                ->has('relGoodsReceivedItemStockIn')
                ->get(),
            ];
            return view('accounting.backend.pages.fixedAssets.CWIPtoAsset.po', $data);
        }elseif(request()->get('action') == 'stocks'){
            $data = [
                'stocks' => GoodsReceivedItemStockIn::whereHas('relPurchaseOrder.Unit', function($query){
                    return $query->where('company_id', request()->get('company_id'));
                })
                ->where('purchase_order_id', request()->get('purchase_order_id'))
                ->where(function($query){
                    return $query->whereHas('relGoodsReceivedItems.relProduct', function($query){
                        return $query->where('is_cwip', 1);
                    });
                })
                ->doesntHave('batches')
                ->get(),
            ];
            return view('accounting.backend.pages.fixedAssets.CWIPtoAsset.stocks', $data);
        }elseif(request()->get('action') == 'items'){
            $purchaseOrder = PurchaseOrder::with([
                'relPurchaseOrderItems',
                'relQuotation.exchangeRate.currency',

                'purchaseOrderRequisitions.requisition.projectTask.subDeliverable.deliverable.project'
            ])
            ->find(request()->get('purchase_order_id'));

            $category_id = 0;
            $final_asset_id = 0;
            if($purchaseOrder->purchaseOrderRequisitions->count() > 0){
                foreach($purchaseOrder->purchaseOrderRequisitions as $key => $requisition){
                    if(isset($requisition->requisition->projectTask->subDeliverable->deliverable->project->final_asset_id) && $requisition->requisition->projectTask->subDeliverable->deliverable->project->final_asset_id > 0){
                        $final_asset_id = $requisition->requisition->projectTask->subDeliverable->deliverable->project->final_asset_id;
                    }

                    $category_id = $requisition->requisition->requisitionItems->first()->product->category->parent_id;
                }
            }

            $data = [
                'purchase_order_id' => request()->get('purchase_order_id'),
                'purchaseOrder' => $purchaseOrder,
                'goods_received_items_stock_in_id' => request()->get('goods_received_items_stock_in_id'),
                'users' => \App\User::whereHas('companies', function($query){
                    return $query->where('company_id', request()->get('company_id'));
                })->get(),
                'finalAssets' => Product::with([
                    'attributes.attributeOption.attribute'
                ])->where('is_final_asset', 1)->get(),
                'final_asset_id' => $final_asset_id,

                'items' => GoodsReceivedItemStockIn::with([
                    'relGoodsReceivedItems.relProduct.productUnit',
                    'relGoodsReceivedItems.relProduct.attributes.attributeOption.attribute'
                ])
                ->whereHas('relPurchaseOrder.Unit', function($query){
                    return $query->where('company_id', request()->get('company_id'));
                })
                ->where(function($query){
                    return $query->whereHas('relGoodsReceivedItems.relProduct', function($query){
                        return $query->where('is_cwip', 1);
                    });
                })
                ->doesntHave('batches')
                ->whereHas('relGoodsReceivedItems', function($query){
                    return $query->where('goods_received_note_id', request()->get('goods_received_items_stock_in_id'));
                })
                ->where(function($query) use($purchaseOrder){
                    return $query->whereHas('relGoodsReceivedItems.relProduct', function($query) use($purchaseOrder){
                        return $query->whereIn('id', isset($purchaseOrder->id) ? $purchaseOrder->relPurchaseOrderItems->pluck('product_id')->toArray() : []);
                    });
                })
                ->get(),
                'costCentres' => getCostCentres(true, request()->get('company_id')),
                'locations' => FixedAssetLocation::where([
                    'unit_id'     => $purchaseOrder->hr_unit_id,
                    'category_id' => $category_id
                ])
                ->orderBy('code', 'asc')
                ->get(),
            ];

            return view('accounting.backend.pages.fixedAssets.CWIPtoAsset.items', $data);
        }elseif(request()->get('action') == 'cost-details'){
            $data = [
                'costs' => AssetCostingEntry::with([
                    'creator'
                ])
                ->where('goods_received_items_stock_in_id', request()->get('id'))
                ->get(),
            ];
            return view('accounting.backend.pages.fixedAssets.CWIPtoAsset.cost-details', $data);
        }
    }

    public function store(Request $request)
    {
        $request->validate([
            'purchase_order_id' => 'required',
            'products' => 'required',
            'products.*' => 'required',
            'final_asset_id' => 'required',
            'cost_centre_id' => 'required',
            'fixed_asset_location_id' => 'required',
            'user_id' => 'required',
            'date' => 'required',
        ]);

        DB::beginTransaction();
        try{
            $purchaseOrder = PurchaseOrder::find($request->purchase_order_id);

            $final_asset_value = 0;
            $final_asset_id = $request->final_asset_id;

            $ledgerEntries = [];
            $date = $request->date;
            foreach($request->products as $key => $item_id){
                $goodsReceivedItemStockIn = GoodsReceivedItemStockIn::findOrFail($item_id);
                $purchaseOrderItem = $purchaseOrder->relPurchaseOrderItems->where('product_id', $goodsReceivedItemStockIn->relGoodsReceivedItems->product_id)->first();
                $unit_price = 0;
                if(isset($purchaseOrderItem->id)){
                    $unit_price = $purchaseOrderItem->unit_price;
                }

                $quotationsItem = $purchaseOrder->relQuotation->relQuotationItems->where('product_id', $goodsReceivedItemStockIn->relGoodsReceivedItems->product_id)->first();
                $vat_percentage = 0;
                if(isset($quotationsItem->id)){
                    $vat_percentage = $quotationsItem->vat_percentage;
                }

                $total = ($unit_price*$goodsReceivedItemStockIn->received_qty);
                $total_price = ($total+($vat_percentage > 0 ? $total*($vat_percentage/100) : 0));
                $costs = AssetCostingEntry::where('goods_received_items_stock_in_id', $goodsReceivedItemStockIn->id)->sum('cost');
                
                if($final_asset_id > 0){
                    $finalAsset = Product::findOrFail($final_asset_id);
                    $final_asset_value += ($total_price+$costs);
                }else{
                    $finalAsset = $goodsReceivedItemStockIn->relGoodsReceivedItems->relProduct;
                }

                $batch = FixedAssetBatch::create([
                    'goods_received_items_stock_in_id' => $goodsReceivedItemStockIn->id,
                    'batch' => uniqueCodeWithoutPrefix(8, 'fixed_asset_batches', 'batch'),

                    'cost_centre_id' => $request->cost_centre_id,
                    
                    'depreciation_method_id' => $finalAsset->depreciation_method_id,
                    'base_rate' => $finalAsset->base_rate,
                    'rate_multiplier' => $finalAsset->rate_multiplier,
                    'depreciation_rate' => $finalAsset->depreciation_rate,
                    'is_yearly' => $finalAsset->is_yearly,
                    'years' => $finalAsset->years,
                    'is_onetime' => $finalAsset->is_onetime,
                    'depreciation_start_date' => date('Y-m-d', strtotime($goodsReceivedItemStockIn->updated_at)),
                ]);
                if($batch){
                    if($final_asset_id > 0){
                        $batchItem = FixedAssetBatchItem::create([
                            'fixed_asset_batch_id' => $batch->id,
                            'final_asset_id' => $final_asset_id,
                            'asset_code' => Product::findOrFail($final_asset_id)->sku,
                            'asset_value' => ($total_price+$costs),

                            'depreciation_method_id' => $finalAsset->depreciation_method_id,
                            'base_rate' => $finalAsset->base_rate,
                            'rate_multiplier' => $finalAsset->rate_multiplier,
                            'depreciation_rate' => $finalAsset->depreciation_rate,
                            'is_yearly' => $finalAsset->is_yearly,
                            'years' => $finalAsset->years,
                            'is_onetime' => $finalAsset->is_onetime,
                            'depreciation_start_date' => date('Y-m-d', strtotime($goodsReceivedItemStockIn->updated_at)),
                        ]);

                        FixedAssetBatchItemUser::create([
                            'fixed_asset_batch_item_id' => $batchItem->id,
                            'fixed_asset_location_id' => $request->fixed_asset_location_id,
                            'cost_centre_id' => $request->cost_centre_id,
                            'user_id' => $request->user_id,
                            'from' => $request->date,
                        ]);
                    }else{
                        for($i=1;$i<=$goodsReceivedItemStockIn->received_qty;$i++){
                            $batchItem = FixedAssetBatchItem::create([
                                'fixed_asset_batch_id' => $batch->id,
                                'final_asset_id' => $goodsReceivedItemStockIn->relGoodsReceivedItems->product_id,
                                'asset_code' => $batch->batch.'-'.$i,
                                'asset_value' => ($goodsReceivedItemStockIn->received_qty > 0 && ($total_price+$costs) > 0 ? (($total_price+$costs)/$goodsReceivedItemStockIn->received_qty) : 0),

                                'depreciation_method_id' => $finalAsset->depreciation_method_id,
                                'base_rate' => $finalAsset->base_rate,
                                'rate_multiplier' => $finalAsset->rate_multiplier,
                                'depreciation_rate' => $finalAsset->depreciation_rate,
                                'is_yearly' => $finalAsset->is_yearly,
                                'years' => $finalAsset->years,
                                'is_onetime' => $finalAsset->is_onetime,
                                'depreciation_start_date' => date('Y-m-d', strtotime($goodsReceivedItemStockIn->updated_at)),
                            ]);

                            FixedAssetBatchItemUser::create([
                                'fixed_asset_batch_item_id' => $batchItem->id,
                                'user_id' => $request->user_id,
                                'fixed_asset_location_id' => $request->fixed_asset_location_id,
                                'cost_centre_id' => $request->cost_centre_id,
                                'from' => $request->date,
                            ]);
                        }
                    }
                }

                $accountDefaultSettings = accountDefaultSettings();
                if($final_asset_id == 0){
                    array_push($ledgerEntries, [
                        'cost_centre_id' => $request->cost_centre_id,
                        'chart_of_account_id' => (isset($goodsReceivedItemStockIn->relGoodsReceivedItems->relProduct->cwip_asset_account_id) && $goodsReceivedItemStockIn->relGoodsReceivedItems->relProduct->cwip_asset_account_id > 0 ? $goodsReceivedItemStockIn->relGoodsReceivedItems->relProduct->cwip_asset_account_id : $accountDefaultSettings['cwip_asset_account']),
                        'debit' => $total_price+$costs,
                        'credit' => 0,
                        'narration' => 'Capitalization :: Asset Inventory Debit',
                        'type' => 'cwip-to-asset',
                        'source' => $batch->id
                    ]);
                }

                array_push($ledgerEntries, [
                    'cost_centre_id' => $request->cost_centre_id,
                    'chart_of_account_id' => (isset($goodsReceivedItemStockIn->relGoodsReceivedItems->relProduct->inventory_account_id) && $goodsReceivedItemStockIn->relGoodsReceivedItems->relProduct->inventory_account_id > 0 ? $goodsReceivedItemStockIn->relGoodsReceivedItems->relProduct->inventory_account_id : $accountDefaultSettings['inventory_account']),
                    'debit' => 0,
                    'credit' => $total_price+$costs,
                    'narration' => 'Capitalization :: CWIP Credit',
                    'type' => 'cwip-to-asset',
                    'source' => $batch->id
                ]);
            }

            if($final_asset_value > 0){
                $finalAsset = Product::findOrFail($final_asset_id);
                array_push($ledgerEntries, [
                    'cost_centre_id' => $request->cost_centre_id,
                    'chart_of_account_id' => (isset($finalAsset->cwip_asset_account_id) && $finalAsset->cwip_asset_account_id > 0 ? $finalAsset->cwip_asset_account_id : $accountDefaultSettings['cwip_asset_account']),
                    'debit' => $final_asset_value,
                    'credit' => 0,
                    'narration' => 'Capitalization :: Asset Inventory Debit',
                    'type' => 'final-asset',
                    'source' => $finalAsset->sku
                ]);
            }

            if(isset($ledgerEntries[0])){
                $entry = saveLedgerEntries(5, date('Y-m-d H:i:s', strtotime($date.' '.date('H:i:s'))), 1, '', 'CWIP to Asset', $ledgerEntries, $purchaseOrder->relQuotation->exchangeRate->id, 0, 0, 0, getCostCentreCompany($request->cost_centre_id));
                savePOEntry($entry, $purchaseOrder->relQuotation->supplier_id, $request->purchase_order_id, 'cwip-to-asset');
            }

            DB::commit();

            session()->flash('alert-type', 'success');
            session()->flash('message', "CWIP to Asset has been saved successfully.");
                    
            return response()->json([
                'success' => true,
            ]);
        }catch(\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function show($id)
    {
        $goodsReceivedItemStockIn = GoodsReceivedItemStockIn::findOrFail($id);

        $costs = AssetCostingEntry::with([
            'creator'
        ])
        ->where('goods_received_items_stock_in_id', $goodsReceivedItemStockIn->id)
        ->get();
        return response()->json([
            'title' => 'Asset Costing Details for GRN #'.$goodsReceivedItemStockIn->relGoodsReceivedItems->relGoodsReceivedNote->grn_reference_no.', Item #'.$goodsReceivedItemStockIn->relGoodsReceivedItems->relProduct->name.' '.getProductAttributesFaster($goodsReceivedItemStockIn->relGoodsReceivedItems->relProduct),
            'body' => view('accounting.backend.pages.fixedAssets.CWIPtoAsset.cost-details', compact('costs'))->render()
        ]);
    }
}
