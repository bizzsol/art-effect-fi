<?php
bolt_decrypt( __FILE__ , 'QGtJNS'); return 0;
##!!!##