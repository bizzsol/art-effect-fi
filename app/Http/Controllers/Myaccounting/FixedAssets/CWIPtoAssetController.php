<?php
bolt_decrypt( __FILE__ , '6iJJac'); return 0;
##!!!##