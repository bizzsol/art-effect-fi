<?php
bolt_decrypt( __FILE__ , 'X0oC9o'); return 0;
##!!!##