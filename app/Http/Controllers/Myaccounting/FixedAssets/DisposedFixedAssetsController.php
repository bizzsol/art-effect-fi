<?php
bolt_decrypt( __FILE__ , 'GJAv6j'); return 0;
##!!!##