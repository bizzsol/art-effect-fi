<?php
bolt_decrypt( __FILE__ , '5jGXFt'); return 0;
##!!!##