<?php
bolt_decrypt( __FILE__ , 'yM0DYd'); return 0;
##!!!##