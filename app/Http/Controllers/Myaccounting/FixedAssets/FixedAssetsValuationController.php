<?php
bolt_decrypt( __FILE__ , 'RVAeFl'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting\FixedAssets;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use App\Models\FixedAssets\FixedAssetBatch;
use App\Models\FixedAssets\FixedAssetBatchItem;
use App\Models\FixedAssets\FixedAssetBatchItemDepreciation;
use App\Models\FixedAssets\FixedAssetBatchItemUser;
use App\User;
use App\Models\PmsModels\Category;
use App\Models\PmsModels\Product;

use App, DB, DataTables;
use Illuminate\Support\Facades\Auth;

class FixedAssetsValuationController extends Controller
{
    public function headerColumns($value=''){
        $rows =  array(
            ['SL', 'SL'],
            ['asset', 'asset','text-center'],
            ['batch_id', 'batch_id','text-center'],
            ['asset_code', 'asset_code', 'text-center'],
            ['current_location', 'current_location', 'text-center'],
            ['current_user', 'current_user', 'text-center'],
            ['currency', 'currency', 'text-center'],
            ['purchase_price', 'purchase_price', 'text-right'],
            ['depreciation_starts', 'depreciation_starts', 'text-center'],
            ['total_depreciation', 'total_depreciation', 'text-right'],
            ['book_value', 'book_value', 'text-right'],
        );
        return $rows;
    }

    public function index()
    {
        try {
            $items = FixedAssetBatchItem::with([
                'batch.items',
                'finalAsset.attributes.attributeOption.attribute',
                'batch.goodsReceivedItemsStockIn.relGoodsReceivedItems.relGoodsReceivedNote',
                'batch.goodsReceivedItemsStockIn.relPurchaseOrder.relQuotation.exchangeRate.currency',
                'depreciations',
                'currentUser.user',

                'batch.goodsReceivedItemsStockIn.relPurchaseOrder.relPurchaseOrderItems',
                'batch.goodsReceivedItemsStockIn.relPurchaseOrder.relQuotation.relQuotationItems',
                'batch.goodsReceivedItemsStockIn.assetCostingEntries',
            ])
            ->where('is_disposed', 0)
            ->groupBy('asset_code')
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });

            if (request()->ajax()) {
                return DataTables::of($items)
                ->addIndexColumn()
                ->addColumn('asset', function($item){
                    return isset($item->finalAsset->name) ? $item->finalAsset->name.' '.getProductAttributesFaster($item->finalAsset) : '';
                })
                ->filterColumn('asset', function ($query, $keyword) {
                    return $query->whereHas('finalAsset', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('batch_id', function($item){
                    return isset($item->batch->batch)?$item->batch->batch:'';
                })
                ->filterColumn('batch_id', function ($query, $keyword) {
                    return $query->whereHas('batchItemUser.batchItem.batch', function ($query) use($keyword) {
                        $query->where('batch', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('asset_code', function($item){
                    return isset($item->asset_code)?$item->asset_code:'';
                })
                ->filterColumn('asset_code', function ($query, $keyword) {
                    return $query->whereHas('batchItemUser.batchItem', function ($query) use($keyword) {
                        $query->where('asset_code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('current_location', function($item){
                    return isset($item->currentUser->id) ? ($item->currentUser->fixedAssetLocation ? $item->currentUser->fixedAssetLocation->name : '') : '';
                })
                ->filterColumn('current_location', function ($query, $keyword) {
                    return $query->whereHas('currentUser.fixedAssetLocation', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('current_user', function($item){
                    return isset($item->currentUser->id) ? ($item->currentUser->user ? $item->currentUser->user->name.' ('.$item->currentUser->user->phone.')' : '') : '';
                })
                ->filterColumn('current_user', function ($query, $keyword) {
                    return $query->whereHas('currentUser.user', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%')->where('phone', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('currency', function($item){
                    return $item->batch->goodsReceivedItemsStockIn->relPurchaseOrder->relQuotation->exchangeRate->currency->code;
                })
                ->filterColumn('currency', function ($query, $keyword) {
                    return $query->whereHas('batch.goodsReceivedItemsStockIn.relPurchaseOrder.relQuotation.exchangeRate.currency', function ($query) use($keyword) {
                        $query->where('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('purchase_price', function($item){
                    return systemMoneyFormat(FixedAssetBatchItem::where('asset_code', $item->asset_code)->sum('asset_value'));
                })
                ->addColumn('depreciation_starts', function($item){
                    return $item->batch->depreciation_start_date;
                })
                ->filterColumn('depreciation_starts', function ($query, $keyword) {
                    return $query->whereHas('batch', function ($query) use($keyword) {
                        $query->where('depreciation_start_date', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('total_depreciation', function($item){
                    $amount = FixedAssetBatchItemDepreciation::whereHas('batchItem', function($query) use($item){
                        return $query->where('asset_code', $item->asset_code);
                    })
                    ->when(request()->has('from') && strtotime(request()->get('from')) > 0, function($query){
                        return $query->where('from', '>=', request()->get('from'));
                    })
                    ->when(request()->has('to') && strtotime(request()->get('to')) > 0, function($query){
                        return $query->where('to', '<=', request()->get('to'));
                    })->sum('amount');
                    return systemMoneyFormat($amount);
                })
                ->addColumn('book_value', function($item){
                    $asset_value = FixedAssetBatchItem::where('asset_code', $item->asset_code)->sum('asset_value');
                    $depreciations = FixedAssetBatchItemDepreciation::whereHas('batchItem', function($query) use($item){
                        return $query->where('asset_code', $item->asset_code);
                    })
                    ->when(request()->has('to') && strtotime(request()->get('to')) > 0, function($query){
                        return $query->where('to', '<=', request()->get('to'));
                    })->sum('amount');

                    return systemMoneyFormat($asset_value-$depreciations);
                })
                ->rawColumns([])
                ->make(true);
            }

            return view('accounting.backend.pages.fixedAssets.fixedAssetsValuations.index', [
                'title' => 'Fixed Asset Book Value',
                'headerColumns' => $this->headerColumns()
            ]);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function create()
    {
        if(request()->get('action') == 'batches'){
            $data = [
                'batches' => FixedAssetBatch::whereHas('items', function($query){
                    return $query->where('is_disposed', 0);
                })
                ->when(request()->get('product_id') > 0, function($query){
                    return $query->whereHas('requisitionDeliveryItem', function($query){
                        return $query->where('product_id', request()->get('product_id'));
                    });
                })
                ->get(),
            ];
            return view('accounting.backend.pages.fixedAssets.fixedAssetsValuations.batches', $data);
        }elseif(request()->get('action') == 'items'){

            $items = FixedAssetBatchItem::with([
                    'batch.items',
                    'batch.requisitionDeliveryItem.product.attributes.attributeOption.attribute',
                    'batch.goodsReceivedItemsStockIn.relPurchaseOrder.relQuotation.exchangeRate.currency',
                    'depreciations'
                ])
                ->where('is_disposed', 0)
                ->when(request()->get('fixed_asset_batch_id') > 0, function($query){
                    return $query->where('fixed_asset_batch_id', request()->get('fixed_asset_batch_id'));
                })
                ->when(!empty(request()->get('asset_code')), function($query){
                    return $query->where('asset_code', request()->get('asset_code'));
                })
                ->get();

                foreach($items as $item){
                    $item['currentUser'] = \App\Models\FixedAssets\FixedAssetBatchItemUser::where([
                        'fixed_asset_batch_item_id' => $item->id,
                        'is_taken' => 0
                    ])->orderBy('from', 'desc')->first();
                }

            $data = [
                'users' => User::all(),
                'from' => (!empty(request()->get('from')) && strtotime(request()->get('from')) > 0 ? request()->get('from') : false),
                'to' => (!empty(request()->get('to')) && strtotime(request()->get('to')) > 0 ? request()->get('to') : false),
                'items' => $items,
            ];
            return view('accounting.backend.pages.fixedAssets.fixedAssetsValuations.items', $data);
        }
    }

    public function store(Request $request)
    {
        
    }

    public function show($id)
    {
        $data = [
            'users' => FixedAssetBatchItemUser::where('fixed_asset_batch_item_id', $id)->get()
        ];
        return view('accounting.backend.pages.fixedAssets.fixedAssetsValuations.history', $data);
    }

}
