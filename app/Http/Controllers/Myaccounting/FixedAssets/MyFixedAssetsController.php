<?php
bolt_decrypt( __FILE__ , '1us32m'); return 0;
##!!!##