<?php
bolt_decrypt( __FILE__ , 'YOROkL'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting\FixedAssets;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use App\Models\FixedAssets\FixedAssetBatch;
use App\Models\FixedAssets\FixedAssetBatchItem;
use App\Models\FixedAssets\FixedAssetBatchItemDepreciation;
use App\Models\FixedAssets\FixedAssetBatchUser;
use App\Models\FixedAssets\FixedAssetBatchItemSchedule;
use App\Models\FixedAssets\FixedAssetBatchItemScheduleEntry;
use App\User;
use App\Models\PmsModels\Category;
use App\Models\PmsModels\Product;
use App\Models\PmsModels\Accounts\Company;
use App\Models\PmsModels\Accounts\CurrencyType;
use App\Models\PmsModels\Accounts\CostCentre;
use App\Models\PmsModels\Accounts\BankAccount;

use App, DB, DataTables;
use Illuminate\Support\Facades\Auth;

class AssetReSchedulingController extends Controller
{
    public function asssetRegisterHeaderColumns($value='')
     {
        return array(
            ['SL', 'SL'],
            ['company', 'company','text-left'],
            ['asset_name', 'asset_name','text-left'],
            ['sub_category', 'sub_category','text-left'],
            ['category', 'category', 'text-left'],
            ['identification_mark', 'identification_mark', 'text-center'],
            ['initial_cost', 'initial_cost', 'text-center'], 
            ['initial_life', 'initial_life', 'text-center'], 
            ['initial_rate', 'initial_rate', 'text-center'], 
            ['consumed_life', 'consumed_life', 'text-center'], 
            ['accumulated_depreciation', 'accumulated_depreciation', 'text-center'], 
            ['cost', 'cost', 'text-center'], 
            ['life', 'life', 'text-center'], 
            ['rate', 'rate', 'text-center'], 
            ['created_by', 'created_by', 'text-center'], 
            ['location', 'location', 'text-center'],
        );
    }
    
    public function index()
    {
        $title = 'Asset Re-Scheduling';
        try {
            if (request()->ajax()) {
                 $schedules = FixedAssetBatchItemSchedule::with([
                    'batchItem.finalAsset.attributes.attributeOption.attribute',
                    'batchItem.finalAsset.productUnit',
                    'batchItem.finalAsset.category.category',
                    'batchItem.batch.items',
                    'batchItem.currentUser.fixedAssetLocation',
                    'batchItem.depreciations',

                    'batchItem.batch.goodsReceivedItemsStockIn.relPurchaseOrder.relPurchaseOrderItems',
                    'batchItem.batch.goodsReceivedItemsStockIn.relPurchaseOrder.relQuotation.relQuotationItems',
                    'batchItem.batch.goodsReceivedItemsStockIn.assetCostingEntries',

                    'entries.entry.entryType',
                    'creator',

                    'batchItem.batch.costCentre.profitCentre.company'
                ])
                ->whereHas('batchItem.batch.costCentre.profitCentre', function($query){
                    return $query->whereIn('company_id', auth()->user()->companies->pluck('company_id')->toArray());
                })
                ->when(!datatableOrdering(), function($query){
                    return $query->orderby('fixed_asset_batch_item_schedules.id', 'desc');
                });

                $codes = $schedules->get()->pluck('batchItem.asset_code')->toArray();
                $allBatchItems = FixedAssetBatchItem::whereIn('asset_code', $codes)->get();
                $allDepreciations = FixedAssetBatchItemDepreciation::with(['batchItem'])
                ->whereHas('batchItem', function($query) use($codes){
                    return $query->whereIn('asset_code', $codes);
                })->get();

                return DataTables::of(
                    $schedules
                )
                ->addIndexColumn()

                ->addColumn('company', function($schedule){
                    return isset($schedule->batchItem->batch->costCentre->profitCentre->company->code) ? $schedule->batchItem->batch->costCentre->profitCentre->company->code : '';
                })
                ->filterColumn('company', function ($query, $keyword) {
                    return $query->whereHas('batchItem.batch.costCentre.profitCentre.company', function ($query) use($keyword) {
                        $query->where('code', 'LIKE', '%'.$keyword.'%');
                    });
                })

                ->addColumn('asset_name', function($schedule){
                    return isset($schedule->batchItem->finalAsset->name) ? $schedule->batchItem->finalAsset->name.' '.getProductAttributesFaster($schedule->batchItem->finalAsset) : '';
                })
                ->filterColumn('asset_name', function ($query, $keyword) {
                    return $query->whereHas('batchItem.finalAsset', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('sub_category', function($schedule){
                    return isset($schedule->batchItem->finalAsset->category->name) ? $schedule->batchItem->finalAsset->category->name : '';
                })
                ->filterColumn('sub_category', function ($query, $keyword) {
                    return $query->whereHas('batchItem.finalAsset.category', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('category', function($schedule){
                    return isset($schedule->batchItem->finalAsset->category->category->name) ? $schedule->batchItem->finalAsset->category->category->name : '';
                })
                ->filterColumn('category', function ($query, $keyword) {
                    return $query->whereHas('batchItem.finalAsset.category.category', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('location', function($schedule){
                    return isset($schedule->batchItem->currentUser->fixedAssetLocation->name) ? $schedule->batchItem->currentUser->fixedAssetLocation->name : 'Not Distributed';
                })
                ->filterColumn('location', function ($query, $keyword) {
                    return $query->whereHas('batchItem.currentUser.fixedAssetLocation', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('capitalization_date', function($schedule){
                    return isset($schedule->batchItem->batch->created_at) ? date('Y-m-d', strtotime($schedule->batchItem->batch->created_at)) : '';
                })
                ->filterColumn('capitalization_date', function ($query, $keyword) {
                    return $query->whereHas('batchItem.batch', function ($query) use($keyword) {
                        $query->where('created_at', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('identification_mark', function($schedule){
                    return isset($schedule->batchItem->asset_code) ? $schedule->batchItem->asset_code : '';
                })
                ->filterColumn('identification_mark', function ($query, $keyword) {
                    return $query->whereHas('batchItem', function ($query) use($keyword) {
                        $query->where('asset_code', 'LIKE', '%'.$keyword.'%');
                    });
                })

                ->editColumn('initial_cost', function($schedule){
                    return systemMoneyFormat($schedule->initial_cost);
                })
                ->editColumn('initial_rate', function($schedule){
                    return systemMoneyFormat($schedule->initial_rate);
                })
                ->editColumn('accumulated_depreciation', function($schedule){
                    return systemMoneyFormat($schedule->accumulated_depreciation);
                })
                ->editColumn('cost', function ($schedule) {
                    $entry = $schedule->entries->first()->entry;
                    if(isset($entry->id)){
                        return '<a class="text-primary" onclick="getShortDetails($(this))" data-id="' . ($entry->id) . '" data-entry-type="' . ($entry->entryType->name) . '" data-code="' . ($entry->code) . '">
                            <p style="width: 150px;white-space: normal">'.systemMoneyFormat($schedule->cost).'</p>
                        </a>';
                    }
                })
                ->editColumn('rate', function($schedule){
                    return systemMoneyFormat($schedule->rate);
                })
                ->addColumn('created_by', function($schedule){
                    return $schedule->creator ? $schedule->creator->name : '';
                })
                ->filterColumn('created_by', function ($query, $keyword) {
                    return $query->whereHas('creator', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })

                ->rawColumns(['cost'])
                ->make(true);
            }

            $data = [
                'title' => $title,
                'headerColumns' => $this->asssetRegisterHeaderColumns()
            ];
            return view('accounting.backend.pages.fixedAssets.assetReScheduling.index', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function create()
    {
        if(request()->get('action') == 'batches'){
            return view('accounting.backend.pages.fixedAssets.assetReScheduling.batches', [
                'batches' => FixedAssetBatch::with([
                    'goodsReceivedItemsStockIn.relGoodsReceivedItems.relGoodsReceivedNote.relPurchaseOrder.purchaseOrderRequisitions'
                ])
                ->whereHas('items', function($query){
                    return $query->where('is_disposed', 0);
                })
                ->whereHas('items.currentUser.fixedAssetLocation.unit', function($query){
                    return $query->whereIn('company_id', auth()->user()->companies->pluck('company_id')->toArray());
                })
                ->when(request()->get('company_id') > 0, function($query){
                    return $query->whereHas('items.currentUser.fixedAssetLocation.unit', function($query){
                        return $query->where('company_id', request()->get('company_id'));
                    });
                })
                ->when(request()->get('product_id') > 0, function($query){
                    return $query->whereHas('items', function($query){
                        return $query->where('final_asset_id', request()->get('product_id'));
                    });
                })
                ->get(),
                'selected' => request()->get('selected')
            ]);
        }elseif(request()->get('action') == 'items'){
            return view('accounting.backend.pages.fixedAssets.assetReScheduling.items', [
                'finalAssets' => FixedAssetBatchItem::with([

                ])
                ->whereHas('currentUser.fixedAssetLocation.unit', function($query){
                    return $query->whereIn('company_id', auth()->user()->companies->pluck('company_id')->toArray());
                })
                ->when(request()->get('company_id') > 0, function($query){
                    return $query->whereHas('currentUser.fixedAssetLocation.unit', function($query){
                        return $query->where('company_id', request()->get('company_id'));
                    });
                })
                ->when(request()->get('product_id') > 0, function($query){
                    return $query->where('final_asset_id', request()->get('product_id'));
                })
                ->where('is_disposed', 0)
                ->groupBy('asset_code')
                ->get(),
                'selected' => request()->get('selected')
            ]);
        }

        $title = 'Asset Re-Scheduling';
        $categories = Category::whereHas('products.fixedAssetBatchItems', function($query){
            return $query->where('is_disposed', 0);
        })
        ->get();
        try {
            $item = FixedAssetBatchItem::find(request()->get('fixed_asset_batch_item_id'));
            $data = [
                'title' => $title,
                'companies' => Company::has('profitCentres.costCentres')
                ->whereHas('users', function($query){
                    return $query->where('user_id', auth()->user()->id);
                })
                ->get(),
                'categories' => $categories,
                'products' => Product::with([
                    'attributes.attributeOption.attribute'
                ])
                ->whereIn('category_id', $categories->pluck('id')->toArray())
                ->whereHas('fixedAssetBatchItems', function($query){
                    return $query->where('is_disposed', 0);
                })
                ->get(),
                'currencyTypes' => CurrencyType::with(['currencies'])->get(),
                'item' => $item,
            ];
            return view('accounting.backend.pages.fixedAssets.assetReScheduling.create', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function store(Request $request)
    {
        $request->validate([
            'fixed_asset_batch_item_id' => 'required',
            'cost' => 'required',
            'life' => 'required',
        ]);

        if (in_array($request->payment_type, ['cheque', 'fund-transfer'])) {
            $request->validate([
                'payment_details' => 'required'
            ]);
        }

        DB::beginTransaction();
        try{
            $item = FixedAssetBatchItem::with([
                'finalAsset',
                'depreciations',
                'batch.costCentre.profitCentre.company'
            ])->findOrFail($request->fixed_asset_batch_item_id);

            $depreciation_count = $item->depreciations->count();
            $depreciation_total = $item->depreciations->sum('amount');

            $initial_cost = $item->asset_value;
            $initial_life = (100/$item->depreciation_rate);
            $initial_rate = $item->depreciation_rate;
            $consumed_life = $depreciation_count > 0 ? systemDoubleValue($depreciation_count/12, 2) : 0;
            $schedule = FixedAssetBatchItemSchedule::create([
                'fixed_asset_batch_item_id' => $item->id,
                'initial_cost' => $initial_cost,
                'initial_life' => $initial_life,
                'initial_rate' => $initial_rate,
                'consumed_life' => $consumed_life,
                'accumulated_depreciation' => $depreciation_total,
                'cost' => $request->cost,
                'life' => $request->life,
                'rate' => $request->life > 0 ? 100/$request->life : 0,
                'created_by' => auth()->user()->id,
            ]);

            if($schedule){

                if($request->life > 0){
                    $asset_value = ($initial_cost-$depreciation_total)+$request->cost;
                    $life = ($initial_life-$consumed_life)+$request->life;
                    $rate = $life > 0 ? 100/$life : 0;

                    $item->asset_value = $asset_value;
                    $item->years = $life;
                    $item->depreciation_rate = $rate;
                    $item->save();
                }
                
                $accountDefaultSettings = accountDefaultSettings();
                $items = [];

                //Asset Re-Scheduling Cost Payment
                $credit_account = $request->chart_of_account_id;
                if ($request->payment_type == 'cash') {
                    $credit_account = $accountDefaultSettings['cash_in_hand_account'];
                } elseif ($request->payment_type == 'cheque' || $request->payment_type == 'fund-transfer') {
                    $bankAccount = BankAccount::find($request->bank_account_id);
                    if (isset($bankAccount->chart_of_account_id) && $bankAccount->chart_of_account_id > 0) {
                        $credit_account = $bankAccount->chart_of_account_id;
                    } else {
                        $credit_account = $accountDefaultSettings['bank_account'];
                    }
                }

                $cost_centre_id = (isset($item->currentUser->cost_centre_id) ? $item->currentUser->cost_centre_id : $item->batch->cost_centre_id);

                array_push($items, [
                    'cost_centre_id' => $cost_centre_id,
                    'chart_of_account_id' => $item->batch->costCentre->profitCentre->company->overhouling_expense_ledger_id,
                    'debit' => $request->cost,
                    'credit' => 0,
                    'narration' => 'Asset Re-Scheduling :: Overhouling Expense Payment Debit',
                    'type' => 'asset-re-scheduling',
                    'source' => $schedule->id
                ]);
                array_push($items, [
                    'cost_centre_id' => $cost_centre_id,
                    'chart_of_account_id' => $credit_account,
                    'debit' => 0,
                    'credit' => $request->cost,
                    'narration' => 'Asset Re-Scheduling :: Overhouling Expense Payment Credit',
                    'type' => 'asset-re-scheduling',
                    'source' => $schedule->id
                ]);
                //Asset Re-Scheduling Cost Payment

                if($request->life > 0){
                    //Asset Re-Scheduling Asset Inclusion
                    $asset_ledger = $accountDefaultSettings['cwip_asset_account'];
                    if($item->finalAsset->is_fixed_asset == 1){
                        $asset_ledger = (isset($item->finalAsset->inventory_account_id) && $item->finalAsset->inventory_account_id > 0 ? $item->finalAsset->inventory_account_id : $accountDefaultSettings['fixed_asset_account']);
                    }elseif($item->finalAsset->is_cwip == 1){
                        $asset_ledger = (isset($item->finalAsset->cwip_asset_account_id) && $item->finalAsset->cwip_asset_account_id > 0 ? $item->finalAsset->cwip_asset_account_id : $accountDefaultSettings['cwip_asset_account']);
                    }else{
                        $asset_ledger = (isset($item->finalAsset->inventory_account_id) && $item->finalAsset->inventory_account_id > 0 ? $item->finalAsset->inventory_account_id : $accountDefaultSettings['inventory_account']);
                    }

                    array_push($items, [
                        'cost_centre_id' => $cost_centre_id,
                        'chart_of_account_id' => $asset_ledger,
                        'debit' => $request->cost,
                        'credit' => 0,
                        'narration' => 'Asset Re-Scheduling :: Asset Value Debit',
                        'type' => 'asset-re-scheduling',
                        'source' => $schedule->id
                    ]);
                    array_push($items, [
                        'cost_centre_id' => $cost_centre_id,
                        'chart_of_account_id' => $credit_account,
                        'debit' => 0,
                        'credit' => $request->cost,
                        'narration' => 'Asset Re-Scheduling :: Asset Overhouling Expense Credit',
                        'type' => 'asset-re-scheduling',
                        'source' => $schedule->id
                    ]);
                    //Asset Re-Scheduling Asset Inclusion

                    //Asset Re-Scheduling Asset Consumption
                    array_push($items, [
                        'cost_centre_id' => $cost_centre_id,
                        'chart_of_account_id' => $item->batch->costCentre->profitCentre->company->accidental_loss_ledger_id,
                        'debit' => $depreciation_total,
                        'credit' => 0,
                        'narration' => 'Asset Re-Scheduling :: Asset Loss Debit',
                        'type' => 'asset-re-scheduling',
                        'source' => $schedule->id
                    ]);
                    array_push($items, [
                        'cost_centre_id' => $cost_centre_id,
                        'chart_of_account_id' => $asset_ledger,
                        'debit' => 0,
                        'credit' => $depreciation_total,
                        'narration' => 'Asset Re-Scheduling :: Asset Consumption Credit',
                        'type' => 'asset-re-scheduling',
                        'source' => $schedule->id
                    ]);
                    //Asset Re-Scheduling Asset Consumption
                }

                $entry = saveLedgerEntries(5, date('Y-m-d H:i:s'), 1, '', "Asset Re-Scheduling", $items, $item->batch->goodsReceivedItemsStockIn->relPurchaseOrder->relQuotation->exchange_rate_id, 0, 0, 1, getCostCentreCompany($cost_centre_id));

                if(isset($entry['entry']->id)){
                    FixedAssetBatchItemScheduleEntry::create([
                        'fixed_asset_batch_item_schedule_id' => $schedule->id,
                        'entry_id' => $entry['entry']->id,
                    ]);
                }
            }
            
            DB::commit();
            session()->flash('alert-type', 'success');
            session()->flash('message', 'Asset Has been Re-Scheduled Successfully.');
            return response()->json([
                'success' => true,
            ]);
        }catch(\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }
}
