<?php
bolt_decrypt( __FILE__ , '5t5vCK'); return 0;
##!!!##