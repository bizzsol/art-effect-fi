<?php
bolt_decrypt( __FILE__ , 'XyW52Y'); return 0;
##!!!##