<?php
bolt_decrypt( __FILE__ , '6HiVaY'); return 0;
##!!!##