<?php
bolt_decrypt( __FILE__ , 'kU1FNs'); return 0;
##!!!##