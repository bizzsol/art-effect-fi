<?php
bolt_decrypt( __FILE__ , 'l4gHPX'); return 0;
##!!!##