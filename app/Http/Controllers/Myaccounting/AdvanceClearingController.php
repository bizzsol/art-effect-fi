<?php
bolt_decrypt( __FILE__ , 'TiN1ca'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use \App\Models\PmsModels\Suppliers;
use \App\Models\Purchase\PurchaseOrder;
use \App\Models\PmsModels\SupplierPayment;

use App,DB;
use Illuminate\Support\Facades\Auth;
use DataTables;

class AdvanceClearingController extends Controller
{

    /**
     * Set global data table headers.
     *
     * @return headerColumns
     */
     public function headerColumns($value='')
     {
        return array(
            ['SL', 'SL'],
            ['company', 'company', 'text-center'],
            ['purchase_order', 'purchase_order', 'text-center'],
            ['supplier', 'supplier', 'text-center'],
            ['transaction_date', 'transaction_date', 'text-center'],
            ['transection_type', 'transection_type', 'text-center'],
            ['currency', 'currency', 'text-center'],
            ['bill_amount', 'bill_amount', 'text-right'],
            ['advance_amount', 'advance_amount', 'text-right'],
            ['actions', 'actions', 'text-center'],
        );
    }

    public function index()
    {
        try {
            if (request()->ajax()) {
                return Datatables::of(
                    SupplierPayment::has('relSupplierLedgers')
                    ->with([
                        'relPurchaseOrder.relQuotation.relSuppliers',
                        'relPurchaseOrder.relQuotation.exchangeRate.currency',
                        'relSupplierLedgers',
                        'relPurchaseOrder.relSupplierPayments.relSupplierLedgers',
                        'relPurchaseOrder.Unit.company'
                    ])
                    ->whereHas('relPurchaseOrder.Unit.company.users', function($query){
                        return $query->where('user_id', auth()->user()->id);
                    })
                    ->where('is_cleared', 0)
                    ->when(!datatableOrdering(), function($query){
                        return $query->orderby('updated_at', 'desc');
                    })
                )
                ->addIndexColumn()
                
                ->addColumn('company', function($advance){
                    return  (isset($advance->relPurchaseOrder->Unit->company->code) ? $advance->relPurchaseOrder->Unit->company->code : '');
                })
                ->filterColumn('company', function ($query, $keyword) {
                    return $query->whereHas('relPurchaseOrder.Unit.company', function ($query) use($keyword) {
                        $query->where('code', 'LIKE', '%'.$keyword.'%');
                    });
                })

                ->addColumn('purchase_order', function($advance){
                    return  (isset($advance->relPurchaseOrder->reference_no) ? $advance->relPurchaseOrder->reference_no : '');
                })
                ->filterColumn('purchase_order', function ($query, $keyword) {
                    return $query->whereHas('relPurchaseOrder', function ($query) use($keyword) {
                        $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('purchase_order', function ($query, $order) {
                    return pleaseSortMe($query, $order, PurchaseOrder::select('purchase_orders.reference_no')
                        ->whereColumn('purchase_orders.id', 'supplier_payments.purchase_order_id')
                        ->take(1)
                    );
                })
                ->addColumn('supplier', function($advance){
                    return  (isset($advance->relPurchaseOrder->relQuotation->relSuppliers->name) ? $advance->relPurchaseOrder->relQuotation->relSuppliers->name.' ('.$advance->relPurchaseOrder->relQuotation->relSuppliers->code.')' : '');
                })
                ->filterColumn('supplier', function ($query, $keyword) {
                    return $query->whereHas('relPurchaseOrder.relQuotation.relSuppliers', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%')
                              ->orWhere('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('supplier', function ($query, $order) {
                    return pleaseSortMe($query, $order, PurchaseOrder::select('suppliers.name')
                        ->join('suppliers', 'suppliers.id', '=', 'quotations.supplier_id')
                        ->join('quotations', 'quotations.id', '=', 'purchase_orders.quotation_id')
                        ->whereColumn('purchase_orders.id', 'supplier_payments.purchase_order_id')
                        ->take(1)
                    );
                })
                ->addColumn('transaction_date', function($advance){
                    return  date('Y-m-d', strtotime($advance->transection_date));
                })
                ->filterColumn('transaction_date', function ($query, $keyword) {
                    return $query->where('transection_date', 'LIKE', '%'.$keyword.'%');
                })
                ->orderColumn('transaction_date', function ($query, $order) {
                    return $query->orderBy('transection_date', $order);
                })
                ->addColumn('currency', function($advance){
                    return  (isset($advance->relPurchaseOrder->relQuotation->exchangeRate->currency->code) ? $advance->relPurchaseOrder->relQuotation->exchangeRate->currency->code : '');
                })
                ->filterColumn('currency', function ($query, $keyword) {
                    return $query->whereHas('relPurchaseOrder.relQuotation.exchangeRate.currency', function ($query) use($keyword) {
                        $query->where('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('currency', function ($query, $order) {
                    return pleaseSortMe($query, $order, PurchaseOrder::select('currencies.name')
                        ->join('currencies', 'currencies.id', '=', 'exchange_rates.currency_id')
                        ->join('exchange_rates', 'exchange_rates.id', '=', 'quotations.exchange_rate_id')
                        ->join('quotations', 'quotations.id', '=', 'purchase_orders.quotation_id')
                        ->whereColumn('purchase_orders.id', 'supplier_payments.purchase_order_id')
                        ->take(1)
                    );
                })
                ->addColumn('bill_amount', function($advance){
                    return systemMoneyFormat($advance->relPurchaseOrder->relSupplierPayments->whereIn('bill_type', ['po', 'grn'])->sum('bill_amount'));
                })
                ->addColumn('advance_amount', function($advance){
                    return systemMoneyFormat($advance->pay_amount);
                })
                ->filterColumn('advance_amount', function ($query, $keyword) {
                    return $query->where('pay_amount', 'LIKE', '%'.$keyword.'%');
                })
                ->orderColumn('advance_amount', function ($query, $order) {
                    return $query->orderBy('pay_amount', $order);
                })
                ->addColumn('actions', function($advance){
                    if($advance->relPurchaseOrder->relSupplierPayments->whereIn('bill_type', ['po', 'grn'])->sum('bill_amount') >= $advance->advance_amount){
                        return '<a class="btn btn-xs btn-success" onclick="runAdvanceClearPostings($(this))" data-advance-id="'.$advance->id.'"><i class="la la-check"></i>&nbsp;Run Advance Clear Postings</a>';
                    }
                })
                ->rawColumns(['actions'])
                ->make(true);
            }

            $data = [
                'title' => 'Advance Clearings',
                'headerColumns' => $this->headerColumns(),
            ];
            return view('accounting.backend.pages.advanceClearings.index', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function store(Request $request)
    {
        DB::beginTransaction();
        try{
            $advance = SupplierPayment::findOrFail($request->id);
            $accountDefaultSettings = accountDefaultSettings();
            
            $items = array([
                'cost_centre_id' => $advance->relPurchaseOrder->cost_centre_id,
                'chart_of_account_id' => (isset($advance->relSupplier->payable_account_id) && $advance->relSupplier->payable_account_id > 0 ? $advance->relSupplier->payable_account_id : $accountDefaultSettings['supplier_payable_account']),
                'debit' => $advance->pay_amount,
                'credit' => 0,
                'narration' => 'Advance Clearing :: Payable Debit',
                'type' => 'advance-clearing',
                'source' => $advance->id
            ],[
                'cost_centre_id' => $advance->relPurchaseOrder->cost_centre_id,
                'chart_of_account_id' => (isset($advance->relSupplier->advance_account_id) && $advance->relSupplier->advance_account_id > 0 ? $advance->relSupplier->advance_account_id : $accountDefaultSettings['supplier_advance_account']),
                'debit' => 0,
                'credit' => $advance->pay_amount,
                'narration' => 'Advance Clearing :: Advance Credit',
                'type' => 'advance-clearing',
                'source' => $advance->id
            ]);

            $entry = saveLedgerEntries(5, date('Y-m-d H:i:s'), 1, '', 'Advance Clearing', $items,  $advance->relPurchaseOrder->relQuotation->exchange_rate_id, 0, 0, 0, getCostCentreCompany($advance->relPurchaseOrder->cost_centre_id));
            savePOEntry($entry, $advance->supplier_id, $advance->purchase_order_id, 'advance-clearing');

            $advance->is_cleared = 1;
            $advance->save();

            DB::commit();
            return response()->json([
                'success' => true,
                'message' => "Advance Clearing Postings has been posted successfully."
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }
}
