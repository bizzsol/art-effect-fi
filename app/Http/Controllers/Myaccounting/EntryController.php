<?php
bolt_decrypt( __FILE__ , 'RZJMSb'); return 0;
##!!!##