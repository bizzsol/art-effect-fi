<?php
bolt_decrypt( __FILE__ , 'Nea8Xd'); return 0;
##!!!##