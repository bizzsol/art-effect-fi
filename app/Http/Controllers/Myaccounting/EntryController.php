<?php
bolt_decrypt( __FILE__ , 'EDLMbd'); return 0;
##!!!##