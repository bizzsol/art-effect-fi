<?php
bolt_decrypt( __FILE__ , 'Fqt0DI'); return 0;
##!!!##