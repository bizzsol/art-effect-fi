<?php
bolt_decrypt( __FILE__ , '9Cnom2'); return 0;
##!!!##