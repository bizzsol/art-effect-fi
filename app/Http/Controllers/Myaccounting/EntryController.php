<?php
bolt_decrypt( __FILE__ , 'PQXVBZ'); return 0;
##!!!##