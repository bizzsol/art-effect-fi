<?php
bolt_decrypt( __FILE__ , 'hUGa1U'); return 0;
##!!!##