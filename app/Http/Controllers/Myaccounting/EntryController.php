<?php
bolt_decrypt( __FILE__ , 'AJ7Owx'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting;

use App\Http\Controllers\Controller;
use App\Imports\EntriesImport;
use Illuminate\Http\Request;

use \App\Models\PmsModels\Accounts\Company;
use \App\Models\PmsModels\Accounts\ProfitCentre;
use \App\Models\PmsModels\Accounts\CostCentre;
use \App\Models\PmsModels\Accounts\FiscalYear;
use \App\Models\PmsModels\Accounts\EntryType;
use \App\Models\PmsModels\Accounts\Tag;
use \App\Models\PmsModels\Accounts\ChartOfAccount;
use \App\Models\PmsModels\Accounts\SubLedger;
use \App\Models\PmsModels\Accounts\Entry;
use \App\Models\PmsModels\Accounts\EntryApproval;
use \App\Models\PmsModels\Accounts\EntryItem;
use \App\Models\PmsModels\Accounts\EntryAttachment;
use \App\Models\PmsModels\Suppliers;
use \App\Models\PmsModels\Purchase\PurchaseOrder;
use \App\Models\PmsModels\Grn\GoodsReceivedItemStockIn;
use \App\Models\PmsModels\SupplierPayment;
use \App\Models\PmsModels\SupplierLedgers;
use \App\Models\PmsModels\Accounts\BankAccount;
use \App\Models\PmsModels\Accounts\AdvanceCategory;
use \App\Models\PmsModels\Purchase\PurchaseOrderEntry;

use \App\Models\PmsModels\Accounts\CurrencyType;
use \App\Models\PmsModels\Accounts\Currency;
use \App\Models\PmsModels\Accounts\ExchangeRate;
use \App\Models\PmsModels\Accounts\FiscalYearOpening;

use \App\Models\PmsModels\Accounts\ApprovalLevel;

use \App\Models\PmsModels\Accounts\FiscalYearOpeningEntry;

use App, DB, DataTables;
use Illuminate\Support\Facades\Auth;
use Maatwebsite\Excel\Facades\Excel;

class EntryController extends Controller
{
    public function headerColumns($value = '')
    {
        return array(
            ['SL', 'SL'],
            ['date', 'date', 'text-center'],
            ['code', 'code', 'text-center'],
            ['reference', 'reference', 'text-center'],
            ['source', 'source', 'text-center'],
            ['currency', 'currency', 'text-center'],
            ['debit', 'debit', 'text-right'],
            ['credit', 'credit', 'text-right'],
            ['notes', 'notes', 'text-right'],
            ['manual', 'manual', 'text-center'],
            ['options', 'options', 'text-center']
        );
    }
    
    public function index()
    {
        if (request()->has('get-ledgers')) {
            $all = getAllGroupAndLedgers(false, true);
            $fiscalYear = getActiveFiscalYear(request()->get('company_id'));
            
            return response()->json([
                'coa' => chartOfAccountsOptions([], 0, 0, $all, false, '', false, [request()->get('company_id')], true, getLedgerBalances($all, request()->get('company_id'), $fiscalYear->id)),
                'fy' => $fiscalYear
            ]);
        }
        
        try {
            $permissions = [
                'reverse-finance-posting' => auth()->user()->hasPermissionTo('reverse-finance-posting'),
                'entry-edit' => auth()->user()->hasPermissionTo('entry-edit'),
                'entry-view' => auth()->user()->hasPermissionTo('entry-view'),
            ];
            
            $companies = Company::has('profitCentres.costCentres')
                ->whereHas('users', function ($query) {
                    return $query->where('user_id', auth()->user()->id);
                })
                ->get();
            
            $company_id = request()->get('company_id') > 0 ? request()->get('company_id') : $companies[0]->id;
            
            $fiscalYear = getActiveFiscalYear($company_id);
            $fiscal_year_id = request()->get('fiscal_year_id') > 0 ? request()->get('fiscal_year_id') : $fiscalYear->id;
            
            $from = !empty(request()->get('from')) ? request()->get('from') : $fiscalYear->start;
            $to = !empty(request()->get('to')) ? request()->get('to') : $fiscalYear->end;
            
            if (!request()->ajax()) {
                // $all = getAllGroupAndLedgers(false, true);
                // $currentCOA = chartOfAccountsOptions([], 0, 0, $all, false, '', false, [$company_id], true, getLedgerBalances($all, $company_id, $fiscal_year_id));
            }
            
            $entryArray = Entry::join('entry_items', 'entry_items.entry_id', '=', 'entries.id')
                ->join('cost_centres', 'cost_centres.id', '=', 'entry_items.cost_centre_id')
                ->join('profit_centres', 'profit_centres.id', '=', 'cost_centres.profit_centre_id')
                ->join('companies', 'companies.id', '=', 'profit_centres.company_id')
                ->join('user_companies', 'user_companies.company_id', '=', 'companies.id')
                ->join('chart_of_accounts', 'chart_of_accounts.id', '=', 'entry_items.chart_of_account_id')
                ->join('chart_of_account_users', 'chart_of_account_users.chart_of_account_id', '=', 'chart_of_accounts.id')
                ->join('entry_types', 'entry_types.id', '=', 'entries.entry_type_id')
                ->join('entry_type_companies', 'entry_type_companies.entry_type_id', '=', 'entry_types.id')
                ->where('user_companies.user_id', auth()->user()->id)
                ->where('chart_of_account_users.user_id', auth()->user()->id)
                ->whereIn('entry_type_companies.company_id', auth()->user()->companies->pluck('company_id')->toArray())
                ->when($company_id > 0, function ($query) use ($company_id) {
                    return $query->where('profit_centres.company_id', $company_id);
                })
                ->when(request()->get('entry_type_id') > 0, function ($query) {
                    return $query->where('entries.entry_type_id', request()->get('entry_type_id'));
                })
                ->when($fiscal_year_id > 0, function ($query) use ($fiscal_year_id) {
                    return $query->where('entries.fiscal_year_id', $fiscal_year_id);
                })
                ->when(request()->get('currency_id') > 0, function ($query) {
                    return $query->join('exchange_rates', 'exchange_rates.id', '=', 'entries.exchange_rate_id')
                        ->where('exchange_rates.currency_id', request()->get('currency_id'));
                })
                ->where('entries.date', '>=', $from)
                ->where('entries.date', '<=', $to)
                ->when(request()->get('debit_ledger_id') > 0, function ($query) {
                    return $query->where('entry_items.chart_of_account_id', request()->get('debit_ledger_id'))
                        ->where('entry_items.debit_credit', 'D');
                })
                ->when(request()->get('debit_sub_ledger_id') > 0, function ($query) {
                    return $query->where('entry_items.sub_ledger_id', request()->get('debit_sub_ledger_id'))
                        ->where('entry_items.debit_credit', 'D');
                })
                ->when(request()->get('credit_ledger_id') > 0, function ($query) {
                    return $query->where('entry_items.chart_of_account_id', request()->get('credit_ledger_id'))
                        ->where('entry_items.debit_credit', 'C');
                })
                ->when(request()->get('credit_sub_ledger_id') > 0, function ($query) {
                    return $query->where('entry_items.sub_ledger_id', request()->get('credit_sub_ledger_id'))
                        ->where('entry_items.debit_credit', 'C');
                })
                ->when(!empty(request()->get('status')), function ($query) {
                    return $query->when(request()->get('status') == 'approved', function ($query) {
                        return $query->where('entries.is_approved', 'approved');
                    })
                        ->when(request()->get('status') != 'approved', function ($query) {
                            return $query->join('entry_approvals', 'entry_approvals.entry_id', '=', 'entries.id')
                                ->join('approval_levels', 'approval_levels.id', '=', 'entry_approvals.approval_level_id')
                                ->where('approval_levels.name', 'LIKE', '%' . explode('-', request()->get('status'))[0] . '%')
                                ->where('entry_approvals.status', 'LIKE', '%' . (isset(explode('-', request()->get('status'))[1]) ? explode('-', request()->get('status'))[1] : '') . '%');
                        });
                })
                ->select('entries.id')
                ->distinct()
                ->pluck('id')
                ->toArray();
            
            if (request()->has('entry_code')) {
                $entry = Entry::with([
                    'items.costCentre.profitCentre.company',
                    'items.chartOfAccount',
                    'fiscalYear',
                    'entryType',
                    'exchangeRate.currency',
                    'approvals.approvalLevel',
                ])->where('code', request()->get('entry_code'))->first();
                
                return response()->json([
                    'entry' => $entry,
                    'array' => $entryArray,
                    'exists' => in_array($entry->id, $entryArray),
                ]);
            }
            
            if (request()->ajax()) {
                return DataTables::of(
                    Entry::with([
                        'exchangeRate.currency',
                        'entryType',
                    ])
                        ->whereIn('id', $entryArray)
                        ->when(!datatableOrdering(), function ($query) {
                            return $query->orderby('id', 'desc');
                        })
                )
                    ->addIndexColumn()
                    ->editColumn('code', function ($entry) {
                        return '<a class="text-primary mr-1" onclick="getShortDetails($(this))" data-id="' . ($entry->id) . '" data-entry-type="' . ($entry->entryType->name) . '" data-code="' . ($entry->code) . '">' . $entry->code . '</a>';
                    })
                    ->addColumn('reference', function ($entry) use ($permissions) {
                        if ($permissions['entry-view']) {
                            return '<a class="text-primary" target="_blank" href="' . url('accounting/entries/' . $entry->id) . '">' . $entry->number . '</a>';
                        }
                        
                        return $entry->number;
                    })
                    ->filterColumn('reference', function ($query, $keyword) {
                        return $query->where('number', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('reference', function ($query, $order) {
                        return $query->orderby('number', $order);
                    })
                    ->addColumn('source', function ($entry) {
                        return $entry->notes;
                    })
                    ->filterColumn('source', function ($query, $keyword) {
                        return $query->where('notes', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('source', function ($query, $order) {
                        return $query->orderBy('notes', $order);
                    })
                    ->addColumn('currency', function ($entry) {
                        return $entry->exchangeRate ? ($entry->exchangeRate->currency ? $entry->exchangeRate->currency->code : '') : '';
                    })
                    ->filterColumn('currency', function ($query, $keyword) {
                        return $query->whereHas('exchangeRate.currency', function ($query) use ($keyword) {
                            $query->where('code', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('currency', function ($query, $order) {
                        return pleaseSortMe($query, $order, ExchangeRate::select('currencies.code')
                            ->join('currencies', 'currencies.id', '=', 'exchange_rates.currency_id')
                            ->whereColumn('exchange_rates.id', 'entries.exchange_rate_id')
                            ->take(1)
                        );
                    })
                    ->editColumn('debit', function ($entry) {
                        return systemMoneyFormat($entry->debit);
                    })
                    ->editColumn('credit', function ($entry) {
                        return systemMoneyFormat($entry->credit);
                    })
                    ->addColumn('manual', function ($entry) {
                        return $entry->is_manual == 1 ? 'Yes' : 'No';
                    })
                    ->addColumn('options', function ($entry) use ($permissions) {
                        $actions = '';
                        
                        if ($entry->is_approved == 'approved') {
                            $actions .= '<a class="btn btn-xs btn-success mr-1" onclick="entryApprovalHistory($(this))" data-id="' . ($entry->id) . '">Approved</a>';
                        } else {
                            $actions .= '<a class="btn btn-xs btn-warning mr-1" onclick="entryGlobalApproval($(this))" data-id="' . ($entry->id) . '">Pending</a>';
                        }
                        
                        if ($permissions['reverse-finance-posting'] && $entry->is_manual == 1 && $entry->is_reversed == 0 && $entry->is_approved == 'approved') {
                            $actions .= '<a class="btn btn-xs btn-danger mt-1 mb-1" href="' . url('accounting/entries/' . $entry->id . '?reverse') . '"><i class="las la-retweet"></i>&nbsp;Reverse</a>';
                        }
                        
                        if ($permissions['entry-edit'] && $entry->is_manual == 1 && $entry->is_reversed == 0 && $entry->is_approved != 'approved' && $entry->created_by == auth()->user()->id) {
                            $actions .= '<a class="btn btn-xs btn-success mt-1 mb-1" href="' . url('accounting/entries/' . $entry->id . '/edit') . '"><i class="las la-edit"></i>&nbsp;Edit</a>';
                        }
                        
                        return $actions;
                    })
                    ->skipTotalRecords()
                    ->rawColumns(['code', 'reference', 'options', 'notes'])
                    ->toJson();
            }
            
            return view('accounting.backend.pages.entries.index', [
                'title' => 'Entries',
                'companies' => $companies,
                
                'company_id' => $company_id,
                'fiscal_year_id' => $fiscal_year_id,
                'from' => $from,
                'to' => $to,
                // 'currentCOA' => $currentCOA,
                
                'entryTypes' => EntryType::whereHas('companies.company.users', function ($query) {
                    return $query->where('user_id', auth()->user()->id);
                })->get(),
                'fiscalYears' => FiscalYear::all(),
                'currencies' => Currency::all(),
                'approvalLevels' => ApprovalLevel::whereIn('id', auth()->user()->approvals->pluck('approval_level_id')->toArray())->get(),
                
                'headerColumns' => $this->headerColumns(),
            ]);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }
    
    public function create()
    {
        if (request()->has('get-sub-ledgers')) {
            $subLedgers = SubLedger::where('chart_of_account_id', request()->get('chart_of_account_id'))
                ->orderBy('code', 'asc')
                ->get();
            return response()->json([
                'count' => $subLedgers->count(),
                'sub_ledgers' => $subLedgers
            ]);
        }
        
        if (request()->has('clear-entry-items')) {
            session()->forget('entries-items');
            session()->forget('entries-errors');
            return redirect()->back();
        }
        
        try {
            $company = Company::has('profitCentres.costCentres')
                ->where('id', request()->get('company'))
                ->whereHas('users', function ($query) {
                    return $query->where('user_id', auth()->user()->id);
                })->first();
            
            if (!isset($company->id)) {
                return redirect('accounting/entries');
            }
            
            $entryType = EntryType::where('label', request()->get('type'))
                ->whereHas('companies.company.users', function ($query) {
                    return $query->where('user_id', auth()->user()->id);
                })->first();
            if (!isset($entryType->id)) {
                return redirect('accounting/entries');
            }
            
            $purchaseOrders = [];
            if (request()->get('type') == "payment") {
                $purchaseOrders = PurchaseOrder::where('is_closed', 0)->get();
            }
            
            
            $accountDefaultSettings = accountDefaultSettings();
            $all = getAllGroupAndLedgers($entryType->id, true, [], [$company->id]);
            $getActiveFiscalYear = getActiveFiscalYear($company->id);
            $data = [
                'title' => 'New ' . $entryType->name . ' Entry',
                'accountDefaultSettings' => $accountDefaultSettings,
                'systemCurrency' => systemCurrency($accountDefaultSettings['currency_id'], $accountDefaultSettings),
                'company' => $company,
                'entryType' => $entryType,
                'tags' => Tag::all(),
                'fiscalYear' => $getActiveFiscalYear,
                'fiscalYears' => FiscalYear::whereHas('fiscalYearOpenings', function ($query) use ($company) {
                    return $query->where('status', 'opened')
                        ->where('is_approved', 'approved')
                        ->where('company_id', $company->id);
                })->get(),
                'currencyTypes' => CurrencyType::with(['currencies'])->get(),
                'costCentres' => getCostCentres(true, $company->id, true),
                'chartOfAccountsOptions' => chartOfAccountsOptions([], 0, 0, $all, false, 'yes', $entryType->id, [$company->id], true, getLedgerBalances($all, $company->id, $getActiveFiscalYear->id)),
                'purchaseOrders' => $purchaseOrders,
                'suppliers' => Suppliers::whereHas('relQuotations.relPurchaseOrder', function ($query) use ($purchaseOrders) {
                    return $query->whereIn('id', isset($purchaseOrders[0]) ? $purchaseOrders->pluck('id')->toArray() : []);
                })->get(),
                'advanceCategories' => AdvanceCategory::all()
            ];
            
            return view('accounting.backend.pages.entries.create', $data);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }
    
    public function uploadExcel(Request $request)
    {
        $request->validate([
            'company_id' => 'required',
            'entry_type_id' => 'required',
            'excel_file' => 'required|mimes:xls,xlsx'
        ]);
        
        try {
            $path = $this->fileUpload($request->file('excel_file'), 'upload/upload-excels');
            $sheets = Excel::toArray(new EntriesImport, public_path($path));
            $this->fileDelete($path);
            
            $company = Company::findOrFail($request->company_id);
            
            $costCentres = CostCentre::whereHas('profitCentre', function ($query) use ($request) {
                return $query->where('company_id', $request->company_id)
                    ->whereIn('company_id', auth()->user()->companies->pluck('company_id')->toArray());
            })->get();
            $companyId = $company->id;
            $chartOfAccounts = ChartOfAccount::whereHas('entryTypes', function ($query) use ($request) {
                return $query->where('entry_type_id', $request->entry_type_id);
            })
                ->whereHas('companies', function ($query) use ($companyId) {
                    return $query->where('company_id', $companyId)
                        ->whereIn('company_id', auth()->user()->companies->pluck('company_id')->toArray());
                })
                ->whereHas('users', function ($query) {
                    return $query->where('user_id', auth()->user()->id);
                })->get();
            
            $subLedgers = SubLedger::whereIn('chart_of_account_id', $chartOfAccounts->pluck('id')->toArray())->get();
            
            $items = [];
            $entryErrors = [];
            if (isset($sheets[0][0])) {
                foreach ($sheets[0] as $key => $value) {
                    $cost_centre = $costCentres->where('code', trim($value['cost_centre_code']))->count() > 0 ? $costCentres->where('code', trim($value['cost_centre_code']))->first() : false;
                    
                    $chart_of_account = $chartOfAccounts->where('code', trim($value['chart_of_account_code']))->count
                    () > 0 ? $chartOfAccounts->where('code', trim($value['chart_of_account_code']))->first() : false;
                    
                    $sub_ledger = $subLedgers->where('chart_of_account_id', isset($chart_of_account->id) ? $chart_of_account->id : 0)->where('code', trim(isset($value['sub_ledger_code']) ? $value['sub_ledger_code'] : ''))->count() > 0 ? $subLedgers->where('chart_of_account_id', isset($chart_of_account->id) ? $chart_of_account->id : 0)->where('code', trim(isset($value['sub_ledger_code']) ? $value['sub_ledger_code'] : ''))->first() : false;
                    
                    if (isset($cost_centre->id) && isset($chart_of_account->id) && ($value['debit'] > 0 || $value['credit'] > 0)) {
                        array_push($items, [
                            'cost_centre_id' => $cost_centre->id,
                            'cost_centre_code' => $cost_centre->code,
                            'cost_centre_name' => $cost_centre->name,
                            'chart_of_account_id' => $chart_of_account->id,
                            'chart_of_account_code' => $chart_of_account->code,
                            'chart_of_account_name' => $chart_of_account->name,
                            'sub_ledger_id' => isset($sub_ledger->id) ? $sub_ledger->id : null,
                            'sub_ledger_code' => isset($sub_ledger->code) ? $sub_ledger->code : null,
                            'sub_ledger_name' => isset($sub_ledger->name) ? $sub_ledger->name : null,
                            'debit' => $value['debit'] > 0 ? $value['debit'] : 0,
                            'credit' => $value['credit'] > 0 ? $value['credit'] : 0,
                            'narration' => $value['narration'],
                        ]);
                    } else {
                        if (!isset($cost_centre->id)) {
                            array_push($entryErrors, 'Cost Centre <b>#' . trim($value['cost_centre_code']) . '</b> not available for Company <b>#' . $company->code . '</b> in line <b>#' . $value['sl'] . '</b>.');
                        }
                        
                        if (!isset($chart_of_account->id)) {
                            array_push($entryErrors, 'Ledger <b>#' . trim($value['chart_of_account_code']) . '</b> not available for Company <b>#' . $company->code . '</b> in line <b>#' . $value['sl'] . '</b>.');
                        }
                        
                        if ($value['debit'] <= 0 && $value['credit'] <= 0) {
                            array_push($entryErrors, 'Both Debit & Credit Amount is invalid in line </b>#' . $value['sl'] . '/<b>.');
                        }
                    }
                }
            }
            
            if (systemDoubleValue(collect($items)->sum('debit'), 2) != systemDoubleValue(collect($items)->sum('credit'), 2)) {
                array_push($entryErrors, 'Debit & Credit Amount is not matched!');
            }
            
            session()->put('entries-items', $items);
            session()->put('entries-errors', $entryErrors);
            
            session()->flash('alert-type', 'success');
            session()->flash('message', "Excel file uploaded successfully.");
            
            return response()->json([
                'success' => true,
            ]);
        } catch (\Throwable $th) {
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
        
    }
    
    public function store(Request $request)
    {
        $request->validate([
            'fiscal_year_id' => 'required',
            'cost_centre_id' => 'required',
            'cost_centre_id.*' => 'required',
            'chart_of_account_id' => 'required',
            'chart_of_account_id.*' => 'required',
        ]);
        
        $is_manual = 1;
        
        if (isset($request->form_type) && $request->form_type == 'with_po') {
            $is_manual = 0;
            $request->validate([
                'supplier_id' => 'required',
                'purchase_order_id' => 'required',
                /*'is_advance' => 'required',*/
                'advance_category_id' => 'required',
            ]);
            
            /*
            if($request->is_advance == 1){
                $request->validate([
                    'advance_category_id' => 'required',
                ]);
            }*/
            
            $due_amount = $this->getDueAmount($request->purchase_order_id);
            if ($due_amount < systemDoubleValue($this->amount($request)['debit'], 2)) {
                return response()->json([
                    'success' => false,
                    'message' => "Total Transaction Amount cannot be greater than Due Amount of " . $due_amount
                ]);
            }
        }
        
        /*
        if(isset($request->form_type) && $request->form_type == 'without_po'){
            if($request->wp_supplier_id > 0){
                $is_manual = 0;
                $request->validate([
                    'is_advance' => 'required',
                    'advance_category_id' => 'required',
                ]);

                if($request->is_advance == 1){
                    $request->validate([
                        'advance_category_id' => 'required',
                    ]);
                }
            }
        }*/
        
        if (systemDoubleValue($this->amount($request)['debit'], 2) <= 0 || systemDoubleValue($this->amount($request)['credit'], 2) <= 0) {
            return response()->json([
                'success' => false,
                'message' => "Please add some Debit or Credit amount"
            ]);
        }
        
        if (systemDoubleValue($this->amount($request)['debit'], 2) != systemDoubleValue($this->amount($request)['credit'], 2)) {
            return response()->json([
                'success' => false,
                'message' => "Debit & Credit amount must be same"
            ]);
        }
        
        
        DB::beginTransaction();
        try {
            $fiscalYear = FiscalYear::with([
                'fiscalYearOpenings'
            ])->findOrFail($request->fiscal_year_id);
            if ((strtotime(date('Y-m-d', strtotime($request->datetime))) < strtotime($fiscalYear->start)) || (strtotime(date('Y-m-d', strtotime($request->datetime))) > strtotime($fiscalYear->end))) {
                return response()->json([
                    'success' => false,
                    'message' => "Datetime is not in the range of the fiscal year period."
                ]);
            }
            
            
            $items = [];
            if (isset($request->chart_of_account_id[0])) {
                foreach ($request->chart_of_account_id as $key => $chart_of_account_id) {
                    array_push($items, [
                        'cost_centre_id' => $request->cost_centre_id[$key],
                        'chart_of_account_id' => $request->chart_of_account_id[$key],
                        'sub_ledger_id' => isset($request->sub_ledgers[$key]) ? $request->sub_ledgers[$key] : null,
                        'debit' => $request->debit[$key],
                        'credit' => $request->credit[$key],
                        'amount' => ($request->debit[$key] > 0 ? $request->debit[$key] : $request->credit[$key]),
                        'debit_credit' => ($request->debit[$key] > 0 ? 'D' : 'C'),
                        'narration' => $request->narration[$key],
                    ]);
                }
            }
            
            $entryType = EntryType::where('label', request()->get('type'))->first();
            $company = Company::where('id', request()->get('company'))->first();
            $entry = saveLedgerEntries($entryType->id, $request->datetime, 1, $request->number, $request->notes, $items, getExchangeRates($request->currency_id, date('Y-m-d', strtotime($request->datetime)), date('H:i:s', strtotime($request->datetime)))['rate']->id, 1, $request->advance_category_id, $is_manual, $company->id, $fiscalYear);
            
            if (isset($entry['success']) && $entry['success']) {
                if (isset($request->form_type) && $request->form_type == 'with_po') {
                    $purchaseOrder = PurchaseOrder::findOrFail($request->purchase_order_id);
                    $payment = SupplierPayment::create([
                        'supplier_id' => $request->supplier_id,
                        'purchase_order_id' => $request->purchase_order_id,
                        'transection_date' => date('Y-m-d', strtotime($request->datetime)),
                        'transection_type' => 'purchase',
                        'exchange_rate_id' => $purchaseOrder->relQuotation->exchange_rate_id,
                        'bill_number' => $purchaseOrder->reference_no,
                        'bill_amount' => 0,
                        'pay_amount' => $this->amount($request)['debit'],
                        'pay_date' => date('Y-m-d', strtotime($request->datetime)),
                        /*'bill_type' => ($request->is_advance == 1 ? 'po-advance' : 'po'),*/
                        'bill_type' => 'po-advance',
                        'status' => 'pending'
                    ]);
                    
                    $paymentInfo = $this->checkPaymentType($request);
                    $supplierLedger = saveSupplierLedger($request->supplier_id, date('Y-m-d', strtotime($request->datetime)), $this->amount($request)['debit'], 0, $paymentInfo['payment_type'], $request->notes, $request->notes, $paymentInfo['bank_account_id'], $payment->id, $purchaseOrder->relQuotation->exchange_rate_id, $entry['entry']->id);
                    /*savePOEntry($entry, $request->supplier_id, $request->purchase_order_id, ($request->is_advance == 1 ? 'advance' : 'supplier-payment'));*/
                    savePOEntry($entry, $request->supplier_id, $request->purchase_order_id, 'advance');
                    
                    if ($paymentInfo['payment_type'] == 'cheque') {
                        saveCheque($paymentInfo['bank_account_id'], $entry['entry']->id, $supplierLedger->id, $request->datetime, 'supplier-payment', $paymentInfo['payment_type'], $entry['entry']->number, 'C', $this->amount($request)['debit']);
                    }
                } elseif (isset($request->form_type) && $request->form_type == 'without_po') {
                    /*
                    $paymentInfo = $this->checkPaymentType($request);
                    $supplierLedger = saveSupplierLedger($request->wp_supplier_id, $request->date, $this->amount($request)['debit'], 0, $paymentInfo['payment_type'], $request->notes, $request->noets, $paymentInfo['bank_account_id']);

                    if($paymentInfo['payment_type'] == 'cheque'){
                        saveCheque($paymentInfo['bank_account_id'], $entry['entry']->id, $supplierLedger->id, date('Y-m-d H:i:s', strtotime($request->date.' '.$request->time)), 'supplier-payment', $paymentInfo['payment_type'], $entry['entry']->number, 'C', $this->amount($request)['debit']);
                    }
                    */
                }
                
                $attachments = [];
                if ($request->hasFile('files')) {
                    foreach ($request->file('files') as $key => $file) {
                        $fileInfo = $this->fileInfo($file);
                        array_push($attachments, [
                            'entry_id' => $entry['entry']->id,
                            'name' => $fileInfo['name'],
                            'type' => $fileInfo['type'],
                            'size' => $fileInfo['size'],
                            'path' => $this->fileUpload($file, 'upload/entry-attachments'),
                        ]);
                    }
                }
                
                if (isset($attachments[0])) {
                    EntryAttachment::insert($attachments);
                }
                
                session()->forget('entries-items');
                session()->forget('entries-errors');
                DB::commit();
                return response()->json([
                    'success' => true,
                    'message' => $entry['message'],
                    'id' => $entry['entry']->id,
                    'code' => $entry['entry']->code,
                    'entry_type' => $entry['entry']->entryType->name,
                ]);
            } else {
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'message' => $entry['message']
                ]);
            }
        } catch (\Throwable $th) {
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }
    
    public function checkPaymentType($request)
    {
        $chart_of_account_id = 0;
        foreach ($request->credit as $key => $credit) {
            if ($credit > 0) {
                $chart_of_account_id = $request->chart_of_account_id[$key];
            }
        }
        
        $payment_type = 'cash';
        $bankAccount = BankAccount::where('chart_of_account_id', $chart_of_account_id)->first();
        if ($chart_of_account_id > 0 && isset($bankAccount->id)) {
            $payment_type = 'cheque';
        }
        
        return [
            'payment_type' => $payment_type,
            'bank_account_id' => isset($bankAccount->id) ? $bankAccount->id : 0,
        ];
    }
    
    public function show($id)
    {
        if (request()->has('approval')) {
            return view('accounting.backend.pages.entries.approval', [
                'approval' => EntryApproval::with([
                    'approvalLevel',
                    'entry.fiscalYear',
                    'entry.entryType',
                    'entry.exchangeRate.currency'
                ])->findOrFail(request()->get('id'))
            ]);
        }
        
        if (request()->has('global-approval')) {
            return view('accounting.backend.pages.entries.global-approval', [
                'entry' => Entry::with([
                    'fiscalYear',
                    'entryType',
                    'exchangeRate.currency'
                ])
                    ->find(request()->get('id')),
                
                'approvals' => EntryApproval::with([
                    'approvalLevel',
                ])
                    ->whereHas('approvalLevel.users', function ($query) {
                        return $query->where('user_id', auth()->user()->id);
                    })
                    ->where('entry_id', request()->get('id'))
                    ->get(),
            ]);
        }
        
        if (request()->has('approval-history')) {
            return view('accounting.backend.pages.entries.approval-history', [
                'entry' => Entry::with([
                    'approvals.approvalLevel',
                    'fiscalYear',
                    'entryType',
                    'exchangeRate.currency'
                ])->findOrFail($id)
            ]);
        }
        
        if (request()->has('source')) {
            return view('accounting.backend.pages.entries.source', [
                'item' => EntryItem::findOrFail($id)
            ]);
        }
        
        if (request()->has('get-purchase-orders')) {
            $orders = PurchaseOrder::when($id > 0, function ($query) use ($id) {
                return $query->whereHas('relQuotation', function ($query) use ($id) {
                    return $query->where('supplier_id', $id);
                });
            })->get();
            $accountDefaultSettings = accountDefaultSettings();
            $purchaseOrders = '<option value="0" data-debit-account="' . $accountDefaultSettings['supplier_advance_account'] . '" data-credit-account="' . $accountDefaultSettings['supplier_advance_account'] . '" data-gross-amount="' . systemDoubleValue(0, 2) . '" data-paid-amount="' . systemDoubleValue(0, 2) . '" data-due-amount="' . systemDoubleValue(0, 2) . '" data-supplier-id="">Choose Purchase order</option>';
            if (isset($orders[0])) {
                foreach ($orders as $key => $order) {
                    $supplier = $order->relQuotation->relSuppliers;
                    $advance_account = (isset($supplier->advance_account_id) && $supplier->advance_account_id > 0 ? $supplier->advance_account_id : $accountDefaultSettings['supplier_advance_account']);
                    $payable_account = (isset($supplier->payable_account_id) && $supplier->payable_account_id > 0 ? $supplier->payable_account_id : $accountDefaultSettings['supplier_payable_account']);
                    $credit_account = $accountDefaultSettings['cash_in_hand_account'];
                    
                    $purchaseOrders .= '<option value="' . $order->id . '" data-advance-account="' . $advance_account . '" data-payable-account="' . $payable_account . '" data-credit-account="' . $credit_account . '" data-gross-amount="' . systemDoubleValue($order->gross_price, 2) . '" data-paid-amount="' . systemDoubleValue(0, 2) . '" data-due-amount="' . systemDoubleValue(0, 2) . '" data-supplier-id="' . $order->relQuotation->supplier_id . '">' . $order->reference_no . '&nbsp;|&nbsp;' . date('Y-m-d', strtotime($order->po_date)) . '</option>';
                }
            }
            
            return response()->json([
                'orders' => $purchaseOrders
            ]);
        }
        
        $entry = Entry::with([
            'entryType',
            'exchangeRate.currency',
            'fiscalYear',
            'items.chartOfAccount.accountGroup',
            'items.subLedger',
            'items.costCentre.profitCentre.company',
            'approvals.approvalLevel',
            'approvals.user',
            'attachments',
            'logs'
        ])->findOrFail($id);
        $systemCurrency = systemCurrency();
        $data = [
            'title' => $entry->entryType->name . ' Voucher #' . $entry->code,
            'entry' => $entry,
            'currency' => $entry->exchangeRate->currency->code,
            'systemCurrency' => $systemCurrency,
            'same' => ($entry->exchangeRate->currency_id == $systemCurrency->id ? true : false),
            'exchangeRate' => exchangeRate($entry->exchangeRate, $systemCurrency->id),
            'approvals' => auth()->user()->approvals->pluck('approval_level_id')->toArray()
        ];
        
        if (request()->has('reverse')) {
            if ($entry->is_manual == 0 || $entry->is_reversed == 1) {
                session()->flash('alert-type', 'error');
                session()->flash('message', 'This Transaction cannot be reversed!');
                return redirect('accounting/entries');
            }
            
            $fy = $entry->fiscalYear->id;
            $afy = getActiveFiscalYear($entry->items[0]->costCentre->profitCentre->company_id)->id;
            $ofy = FiscalYearOpening::where([
                'company_id' => $entry->items[0]->costCentre->profitCentre->company_id,
                'fiscal_year_id' => $fy,
                'is_approved' => 'approved',
                'status' => 'opened',
            ])->count();
            
            if (($fy != $afy) && $ofy == 0) {
                session()->flash('alert-type', 'error');
                session()->flash('message', 'This Transaction cannot be reversed, because the fiscal year is closed now.');
                return redirect('accounting/entries');
            }
            
            return view('accounting.backend.pages.entries.reverse', $data);
        }
        
        if (request()->has('short-details')) {
            return view('accounting.backend.pages.entries.short-details', $data);
        }
        
        if (request()->has('print')) {
            return viewMPDF('accounting.backend.pages.entries.entry-pdf-print', $data, $data['title'], $data['title'], 'a4', 'L');
        }
        
        if (request()->has('pdf')) {
            return downloadMPDF('accounting.backend.pages.entries.entry-pdf-print', $data, $data['title'], $data['title']);
        }
        
        return view('accounting.backend.pages.entries.entry', $data);
    }
    
    public function edit($id)
    {
        $entry = Entry::with([
            'entryType',
            'items.costCentre.profitCentre.company',
            'exchangeRate.currency'
        ])->findOrFail($id);
        if (auth()->user()->hasPermissionTo('entry-edit') && $entry->is_manual == 1 && $entry->is_reversed == 0 && $entry->is_approved != 'approved' && $entry->created_by == auth()->user()->id) {
            
            $company = Company::has('profitCentres.costCentres')
                ->where('id', $entry->items->first()->costCentre->profitCentre->company_id)
                ->whereHas('users', function ($query) {
                    return $query->where('user_id', auth()->user()->id);
                })->first();
            if (!isset($company->id)) {
                return redirect('accounting/entries');
            }
            
            $entryType = EntryType::where('id', $entry->entry_type_id)
                ->whereHas('companies.company.users', function ($query) {
                    return $query->where('user_id', auth()->user()->id);
                })->first();
            if (!isset($entryType->id)) {
                return redirect('accounting/entries');
            }
            
            $accountDefaultSettings = accountDefaultSettings();
            $all = getAllGroupAndLedgers($entry->entryType->id, true, [], [$company->id]);
            $getActiveFiscalYear = getActiveFiscalYear($company->id);
            
            $data = [
                'title' => 'Edit ' . $entry->entryType->name . ' Entry #' . $entry->code,
                'entry' => $entry,
                'accountDefaultSettings' => $accountDefaultSettings,
                'systemCurrency' => systemCurrency($accountDefaultSettings['currency_id'], $accountDefaultSettings),
                'company' => $company,
                'entryType' => $entryType,
                'tags' => Tag::all(),
                'fiscalYear' => $getActiveFiscalYear,
                'fiscalYears' => FiscalYear::whereHas('fiscalYearOpenings', function ($query) use ($company) {
                    return $query->where('status', 'opened')
                        ->where('is_approved', 'approved')
                        ->where('company_id', $company->id);
                })->get(),
                'currencyTypes' => CurrencyType::with(['currencies'])->get(),
                'costCentres' => getCostCentres(true, $company->id, true),
                'chartOfAccountsOptions' => chartOfAccountsOptions([], 0, 0, $all, false, 'yes', $entryType->id, [$company->id], true, getLedgerBalances($all, $company->id, $getActiveFiscalYear->id)),
                'advanceCategories' => AdvanceCategory::all()
            ];
            
            return view('accounting.backend.pages.entries.edit', $data);
        }
        
        return $this->backWithError("Transaction cannot be edited!");
    }
    
    public function update(Request $request, $id)
    {
        if (request()->has('approval')) {
            $request->validate([
                'status' => 'required',
            ]);
            
            DB::beginTransaction();
            try {
                $approval = EntryApproval::with([
                    'approvalLevel',
                    'entry.fiscalYear',
                    'entry.entryType',
                    'entry.exchangeRate.currency'
                ])->findOrFail(request()->get('id'));
                
                
                if ($approval->status != $request->status) {
                    $logs = !empty($approval->logs) ? json_decode($approval->logs, true) : [];
                    array_push($logs, '<strong>' . ucwords($request->status) . '</strong> by <strong>' . auth()->user()->name . '</strong> at <strong>' . date('Y-m-d g:i a') . '</strong>');
                    
                    $approval->status = $request->status;
                    $approval->user_id = auth()->user()->id;
                    $approval->logs = json_encode($logs);
                    $approval->save();
                    
                    if (EntryApproval::where('entry_id', $approval->entry_id)->where('status', '!=', 'approved')->count() == 0) {
                        $approval->entry->is_approved = 'approved';
                        $approval->entry->save();
                    } else {
                        $approval->entry->is_approved = 'pending';
                        $approval->entry->save();
                    }
                    
                    DB::commit();
                    return response()->json([
                        'success' => true,
                        'message' => "Approval Response has been posted."
                    ]);
                }
                
                return response()->json([
                    'success' => false,
                    'message' => "Please change Approval to Post."
                ]);
            } catch (\Throwable $th) {
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'message' => $th->getMessage()
                ]);
            }
        }
        
        if (request()->has('global-approval')) {
            $request->validate([
                'status' => 'required',
                'status.*' => 'required',
            ]);
            
            DB::beginTransaction();
            try {
                $approvals = EntryApproval::with([
                    'approvalLevel',
                    'entry.fiscalYear',
                    'entry.entryType',
                    'entry.exchangeRate.currency'
                ])
                    ->whereHas('approvalLevel.users', function ($query) {
                        return $query->where('user_id', auth()->user()->id);
                    })
                    ->where('entry_id', request()->get('id'))
                    ->get();
                if (isset($approvals[0])) {
                    foreach ($approvals as $approval) {
                        if ($approval->status != $request->status[$approval->id]) {
                            $logs = !empty($approval->logs) ? json_decode($approval->logs, true) : [];
                            array_push($logs, '<strong>' . ucwords($request->status[$approval->id]) . '</strong> by <strong>' . auth()->user()->name . '</strong> at <strong>' . date('Y-m-d g:i a') . '</strong>') . (!empty($request->notes[$approval->id]) ? ' with notes - ' . $request->notes[$approval->id] : '');
                            
                            $approval->status = $request->status[$approval->id];
                            $approval->user_id = auth()->user()->id;
                            $approval->logs = json_encode($logs);
                            $approval->save();
                            
                            if (EntryApproval::where('entry_id', $approval->entry_id)->where('status', '!=', 'approved')->count() == 0) {
                                $approval->entry->is_approved = 'approved';
                                $approval->entry->save();
                            } else {
                                $approval->entry->is_approved = 'pending';
                                $approval->entry->save();
                            }
                        }
                    }
                }
                
                DB::commit();
                return response()->json([
                    'success' => true,
                    'message' => "Approval Response has been posted."
                ]);
            } catch (\Throwable $th) {
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'message' => $th->getMessage()
                ]);
            }
        }
        
        if (request()->has('reverse')) {
            $entry = Entry::findOrFail($id);
            if ($entry->is_manual == 0 || $entry->is_reversed == 1) {
                return response()->json([
                    'success' => false,
                    'message' => "This Transaction cannot be reversed!"
                ]);
            }
            
            DB::beginTransaction();
            try {
                $items = [];
                if ($entry->items->count() > 0) {
                    foreach ($entry->items as $key => $item) {
                        array_push($items, [
                            'cost_centre_id' => $item->cost_centre_id,
                            'chart_of_account_id' => $item->chart_of_account_id,
                            'sub_ledger_id' => $item->sub_ledger_id,
                            'debit' => ($item->debit_credit == 'C' ? $item->amount : 0),
                            'credit' => ($item->debit_credit == 'D' ? $item->amount : 0),
                            'amount' => $item->amount,
                            'debit_credit' => ($item->debit_credit == 'C' ? 'D' : 'C'),
                            'narration' => $request->narration[$item->id],
                        ]);
                    }
                }
                
                $fiscalYear = FiscalYear::with([
                    'fiscalYearOpenings'
                ])->findOrFail($entry->fiscal_year_id);
                
                $newEntry = saveLedgerEntries($entry->entry_type_id, $entry->date . ' ' . $entry->time, 1, $entry->number, $request->notes, $items, $entry->exchange_rate_id, $entry->is_advance, $entry->advance_category_id, $entry->is_manual, $entry->items[0]->costCentre->profitCentre->company_id, $fiscalYear);
                
                if (isset($newEntry['success']) && $newEntry['success']) {
                    $entry->is_reversed = 1;
                    $entry->save();
                    
                    DB::commit();
                    return response()->json([
                        'success' => true,
                    ]);
                } else {
                    DB::rollback();
                    return response()->json([
                        'success' => false,
                        'message' => $newEntry['message']
                    ]);
                }
            } catch (\Throwable $th) {
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'message' => $th->getMessage()
                ]);
            }
        }
        
        $request->validate([
            'fiscal_year_id' => 'required',
            'cost_centre_id' => 'required',
            'cost_centre_id.*' => 'required',
            'chart_of_account_id' => 'required',
            'chart_of_account_id.*' => 'required',
        ]);
        
        if ($this->amount($request)['debit'] <= 0 || $this->amount($request)['credit'] <= 0) {
            return response()->json([
                'success' => false,
                'message' => "Please add some Debit or Credit amount"
            ]);
        }
        
        if ($this->amount($request)['debit'] != $this->amount($request)['credit']) {
            return response()->json([
                'success' => false,
                'message' => "Debit & Credit amount must be same"
            ]);
        }
        
        
        DB::beginTransaction();
        try {
            $fiscalYear = FiscalYear::with([
                'fiscalYearOpenings'
            ])->findOrFail($request->fiscal_year_id);
            if ((strtotime(date('Y-m-d', strtotime($request->datetime))) < strtotime($fiscalYear->start)) || (strtotime(date('Y-m-d', strtotime($request->datetime))) > strtotime($fiscalYear->end))) {
                return response()->json([
                    'success' => false,
                    'message' => "Datetime is not in the range of the fiscal year period."
                ]);
            }
            
            $entry = Entry::with([
                'entryType',
                'items.costCentre.profitCentre.company',
                'exchangeRate.currency'
            ])->findOrFail($id);
            
            $exchangeRate = \App\Models\PmsModels\Accounts\ExchangeRate::findOrFail(getExchangeRates($request->currency_id, date('Y-m-d', strtotime($request->datetime)), date('H:i:s', strtotime($request->datetime)))['rate']->id);
            $systemCurrency = systemCurrency()->id;
            $systemRate = isset(json_decode($exchangeRate->rates, true)[$systemCurrency]) ? json_decode($exchangeRate->rates, true)[$systemCurrency]['rate'] : 1;
            
            $items = [];
            if (isset($request->chart_of_account_id[0])) {
                foreach ($request->chart_of_account_id as $key => $chart_of_account_id) {
                    array_push($items, [
                        'entry_id' => $entry->id,
                        'cost_centre_id' => $request->cost_centre_id[$key],
                        'chart_of_account_id' => $request->chart_of_account_id[$key],
                        'sub_ledger_id' => isset($request->sub_ledgers[$key]) ? $request->sub_ledgers[$key] : null,
                        'amount' => ($request->debit[$key] > 0 ? $request->debit[$key] : $request->credit[$key]),
                        'reporting_amount' => ($request->debit[$key] > 0 ? $request->debit[$key] : $request->credit[$key]) * $systemRate,
                        'debit_credit' => ($request->debit[$key] > 0 ? 'D' : 'C'),
                        'narration' => $request->narration[$key],
                    ]);
                }
            }
            
            $entry->fiscal_year_id = $request->fiscal_year_id;
            $entry->number = $request->number;
            $entry->date = date('Y-m-d', strtotime($request->datetime));
            $entry->time = date('H:i:s', strtotime($request->datetime));
            $entry->exchange_rate_id = $exchangeRate->id;
            $entry->debit = collect($items)->where('debit_credit', 'D')->sum('amount');
            $entry->credit = collect($items)->where('debit_credit', 'C')->sum('amount');
            $entry->reporting_debit = collect($items)->where('debit_credit', 'D')->sum('reporting_amount');
            $entry->reporting_credit = collect($items)->where('debit_credit', 'C')->sum('reporting_amount');
            $entry->notes = $request->notes;
            $entry->save();
            
            if ($entry->save()) {
                EntryItem::where('entry_id', $entry->id)->delete();
                EntryItem::insert($items);
                
                $attachments = EntryAttachment::where('entry_id', $entry->id)->whereNotin('id', isset($request->old_files[0]) ? $request->old_files : [])->get();
                if (isset($attachments[0])) {
                    foreach ($attachments as $attachment) {
                        $this->fileDelete($attachment->path);
                        $attachment->delete();
                    }
                }
                
                $attachments = [];
                if ($request->hasFile('files')) {
                    foreach ($request->file('files') as $key => $file) {
                        $fileInfo = $this->fileInfo($file);
                        array_push($attachments, [
                            'entry_id' => $entry->id,
                            'name' => $fileInfo['name'],
                            'type' => $fileInfo['type'],
                            'size' => $fileInfo['size'],
                            'path' => $this->fileUpload($file, 'upload/entry-attachments'),
                        ]);
                    }
                }
                if (isset($attachments[0])) {
                    EntryAttachment::insert($attachments);
                }
                
                \App\Models\PmsModels\Accounts\EntryApproval::where('entry_id', $entry->id)->delete();
                $approvalLevels = \App\Models\PmsModels\Accounts\ApprovalLevel::whereHas('chartOfAccounts', function ($query) use ($items) {
                    return $query->whereIn('chart_of_account_id', collect($items)->pluck('chart_of_account_id')->toArray());
                })->get();
                if (isset($approvalLevels[0])) {
                    $levels = [];
                    foreach ($approvalLevels as $level) {
                        array_push($levels, [
                            'entry_id' => $entry->id,
                            'approval_level_id' => $level->id,
                            'status' => ($entry->is_manual == 1 ? 'pending' : 'approved'),
                            'logs' => json_encode([]),
                        ]);
                    }
                    \App\Models\PmsModels\Accounts\EntryApproval::insert($levels);
                } else {
                    $entry->is_approved = 'approved';
                    $entry->save();
                }
                
                DB::commit();
                session()->flash('alert-type', 'success');
                session()->flash('message', "Transaction has been updated successfully.");
                return response()->json([
                    'success' => true,
                ]);
            } else {
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'message' => "Something went Wrong!"
                ]);
            }
        } catch (\Throwable $th) {
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }
    
    public function destroy($id)
    {
        try {
            Entry::find($id)->delete();
            return response()->json([
                'success' => true,
                'message' => "Entry has been Deleted!"
            ]);
        } catch (\Throwable $th) {
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }
    
    public function amount($request)
    {
        return [
            'debit' => array_sum($request->debit),
            'credit' => array_sum($request->credit),
        ];
    }
    
    public function getDueAmount($purchase_order_id)
    {
        $purchaseOrder = PurchaseOrder::find($purchase_order_id);
        return getPODueAmount($purchaseOrder);
    }
    
    /* $entries = Entry::with([
        // 'purchaseOrder',
        'exchangeRate.currency',
        'entryType',
        // 'items.costCentre.profitCentre.company',
        // 'approvals.approvalLevel'
    ])
    ->when(!datatableOrdering(), function ($query) {
        return $query->orderby('id', 'desc');
    })

    ->whereHas('items.costCentre.profitCentre.company.users', function($query){
        return $query->where('user_id', auth()->user()->id);
    })
    ->whereHas('items.chartOfAccount.users', function($query){
        return $query->where('user_id', auth()->user()->id);
    })
    ->whereHas('entryType.companies.company.users', function($query){
        return $query->where('user_id', auth()->user()->id);
    })

    ->when(request()->get('company_id') > 0, function($query){
        return $query->whereHas('items.costCentre.profitCentre', function($query){
            return $query->where('company_id', request()->get('company_id'));
        });
    })
    ->when(request()->get('entry_type_id') > 0, function($query){
        return $query->where('entry_type_id', request()->get('entry_type_id'));
    })
    ->when(request()->get('fiscal_year_id') > 0, function($query){
        return $query->where('fiscal_year_id', request()->get('fiscal_year_id'));
    })
    ->when(request()->get('currency_id') > 0, function($query){
        return $query->whereHas('exchangeRate', function($query){
            return $query->where('currency_id', request()->get('currency_id'));
        });
    })
    ->when(!empty(request()->get('from')) && strtotime(request()->get('from')) > 0, function($query){
        return $query->where('date', '>=', request()->get('from'));
    })
    ->when(!empty(request()->get('to')) && strtotime(request()->get('to')) > 0, function($query){
        return $query->where('date', '<=', request()->get('to'));
    })
    
    ->when(request()->get('debit_ledger_id') > 0, function($query){
        return $query->whereHas('items', function($query){
            return $query->where('chart_of_account_id', request()->get('debit_ledger_id'))
                         ->where('debit_credit', 'D');
        });
    })
    ->when(request()->get('debit_sub_ledger_id') > 0, function($query){
        return $query->whereHas('items', function($query){
            return $query->where('sub_ledger_id', request()->get('debit_sub_ledger_id'))
                         ->where('debit_credit', 'D');
        });
    })

    ->when(request()->get('credit_ledger_id') > 0, function($query){
        return $query->whereHas('items', function($query){
            return $query->where('chart_of_account_id', request()->get('credit_ledger_id'))
                         ->where('debit_credit', 'C');
        });
    })
    ->when(request()->get('credit_sub_ledger_id') > 0, function($query){
        return $query->whereHas('items', function($query){
            return $query->where('sub_ledger_id', request()->get('credit_sub_ledger_id'))
                         ->where('debit_credit', 'C');
        });
    })

    ->when(!empty(request()->get('status')), function($query){
        return $query->when(request()->get('status') == 'approved', function($query){
            return $query->where('is_approved', 'approved');
        })
        ->when(request()->get('status') != 'approved', function($query){
            return $query->whereHas('approvals.approvalLevel', function($query){
                return $query->where('name', 'LIKE', '%'.explode('-', request()->get('status'))[0].'%');
            })
            ->whereHas('approvals', function($query){
                return $query->where('status', 'LIKE', '%'.(isset(explode('-', request()->get('status'))[1]) ? explode('-', request()->get('status'))[1] : '').'%');
            });
        });
    });

    if(request()->has('collection')){
        return $entries->get();
    }
    */
    
    // ->addColumn('company', function ($entry) {
    //     return implode(', ', array_unique($entry->items->pluck('costCentre.profitCentre.company.code')->toArray()));
    // })
    // ->filterColumn('company', function ($query, $keyword) {
    //     return $query->whereHas('items.costCentre.profitCentre.company', function ($query) use ($keyword) {
    //         $query->where('code', 'LIKE', '%' . $keyword . '%')
    //               ->orWhere('name', 'LIKE', '%' . $keyword . '%');
    //     });
    // })
    // ->orderColumn('company', function ($query, $order) {
    //     return pleaseSortMe($query, $order, EntryItem::select('companies.code')
    //         ->join('cost_centres', 'cost_centres.id', '=', 'entry_items.cost_centre_id')
    //         ->join('profit_centres', 'profit_centres.id', '=', 'cost_centres.profit_centre_id')
    //         ->join('companies', 'companies.id', '=', 'profit_centres.company_id')
    //         ->whereColumn('entry_items.entry_id', 'entries.id')
    //         ->take(1)
    //     );
    // })
    
    // ->addColumn('type', function ($entry) {
    //     return $entry->entryType ? $entry->entryType->name : '';
    // })
    // ->filterColumn('type', function ($query, $keyword) {
    //     return $query->whereHas('entryType', function ($query) use ($keyword) {
    //         $query->where('name', 'LIKE', '%' . $keyword . '%');
    //     });
    // })
    // ->orderColumn('type', function ($query, $order) {
    //     return pleaseSortMe($query, $order, EntryType::select('entry_types.name')
    //         ->whereColumn('entry_types.id', 'entries.entry_type_id')
    //         ->take(1)
    //     );
    // })
    
    // ->addColumn('fiscal_year', function($entry){
    //     return $entry->fiscalYear ? $entry->fiscalYear->title : '';
    // })
    // ->filterColumn('fiscal_year', function ($query, $keyword) {
    //     return $query->whereHas('fiscalYear', function ($query) use ($keyword) {
    //         $query->where('title', 'LIKE', '%' . $keyword . '%');
    //     });
    // })
    // ->orderColumn('fiscal_year', function ($query, $order) {
    //     return pleaseSortMe($query, $order, FiscalYear::select('fiscal_years.title')
    //         ->whereColumn('fiscal_years.id', 'entries.fiscal_year_id')
    //         ->take(1)
    //     );
    // })
    
    // ->addColumn('debit_ledger', function ($entry) {
    //     return '<a class="text-primary" onclick="getShortDetails($(this))" data-id="' . ($entry->id) . '" data-entry-type="' . ($entry->entryType->name) . '" data-code="' . ($entry->code) . '">
    //             <p style="width: 150px;white-space: normal">' . implode(', ', array_unique($entry->items->where('debit_credit', 'D')->pluck('chartOfAccount.code')->toArray())) . '</p>
    //         </a>';
    // })
    // ->filterColumn('debit_ledger', function ($query, $keyword) {
    //     return $query->whereHas('items.chartOfAccount', function ($query) use ($keyword) {
    //         $query->where('code', 'LIKE', '%' . $keyword . '%');
    //     })
    //     ->whereHas('items', function ($query) use ($keyword) {
    //         $query->where('debit_credit', 'D');
    //     });
    // })
    // ->orderColumn('debit_ledger', function ($query, $order) {
    //     return pleaseSortMe($query, $order, EntryItem::select('chart_of_accounts.code')
    //         ->join('chart_of_accounts', 'chart_of_accounts.id', '=', 'entry_items.chart_of_account_id')
    //         ->whereColumn('entry_items.entry_id', 'entries.id')
    //         ->take(1)
    //     );
    // })
    // ->addColumn('credit_ledger', function ($entry) {
    //     return '<a class="text-primary" onclick="getShortDetails($(this))" data-id="' . ($entry->id) . '" data-entry-type="' . ($entry->entryType->name) . '" data-code="' . ($entry->code) . '">
    //             <p style="width: 150px;white-space: normal">' . implode(', ', array_unique($entry->items->where('debit_credit', 'C')->pluck('chartOfAccount.code')->toArray())) . '</p>
    //         </a>';
    // })
    // ->filterColumn('credit_ledger', function ($query, $keyword) {
    //     return $query->whereHas('items.chartOfAccount', function ($query) use ($keyword) {
    //         $query->where('code', 'LIKE', '%' . $keyword . '%');
    //     })
    //         ->whereHas('items', function ($query) use ($keyword) {
    //             $query->where('debit_credit', 'C');
    //         });
    // })
    // ->orderColumn('credit_ledger', function ($query, $order) {
    //     return pleaseSortMe($query, $order, EntryItem::select('chart_of_accounts.code')
    //         ->join('chart_of_accounts', 'chart_of_accounts.id', '=', 'entry_items.chart_of_account_id')
    //         ->whereColumn('entry_items.entry_id', 'entries.id')
    //         ->take(1)
    //     );
    // })
}
