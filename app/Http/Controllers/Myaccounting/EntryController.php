<?php
bolt_decrypt( __FILE__ , 'E6CVZz'); return 0;
##!!!##