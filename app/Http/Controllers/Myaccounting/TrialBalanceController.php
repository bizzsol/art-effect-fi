<?php
bolt_decrypt( __FILE__ , 'Hzo8PG'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use \App\Models\PmsModels\Accounts\Company;
use \App\Models\PmsModels\Accounts\ProfitCentre;
use \App\Models\PmsModels\Accounts\CostCentre;
use \App\Models\PmsModels\Accounts\FiscalYear;
use \App\Models\PmsModels\Accounts\EntryType;
use \App\Models\PmsModels\Accounts\Tag;
use \App\Models\PmsModels\Accounts\AccountGroup;
use \App\Models\PmsModels\Accounts\ChartOfAccount;
use \App\Models\PmsModels\Accounts\Entry;
use \App\Models\PmsModels\Accounts\EntryItem;

use \App\Models\PmsModels\Accounts\FiscalYearClosing;
use \App\Models\PmsModels\Accounts\FiscalYearClosingLedger;

use \App\Models\PmsModels\Accounts\CurrencyType;
use \App\Models\PmsModels\Accounts\Currency;
use \App\Models\PmsModels\Accounts\ExchangeRate;

use App, DB;
use Illuminate\Support\Facades\Auth;

class TrialBalanceController extends Controller
{
    public function index(Request $request)
    {
        $title = 'Report - Trial Balance';

        try {
            $fiscalYear = getActiveFiscalYear();
            $accountDefaultSettings = accountDefaultSettings();
            $systemCurrency = systemCurrency();
            
            $trialBalance = '';
            $groupWise = false;
            if(request()->has('report_type')){
                $currency_id = request()->has('currency_id') ? request()->get('currency_id') : 0;
                $profit_centre_id = request()->has('profit_centre_id') ? request()->get('profit_centre_id') : 0;
                $cost_centre_id = request()->has('cost_centre_id') ? request()->get('cost_centre_id') : 0;
                $fiscalYear = FiscalYear::findOrFail(request()->get('fiscal_year_id'));
                $all = getAllGroupAndLedgers();
                
                $rate = 1;
                if($systemCurrency->id != $currency_id){
                    $rates = getExchangeRates($systemCurrency->id);
                    $rate = isset($rates['rates'][$currency_id]['rate']) ? $rates['rates'][$currency_id]['rate'] : 1;
                }

                $openingDebitEntryItems = EntryItem::join('entries', 'entries.id', '=', 'entry_items.entry_id')
                ->join('cost_centres', 'cost_centres.id', '=', 'entry_items.cost_centre_id')
                ->join('profit_centres', 'profit_centres.id', '=', 'cost_centres.profit_centre_id')

                ->join('chart_of_accounts', 'chart_of_accounts.id', '=', 'entry_items.chart_of_account_id')
                ->join('account_groups', 'account_groups.id', '=', 'chart_of_accounts.account_group_id')

                ->where('entries.is_approved', 'approved')
                ->where('entries.date', '<', $request->from)
                ->where('entries.fiscal_year_id', $fiscalYear->id)
                ->where('profit_centres.company_id', request()->get('company_id'))

                ->when($profit_centre_id > 0, function($query) use($profit_centre_id){
                    return $query->where('cost_centres.profit_centre_id', $profit_centre_id);
                })
                ->when($cost_centre_id > 0, function($query) use($cost_centre_id){
                    return $query->where('entry_items.cost_centre_id', $cost_centre_id);
                })

                ->where('entry_items.debit_credit', 'D')

                ->groupBy('entry_items.chart_of_account_id')

                ->get([
                    'entry_items.chart_of_account_id',
                    DB::raw('sum(entry_items.reporting_amount) as reporting_amount')
                ]);

                $openingCreditEntryItems = EntryItem::join('entries', 'entries.id', '=', 'entry_items.entry_id')
                ->join('cost_centres', 'cost_centres.id', '=', 'entry_items.cost_centre_id')
                ->join('profit_centres', 'profit_centres.id', '=', 'cost_centres.profit_centre_id')

                ->join('chart_of_accounts', 'chart_of_accounts.id', '=', 'entry_items.chart_of_account_id')
                ->join('account_groups', 'account_groups.id', '=', 'chart_of_accounts.account_group_id')

                ->where('entries.is_approved', 'approved')
                ->where('entries.date', '<', $request->from)
                ->where('entries.fiscal_year_id', $fiscalYear->id)
                ->where('profit_centres.company_id', request()->get('company_id'))

                ->when($profit_centre_id > 0, function($query) use($profit_centre_id){
                    return $query->where('cost_centres.profit_centre_id', $profit_centre_id);
                })
                ->when($cost_centre_id > 0, function($query) use($cost_centre_id){
                    return $query->where('entry_items.cost_centre_id', $cost_centre_id);
                })
                
                ->where('entry_items.debit_credit', 'C')

                ->groupBy('entry_items.chart_of_account_id')

                ->get([
                    'entry_items.chart_of_account_id',
                    DB::raw('sum(entry_items.reporting_amount) as reporting_amount')
                ]);

                $debitEntryItems = EntryItem::join('entries', 'entries.id', '=', 'entry_items.entry_id')
                ->join('cost_centres', 'cost_centres.id', '=', 'entry_items.cost_centre_id')
                ->join('profit_centres', 'profit_centres.id', '=', 'cost_centres.profit_centre_id')

                ->join('chart_of_accounts', 'chart_of_accounts.id', '=', 'entry_items.chart_of_account_id')
                ->join('account_groups', 'account_groups.id', '=', 'chart_of_accounts.account_group_id')

                ->where('entries.is_approved', 'approved')
                ->where('entries.date', '>=', $request->from)
                ->where('entries.date', '<=', $request->to)
                ->where('entries.fiscal_year_id', $fiscalYear->id)
                ->where('profit_centres.company_id', request()->get('company_id'))
                ->where('entry_items.debit_credit', 'D')

                ->groupBy('entry_items.chart_of_account_id')

                ->get([
                    'entry_items.chart_of_account_id',
                    DB::raw('sum(entry_items.reporting_amount) as reporting_amount')
                ]);

                $creditEntryItems = EntryItem::join('entries', 'entries.id', '=', 'entry_items.entry_id')
                ->join('cost_centres', 'cost_centres.id', '=', 'entry_items.cost_centre_id')
                ->join('profit_centres', 'profit_centres.id', '=', 'cost_centres.profit_centre_id')

                ->join('chart_of_accounts', 'chart_of_accounts.id', '=', 'entry_items.chart_of_account_id')
                ->join('account_groups', 'account_groups.id', '=', 'chart_of_accounts.account_group_id')

                ->where('entries.is_approved', 'approved')
                ->where('entries.date', '>=', $request->from)
                ->where('entries.date', '<=', $request->to)
                ->where('entries.fiscal_year_id', $fiscalYear->id)
                ->where('profit_centres.company_id', request()->get('company_id'))
                ->where('entry_items.debit_credit', 'C')

                ->groupBy('entry_items.chart_of_account_id')

                ->get([
                    'entry_items.chart_of_account_id',
                    DB::raw('sum(entry_items.reporting_amount) as reporting_amount')
                ]);

                $carryForwarded = FiscalYearClosingLedger::join('fiscal_year_closings', 'fiscal_year_closings.id', '=', 'fiscal_year_closing_ledgers.fiscal_year_closing_id')

                ->join('chart_of_accounts', 'chart_of_accounts.id', '=', 'fiscal_year_closing_ledgers.chart_of_account_id')
                ->join('account_groups', 'account_groups.id', '=', 'chart_of_accounts.account_group_id')
                
                ->where('fiscal_year_closings.company_id', request()->get('company_id'))
                ->where('fiscal_year_closings.to_fiscal_year_id', $fiscalYear->id)
                
                ->groupBy('fiscal_year_closing_ledgers.chart_of_account_id')

                ->get([
                    'fiscal_year_closing_ledgers.chart_of_account_id',
                    DB::raw('sum(fiscal_year_closing_ledgers.carry_forwarding_amount) as carry_forwarding_amount')
                ]);

                $groupWise = ($request->group_wise == 1);
                if($groupWise){
                    $groups = AccountGroup::doesntHave('parent')->get();
                    if($groups->count() > 0){
                        foreach($groups as $key => $group){
                            $trialBalance .= trialbalance(request()->get('company_id'), $group, request()->get('from'), request()->get('to'), 0, !(request()->has('report_type') && request()->get('report_type') == 'pdf'), ['D' => $openingDebitEntryItems, 'C' => $openingCreditEntryItems], ['D' => $debitEntryItems, 'C' => $creditEntryItems], $all, $carryForwarded, $rate);
                        }
                    }
                }else{
                    $accounts = ChartOfAccount::with([
                        'accountGroup.accountClass',
                        'exchangeRate'
                    ])->orderBy('code', 'asc')->get();
                    $balances = [];
                    if($accounts->count() > 0){
                        foreach($accounts as $key => $account){
                            $trialbalanceLedger = trialbalanceLedger(request()->get('company_id'), $account, request()->get('from'), request()->get('to'), !(request()->has('report_type') && request()->get('report_type') == 'pdf'), ['D' => $openingDebitEntryItems, 'C' => $openingCreditEntryItems], ['D' => $debitEntryItems, 'C' => $creditEntryItems], $all, $carryForwarded, $rate);
                            $trialBalance .= $trialbalanceLedger['data'];

                            $balances['opening_balance'][] = $trialbalanceLedger['balance']['opening_balance'];
                            $balances['debit'][] = $trialbalanceLedger['balance']['debit'];
                            $balances['credit'][] = $trialbalanceLedger['balance']['credit'];
                            $balances['balance'][] = $trialbalanceLedger['balance']['balance'];
                        }

                        $trialBalance .= '<tr>
                            <td colspan="2"><strong>Total:</strong></td>
                            <td class="opening_balance_column" style="text-align: right"><strong>'.systemMoneyFormat(array_sum($balances['opening_balance'])).'</strong></td>
                            <td class="debit_column" style="text-align: right"><strong>'.systemMoneyFormat(array_sum($balances['debit'])).'</strong></td>
                            <td class="credit_column" style="text-align: right"><strong>'.systemMoneyFormat(array_sum($balances['credit'])).'</strong></td>
                            <td class="closing_balance_column" style="text-align: right"><strong>'.systemMoneyFormat(array_sum($balances['balance'])).'</strong></td>
                        </tr>';
                    }
                }
            }

            $companies = Company::has('profitCentres.costCentres')
            ->whereHas('users', function($query){
                return $query->where('user_id', auth()->user()->id);
            })
            ->get();

            $data = [
                'title' => $title,
                'fiscalYear' => $fiscalYear,
                'groupWise' => $groupWise,
                'accountDefaultSettings' => $accountDefaultSettings,
                'companies' => $companies,
                'profitCentres' => ProfitCentre::where('company_id', $companies->first()->id)->orderBy('code', 'asc')->get(),
                'fiscalYears' => FiscalYear::all(),
                'currencyTypes' => CurrencyType::with(['currencies'])->get(),
                'currency' => Currency::find(request()->get('currency_id')),
                'trialBalance' => $trialBalance,
            ];

            if(request()->has('report_type') && request()->get('report_type') == 'pdf'){
                return viewMPDF('accounting.backend.pages.reports.trialBalance.pdf', $data, $title, $title);
            }

            if(request()->has('report_type') && request()->get('report_type') == 'report'){
                return view('accounting.backend.pages.reports.trialBalance.report', $data);
            }

            return view('accounting.backend.pages.reports.trialBalance.index', $data);
        }catch (\Throwable $th){
            if(request()->has('report_type') && request()->get('report_type') == 'report'){
                return $th->getMessage();
            }

            return $this->backWithError($th->getMessage());
        }
    }

    public function onlyWithClosingBalance()
    {
        $title = 'Report - Trial Balance (Balance)';

        try {
            $fiscalYear = getActiveFiscalYear();
            $accountDefaultSettings = accountDefaultSettings();
            
            $trialBalance = '';
            if(request()->has('report_type')){
                $currency_id = request()->has('currency_id') ? request()->get('currency_id') : 0;
                $fiscalYear = FiscalYear::findOrFail(request()->get('fiscal_year_id'));
                $all = getAllGroupAndLedgers();

                $entryItems = EntryItem::with([
                    'entry.exchangeRate'
                ])
                ->whereHas('entry', function($query){
                    return $query->where('is_approved', 'approved');
                })
                ->whereHas('entry', function($query) use($fiscalYear){
                    return $query->where('date', '>=', $fiscalYear->start);
                })
                ->whereHas('entry', function($query) use($fiscalYear){
                    return $query->where('date', '<=', $fiscalYear->end);
                })
                ->whereHas('entry', function($query){
                    return $query->where('fiscal_year_id', request()->get('fiscal_year_id'));
                })
                ->whereHas('costCentre.profitCentre', function($query){
                    return $query->where('company_id', request()->get('company_id'));
                })
                ->get();

                $carryForwarded = FiscalYearClosing::with([
                    'exchangeRate',
                    'ledgers'
                ])
                ->where('company_id', request()->get('company_id'))
                ->where('to_fiscal_year_id', $fiscalYear->id)
                ->get();

                $exchangeRates = ExchangeRate::where('currency_id', '!=', $currency_id)
                ->whereHas('entries.items', function($query) use($entryItems){
                    return $query->whereIn('id', $entryItems->pluck('id')->toArray());
                })
                ->whereHas('entries', function($query){
                    return $query->where('is_approved', 'approved');
                })
                ->get();

                $groupWise = false;
                if($groupWise){
                    $groups = AccountGroup::doesntHave('parent')->get();
                    if($groups->count() > 0){
                        foreach($groups as $key => $group){
                            $trialBalance .= trialbalanceOnlyClosingBalance($group, request()->get('from'), request()->get('to'), $currency_id, 0, !(request()->has('report_type') && request()->get('report_type') == 'pdf'), $exchangeRates, $entryItems, $all, request()->get('company_id'), request()->get('fiscal_year_id'), $carryForwarded);
                        }
                    }
                }else{
                    $accounts = ChartOfAccount::with([
                        'accountGroup.accountClass'
                    ])->orderBy('code', 'asc')->get();
                    $balances = [];
                    if($accounts->count() > 0){
                        foreach($accounts as $key => $account){
                            $trialbalanceLedger = trialbalanceOnlyClosingBalanceLedger($account, request()->get('from'), request()->get('to'), $currency_id, !(request()->has('report_type') && request()->get('report_type') == 'pdf'), $exchangeRates, $entryItems, $all, request()->get('company_id'), request()->get('fiscal_year_id'), $carryForwarded);
                            $trialBalance .= $trialbalanceLedger['data'];

                            $balances['opening_balance'][] = $trialbalanceLedger['balance']['opening_balance'];
                            $balances['balance'][] = $trialbalanceLedger['balance']['balance'];
                        }

                        $trialBalance .= '<tr>
                            <td colspan="2"><strong>Total:</strong></td>
                            <td class="opening_balance_column" style="text-align: right"><strong>'.systemMoneyFormat(array_sum($balances['opening_balance'])).'</strong></td>
                            <td class="closing_balance_column" style="text-align: right"><strong>'.systemMoneyFormat(array_sum($balances['balance'])).'</strong></td>
                        </tr>';
                    }
                }
            }

            $data = [
                'title' => $title,
                'fiscalYear' => $fiscalYear,
                'accountDefaultSettings' => $accountDefaultSettings,
                'companies' => Company::has('profitCentres.costCentres')->get(),
                'fiscalYears' => FiscalYear::all(),
                'currencyTypes' => CurrencyType::with(['currencies'])->get(),
                'currency' => Currency::find(request()->get('currency_id')),
                'trialBalance' => $trialBalance,
            ];

            if(request()->has('report_type') && request()->get('report_type') == 'pdf'){
                return viewMPDF('accounting.backend.pages.reports.trialBalance.onlyWithClosingBalancePDF', $data, $title, $title);
            }

            if(request()->has('report_type') && request()->get('report_type') == 'report'){
                return view('accounting.backend.pages.reports.trialBalance.onlyWithClosingBalanceReport', $data);
            }

            return view('accounting.backend.pages.reports.trialBalance.onlyWithClosingBalance', $data);
        }catch (\Throwable $th){
            if(request()->has('report_type') && request()->get('report_type') == 'report'){
                return $th->getMessage();
            }

            return $this->backWithError($th->getMessage());
        }
    }
}
