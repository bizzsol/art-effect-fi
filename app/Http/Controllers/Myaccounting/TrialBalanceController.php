<?php
bolt_decrypt( __FILE__ , 'RGL8zT'); return 0;
##!!!##