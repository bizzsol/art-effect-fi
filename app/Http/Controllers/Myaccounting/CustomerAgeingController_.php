<?php
bolt_decrypt( __FILE__ , 'dgP8Ca'); return 0;
##!!!##