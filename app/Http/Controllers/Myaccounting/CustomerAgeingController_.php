<?php
bolt_decrypt( __FILE__ , 'jmAKFW'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use \App\Models\PmsModels\Accounts\Company;
use \App\Models\PmsModels\Accounts\ProfitCentre;
use \App\Models\PmsModels\Accounts\CostCentre;
use \App\Models\PmsModels\Accounts\FiscalYear;
use \App\Models\PmsModels\Accounts\EntryType;
use \App\Models\PmsModels\Accounts\Tag;
use \App\Models\PmsModels\Accounts\ChartOfAccount;
use \App\Models\PmsModels\Accounts\SubLedger;
use \App\Models\PmsModels\Accounts\Entry;
use \App\Models\PmsModels\Accounts\EntryItem;
use \App\Models\PmsModels\Accounts\EntryLog;

use \App\Models\PmsModels\Accounts\CurrencyType;
use \App\Models\PmsModels\Accounts\Currency;
use \App\Models\PmsModels\Accounts\ExchangeRate;
use \App\Models\PmsModels\Accounts\FiscalYearClosing;
use \App\Models\PmsModels\Accounts\FiscalYearClosingLedger;

use App,DB;
use Illuminate\Support\Facades\Auth;

class CustomerAgeingController extends Controller
{
    public function getCompanies($company_id, $profit_centre_id = 0, $code = null, $pagination = false, $page = false)
    {
        $logs = EntryLog::whereHas('entry.items.costCentre.profitCentre', function($query) use($company_id){
            return  $query->where('company_id', $company_id);
        })
        ->when($profit_centre_id > 0, function($query) use($profit_centre_id){
            return $query->whereHas('entry.items.costCentre', function($query) use($profit_centre_id){
                return  $query->where('profit_centre_id', $profit_centre_id);
            });
        })
        ->when(!empty($code), function($query) use($code){
            return $query->whereJsonContains('value', ['company_code' => $code]);
        })
        ->select(DB::raw("JSON_EXTRACT(value, '$[*].company_code') as code, JSON_EXTRACT(value, '$[*].company_name') as name"))
        ->groupBy('code');

        if($pagination){
            $number = 50;
            $logs = $page ? $logs->paginate($number, ['*'], 'page', $page)->withQueryString() : $logs->paginate($number)->withQueryString();
        }else{
            $logs = $logs->get();
        }

        return [
            'data' => array_values(array_filter(array_map(function($array){
                if(isset($array['code']) && isset($array['name'])){
                    $decodedCode = json_decode($array['code']);
                    $decodedName = json_decode($array['name']);
                    return [
                        'code' => isset($decodedCode[0]) ? $decodedCode[0] : '',
                        'name' => isset($decodedName[0]) ? $decodedName[0] : ''
                    ];
                }
            }, collect($pagination ? $logs->items() : $logs)->toArray()))),
            'logs' => $logs
        ];
    }

    public function index()
    {
        if(request()->has('get-companies')){
            return $this->getCompanies(request()->get('company_id'), request()->get('profit_centre_id'));
        }

        $title = 'Report - Customer Ageing';

        $company_id = request()->has('company_id') ? request()->get('company_id') : 0;
        $profit_centre_id = request()->has('profit_centre_id') ? request()->get('profit_centre_id') : 0;
        $customer_code = request()->has('customer_code') ? request()->get('customer_code') : '';
        
        $chart_of_account_id = request()->has('chart_of_account_id') ? request()->get('chart_of_account_id') : [];
        $chart_of_account_id = is_array($chart_of_account_id) && isset($chart_of_account_id[0]) ? $chart_of_account_id : (!is_array($chart_of_account_id) && (int)($chart_of_account_id) > 0 ? [$chart_of_account_id] : []);
        $narration = request()->has('narration') ? request()->get('narration') : '';

        $currency_id = request()->has('currency_id') ? request()->get('currency_id') : 0;
        $date = request()->has('date') ? request()->get('date') : date('Y-m-d');

        $customers = $this->getCompanies($company_id, $profit_centre_id, $customer_code, true, request()->has('page') ? request()->get('page') : false);

        $items = DB::table('entry_items')
        
        ->join('entries', 'entries.id', '=', 'entry_items.entry_id')

        ->join('entry_logs', 'entry_logs.entry_id', '=', 'entries.id')
        
        ->join('exchange_rates', 'exchange_rates.id', '=', 'entries.exchange_rate_id')
        
        ->join('cost_centres', 'cost_centres.id', '=', 'entry_items.cost_centre_id')
        ->join('profit_centres', 'profit_centres.id', '=', 'cost_centres.profit_centre_id')

        ->where('entries.is_approved', 'approved')
        ->where('profit_centres.company_id', $company_id)
        ->where('entries.date', '<=', $date)

        ->when(!empty($narration), function($query) use($narration){
            return $query->where(function($query) use($narration){
                return $query->where('entries.notes', 'LIKE', '%'.$narration.'%')
                             ->orWhere('entry_items.narration', 'LIKE', '%'.$narration.'%');
            });
        })

        ->when($profit_centre_id > 0, function($query) use($profit_centre_id){
            return $query->where('cost_centres.profit_centre_id', $profit_centre_id);
        })
        ->when($currency_id > 0, function($query) use($currency_id){
            return $query->where('exchange_rates.currency_id', $currency_id);
        });

        $customerCodes = collect($customers['data'])->pluck('code')->toArray();
        foreach($customerCodes as $key => $code){
            if($key == 0){
                $items = $items->whereJsonContains('entry_logs.value', ['company_code' => $code]);
            }else{
                $items = $items->orWhereJsonContains('entry_logs.value', ['company_code' => $code]);
            }
        }
        
        $items = $items->select([
            'entry_items.id',
            DB::raw("JSON_EXTRACT(entry_logs.value, '$[*].company_code') as company_code"),
            'entries.date',
            'entry_items.chart_of_account_id',
            'entry_items.debit_credit',
            'entry_items.amount',
            'cost_centres.profit_centre_id'
        ])
        ->get();

        $companyEntries = [];
        if(request()->has('report_type')){
            if(isset($customers['data']) && is_array($customers['data']) && is_array($customers['data'])){
                foreach ($customers['data'] as $key => $customer) {
                    if(isset($customer['code'])){
                        $companyEntries[$customer['code']] = $items->filter(function($item) use ($customer) {
                            return stripos($item->company_code, $customer['code']) !== false;
                        })->values();
                    }
                }
            }
        }

        $companies = Company::has('profitCentres.costCentres')
        ->with([
            'profitCentres' => function($query) use($items){
                return $query->whereIn('id', $items->pluck('profit_centre_id')->toArray());
            }
        ])
        ->whereHas('users', function($query){
            return $query->where('user_id', auth()->user()->id);
        })
        ->get();

        if(request()->has('report_type')){
            $data = [
                'title' => $title,
                'date' => $date,
                'profitCentres' => ProfitCentre::where('company_id', $companies->first()->id)->orderBy('code', 'asc')->get(),
                'customers' => collect($customers['data']),
                'paginate' => $customers['logs'],
                'this_company' => $companies->where('id', $company_id)->first(),
                'companyEntries' => $companyEntries,
                'searchAccounts' => ChartOfAccount::with([
                    'accountGroup'
                ])
                ->whereIn('id', $chart_of_account_id)
                ->get()
            ];

            if(request()->get('report_type') == 'pdf'){
                return viewMPDF('accounting.backend.pages.reports.customerAgeing.pdf', $data, $title, $title, 'a4', 'P');
            }

            if(request()->get('report_type') == 'excel'){
                return downloadExcel('accounting.backend.pages.reports.customerAgeing.excel', $data, $title);
            }

            if(request()->get('report_type') == 'report'){
                return view('accounting.backend.pages.reports.customerAgeing.report', $data);
            }
        }

        try {
            $all = getAllGroupAndLedgers(false, true);
            $getActiveFiscalYear = getActiveFiscalYear($company_id);
            $data = [
                'title' => $title,
                'date' => $date,
                'accountDefaultSettings' => accountDefaultSettings(),
                'currency' => Currency::find($currency_id),
                'currencyTypes' => CurrencyType::with(['currencies'])->get(),
                'companies' => $companies,
                'chartOfAccountsOptions' => chartOfAccountsOptions([], 0, 0, $all, false, 'yes', false, [$company_id], true, getLedgerBalances($all, $company_id, $getActiveFiscalYear->id)),
            ];

            return view('accounting.backend.pages.reports.customerAgeing.index', $data);
        }catch (\Throwable $th){
            if(request()->has('report_type') && request()->get('report_type') == 'report'){
                return $th->getMessage();
            }
            
            return $this->backWithError($th->getMessage());
        }
    }
}
