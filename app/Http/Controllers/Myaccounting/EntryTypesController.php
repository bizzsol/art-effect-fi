<?php
bolt_decrypt( __FILE__ , 'BpDg6O'); return 0;
##!!!##