<?php
bolt_decrypt( __FILE__ , 'a4NAkq'); return 0;
##!!!##CgpuYW1lc3BhY2UgQXBwXEh0dHBcQ29udHJvbGxlcnNcTXlhY2NvdW50aW5nOwoKdXNlIEFwcFxIdHRwXENvbnRyb2xsZXJzXENvbnRyb2xsZXI7CnVzZSBJbGx1bWluYXRlXEh0dHBcUmVxdWVzdDsKCnVzZSBcQXBwXE1vZGVsc1xQbXNNb2RlbHNcQWNjb3VudHNcQ29tcGFueTsKdXNlIFxBcHBcTW9kZWxzXFBtc01vZGVsc1xBY2NvdW50c1xFbnRyeVR5cGU7CnVzZSBcQXBwXE1vZGVsc1xQbXNNb2RlbHNcQWNjb3VudHNcRW50cnlUeXBlQ29tcGFueTsKdXNlIFxBcHBcTW9kZWxzXFBtc01vZGVsc1xBY2NvdW50c1xDaGFydE9mQWNjb3VudDsKdXNlIFxBcHBcTW9kZWxzXFBtc01vZGVsc1xBY2NvdW50c1xDaGFydE9mQWNjb3VudEVudHJ5VHlwZTsKCnVzZSBBcHAsREI7CnVzZSBJbGx1bWluYXRlXFN1cHBvcnRcRmFjYWRlc1xBdXRoOwp1c2UgRGF0YVRhYmxlczsKCmNsYXNzIEVudHJ5VHlwZXNDb250cm9sbGVyIGV4dGVuZHMgQ29udHJvbGxlcgp7ICAgCgogICAgIC8qKgogICAgICogU2V0IGdsb2JhbCBkYXRhIHRhYmxlIGhlYWRlcnMuCiAgICAgKgogICAgICogQHJldHVybiBoZWFkZXJDb2x1bW5zCiAgICAgKi8KICAgICBwdWJsaWMgZnVuY3Rpb24gaGVhZGVyQ29sdW1ucygkdmFsdWU9JycpCiAgICAgewogICAgICAgICRyb3dzID0gIGFycmF5KAogICAgICAgICAgICBbJ1NMJywgJ1NMJ10sCiAgICAgICAgICAgIFsnbGFiZWwnLCAnbGFiZWwnLF0sCiAgICAgICAgICAgIFsnbmFtZScsICduYW1lJ10sCiAgICAgICAgICAgIFsnZGVzY3JpcHRpb24nLCAnZGVzY3JpcHRpb24nLCAndGV4dC1sZWZ0J10sCiAgICAgICAgICAgIFsncHJlZml4JywgJ3ByZWZpeCcsICd0ZXh0LWNlbnRlciddLCAKICAgICAgICAgICAgWydzdWZmaXgnLCAnc3VmZml4JywgJ3RleHQtY2VudGVyJ10sCiAgICAgICAgICAgIFsncmVzdHJpY3Rpb24nLCAncmVzdHJpY3Rpb24nLCAndGV4dC1sZWZ0J10sIAogICAgICAgICAgICBbJ2NvbXBhbmllcycsICdjb21wYW5pZXMnLCAndGV4dC1sZWZ0J10sIAogICAgICAgICAgICBbJ2FjdGlvbnMnLCAnYWN0aW9ucycsICd0ZXh0LWNlbnRlciddLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuICRyb3dzOwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBpbmRleCgpCiAgICB7CiAgICAgICAgJHRpdGxlID0gJ0VudHJ5IFR5cGVzJzsKICAgICAgICB0cnkgewoKICAgICAgICAgICAgJGVudHJ5VHlwZXMgPSBFbnRyeVR5cGU6OndpdGgoWwogICAgICAgICAgICAgICAgJ2NvbXBhbmllcy5jb21wYW55JwogICAgICAgICAgICBdKQogICAgICAgICAgICAtPndoZW4oIWRhdGF0YWJsZU9yZGVyaW5nKCksIGZ1bmN0aW9uKCRxdWVyeSl7CiAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT5vcmRlcmJ5KCdpZCcsICdkZXNjJyk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgJG9wdGlvbnM9WwogICAgICAgICAgICAgICAgJ2VudHJ5LXR5cGUtZWRpdCc9PmF1dGgoKS0+dXNlcigpLT5oYXNQZXJtaXNzaW9uVG8oJ2VudHJ5LXR5cGUtZWRpdCcpLAogICAgICAgICAgICAgICAgJ2VudHJ5LXR5cGUtZGVsZXRlJz0+YXV0aCgpLT51c2VyKCktPmhhc1Blcm1pc3Npb25UbygnZW50cnktdHlwZS1kZWxldGUnKSwKICAgICAgICAgICAgXTsKCiAgICAgICAgICAgIGlmIChyZXF1ZXN0KCktPmFqYXgoKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIERhdGF0YWJsZXM6Om9mKCRlbnRyeVR5cGVzKQogICAgICAgICAgICAgICAgLT5hZGRJbmRleENvbHVtbigpCiAgICAgICAgICAgICAgICAtPmVkaXRDb2x1bW4oJ3Jlc3RyaWN0aW9uJywgZnVuY3Rpb24oJGVudHJ5VHlwZSl7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVudHJ5VHlwZVJlc3RyaWN0aW9ucygkZW50cnlUeXBlLT5yZXN0cmljdGlvbilbJ25hbWUnXTsKICAgICAgICAgICAgICAgIH0pCgogICAgICAgICAgICAgICAgLT5hZGRDb2x1bW4oJ2NvbXBhbmllcycsIGZ1bmN0aW9uKCRlbnRyeVR5cGUpewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkZW50cnlUeXBlLT5jb21wYW5pZXMtPnBsdWNrKCdjb21wYW55Lm5hbWUnKS0+aW1wbG9kZSgnLCAnKTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAtPmZpbHRlckNvbHVtbignY29tcGFuaWVzJywgZnVuY3Rpb24gKCRxdWVyeSwgJGtleXdvcmQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZUhhcygnY29tcGFuaWVzLmNvbXBhbnknLCBmdW5jdGlvbiAoJHF1ZXJ5KSB1c2UoJGtleXdvcmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHF1ZXJ5LT53aGVyZSgnbmFtZScsICdMSUtFJywgJyUnLiRrZXl3b3JkLiclJyk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLT5vcmRlckNvbHVtbignY29tcGFuaWVzJywgZnVuY3Rpb24gKCRxdWVyeSwgJG9yZGVyKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBsZWFzZVNvcnRNZSgkcXVlcnksICRvcmRlciwgRW50cnlUeXBlQ29tcGFueTo6c2VsZWN0KCdjb21wYW5pZXMubmFtZScpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+am9pbignY29tcGFuaWVzJywgJ2NvbXBhbmllcy5pZCcsICc9JywgJ2VudHJ5X3R5cGVfY29tcGFuaWVzLmNvbXBhbnlfaWQnKQogICAgICAgICAgICAgICAgICAgICAgICAtPndoZXJlQ29sdW1uKCdlbnRyeV90eXBlX2NvbXBhbmllcy5lbnRyeV90eXBlX2lkJywgJ2VudHJ5X3R5cGVzLmlkJykKICAgICAgICAgICAgICAgICAgICAgICAgLT50YWtlKDEpCiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIH0pCgogICAgICAgICAgICAgICAgLT5hZGRDb2x1bW4oJ2FjdGlvbnMnLCBmdW5jdGlvbigkZW50cnlUeXBlKSB1c2UoJG9wdGlvbnMpewogICAgICAgICAgICAgICAgICAgICRhY3Rpb25zPScnOwoKICAgICAgICAgICAgICAgICAgICBpZigkb3B0aW9uc1snZW50cnktdHlwZS1lZGl0J10pewogICAgICAgICAgICAgICAgICAgICAgICAkYWN0aW9ucy49JzxhIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1wcmltYXJ5IiBocmVmPSInLnVybCgnYWNjb3VudGluZy9lbnRyeS10eXBlcy8nLiRlbnRyeVR5cGUtPmlkLicvZWRpdCcpIC4nIj48aSBjbGFzcz0ibGEgbGEtZWRpdCI+PC9pPjwvYT4nOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZigkb3B0aW9uc1snZW50cnktdHlwZS1kZWxldGUnXSl7CiAgICAgICAgICAgICAgICAgICAgICAgICRhY3Rpb25zLj0nPGEgY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciBkZWxldGVCdG4gbWwtMiIgb25jbGljaz0iZGVsZXRlQnRuKCQodGhpcykpIiBkYXRhLXNyYz0iJy5yb3V0ZSgnYWNjb3VudGluZy5lbnRyeS10eXBlcy5kZXN0cm95JywgJGVudHJ5VHlwZS0+aWQpLiciPjxpIGNsYXNzPSJsYSBsYS10cmFzaCI+PC9pPjwvYT4nOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGFjdGlvbnM7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLT5yYXdDb2x1bW5zKFsncmVzdHJpY3Rpb24nLCdhY3Rpb25zJ10pCiAgICAgICAgICAgICAgICAtPm1ha2UodHJ1ZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRkYXRhID0gWwogICAgICAgICAgICAgICAgJ3RpdGxlJyA9PiAkdGl0bGUsCiAgICAgICAgICAgICAgICAnaGVhZGVyQ29sdW1ucycgPT4gJHRoaXMtPmhlYWRlckNvbHVtbnMoKSwKICAgICAgICAgICAgXTsKICAgICAgICAgICAgcmV0dXJuIHZpZXcoJ2FjY291bnRpbmcuYmFja2VuZC5wYWdlcy5lbnRyeVR5cGVzLmluZGV4JywgJGRhdGEpOwogICAgICAgIH1jYXRjaCAoXFRocm93YWJsZSAkdGgpewogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmJhY2tXaXRoRXJyb3IoJHRoLT5nZXRNZXNzYWdlKCkpOwogICAgICAgIH0KICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gY3JlYXRlKCkKICAgIHsKICAgICAgICAkZGF0YSA9IFsKICAgICAgICAgICAgJ3RpdGxlJyA9PiAnTmV3IEVudHJ5IFR5cGUnLAogICAgICAgICAgICAnY29tcGFuaWVzJyA9PiBDb21wYW55OjphbGwoKQogICAgICAgIF07CgogICAgICAgIHJldHVybiB2aWV3KCdhY2NvdW50aW5nLmJhY2tlbmQucGFnZXMuZW50cnlUeXBlcy5jcmVhdGUnLCAkZGF0YSk7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIHN0b3JlKFJlcXVlc3QgJHJlcXVlc3QpCiAgICB7CiAgICAgICAgJHJlcXVlc3QtPnZhbGlkYXRlKFsKICAgICAgICAgICAgJ2xhYmVsJyA9PiAncmVxdWlyZWR8dW5pcXVlOmVudHJ5X3R5cGVzJywKICAgICAgICAgICAgJ25hbWUnID0+ICdyZXF1aXJlZCcsCiAgICAgICAgICAgICdkZXNjcmlwdGlvbicgPT4gJ3JlcXVpcmVkJywKICAgICAgICBdKTsKCiAgICAgICAgREI6OmJlZ2luVHJhbnNhY3Rpb24oKTsKICAgICAgICB0cnl7CiAgICAgICAgICAgICRlbnRyeVR5cGUgPSBFbnRyeVR5cGU6OmNyZWF0ZSgkcmVxdWVzdC0+YWxsKCkpOwogICAgICAgICAgICAKICAgICAgICAgICAgJGNvbXBhbmllcyA9IFtdOwogICAgICAgICAgICBpZihpc3NldCgkcmVxdWVzdC0+Y29tcGFuaWVzWzBdKSl7CiAgICAgICAgICAgICAgICBmb3JlYWNoKCRyZXF1ZXN0LT5jb21wYW5pZXMgYXMgJGtleSA9PiAkY29tcGFueV9pZCl7CiAgICAgICAgICAgICAgICAgICAgYXJyYXlfcHVzaCgkY29tcGFuaWVzLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICdlbnRyeV90eXBlX2lkJyA9PiAkZW50cnlUeXBlLT5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbXBhbnlfaWQnID0+ICRjb21wYW55X2lkCiAgICAgICAgICAgICAgICAgICAgXSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgRW50cnlUeXBlQ29tcGFueTo6aW5zZXJ0KCRjb21wYW5pZXMpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkYWNjb3VudHMgPSBbXTsKICAgICAgICAgICAgJGNvbXBhbnlfYWNjb3VudHMgPSBDaGFydE9mQWNjb3VudDo6d2hlcmVIYXMoJ2NvbXBhbmllcycsIGZ1bmN0aW9uKCRxdWVyeSkgdXNlKCRyZXF1ZXN0KXsKICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlSW4oJ2NvbXBhbnlfaWQnLCBpc3NldCgkcmVxdWVzdC0+Y29tcGFuaWVzWzBdKSA/ICRyZXF1ZXN0LT5jb21wYW5pZXMgOiBbXSk7CiAgICAgICAgICAgIH0pLT5nZXQoKTsKICAgICAgICAgICAgaWYoaXNzZXQoJGNvbXBhbnlfYWNjb3VudHNbMF0pKXsKICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRjb21wYW55X2FjY291bnRzIGFzICRrZXkgPT4gJGFjY291bnQpIHsKICAgICAgICAgICAgICAgICAgICBhcnJheV9wdXNoKCRhY2NvdW50cywgWwogICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnRfb2ZfYWNjb3VudF9pZCcgPT4gJGFjY291bnQtPmlkLAogICAgICAgICAgICAgICAgICAgICAgICAnZW50cnlfdHlwZV9pZCcgPT4gJGVudHJ5VHlwZS0+aWQsCiAgICAgICAgICAgICAgICAgICAgXSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgQ2hhcnRPZkFjY291bnRFbnRyeVR5cGU6Omluc2VydCgkYWNjb3VudHMpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBEQjo6Y29tbWl0KCk7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+cmVkaXJlY3RCYWNrV2l0aFN1Y2Nlc3MoIkVudHJ5IFR5cGUgaGFzIGJlZW4gY3JlYXRlZCBzdWNjZXNzZnVsbHkiLCAnYWNjb3VudGluZy5lbnRyeS10eXBlcy5jcmVhdGUnKTsKICAgICAgICB9Y2F0Y2ggKFxUaHJvd2FibGUgJHRoKXsKICAgICAgICAgICAgREI6OnJvbGxiYWNrKCk7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+YmFja1dpdGhFcnJvcigkdGgtPmdldE1lc3NhZ2UoKSk7CiAgICAgICAgfQogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBzaG93KCRpZCkKICAgIHsKICAgICAgICAKICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gZWRpdCgkaWQpCiAgICB7CiAgICAgICAgJGRhdGEgPSBbCiAgICAgICAgICAgICd0aXRsZScgPT4gJ0VkaXQgRW50cnkgVHlwZScsCiAgICAgICAgICAgICdlbnRyeVR5cGUnID0+IEVudHJ5VHlwZTo6d2l0aChbCiAgICAgICAgICAgICAgICAnY29tcGFuaWVzJwogICAgICAgICAgICBdKS0+ZmluZE9yRmFpbCgkaWQpLAogICAgICAgICAgICAnY29tcGFuaWVzJyA9PiBDb21wYW55OjphbGwoKQogICAgICAgIF07CgogICAgICAgIHJldHVybiB2aWV3KCdhY2NvdW50aW5nLmJhY2tlbmQucGFnZXMuZW50cnlUeXBlcy5lZGl0JywgJGRhdGEpOwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiB1cGRhdGUoUmVxdWVzdCAkcmVxdWVzdCwgJGlkKQogICAgewogICAgICAgICRyZXF1ZXN0LT52YWxpZGF0ZShbCiAgICAgICAgICAgICdsYWJlbCcgPT4gJ3JlcXVpcmVkfHVuaXF1ZTplbnRyeV90eXBlcyxsYWJlbCwnLiRpZCwKICAgICAgICAgICAgJ25hbWUnID0+ICdyZXF1aXJlZCcsCiAgICAgICAgICAgICdkZXNjcmlwdGlvbicgPT4gJ3JlcXVpcmVkJywKICAgICAgICBdKTsKCiAgICAgICAgREI6OmJlZ2luVHJhbnNhY3Rpb24oKTsKICAgICAgICB0cnl7CiAgICAgICAgICAgICRlbnRyeVR5cGUgPSBFbnRyeVR5cGU6OmZpbmQoJGlkKTsKICAgICAgICAgICAgJGVudHJ5VHlwZS0+ZmlsbCgkcmVxdWVzdC0+YWxsKCkpOwogICAgICAgICAgICAkZW50cnlUeXBlLT5zYXZlKCk7CgogICAgICAgICAgICBFbnRyeVR5cGVDb21wYW55Ojp3aGVyZSgnZW50cnlfdHlwZV9pZCcsICRlbnRyeVR5cGUtPmlkKS0+ZGVsZXRlKCk7CiAgICAgICAgICAgICRjb21wYW5pZXMgPSBbXTsKICAgICAgICAgICAgaWYoaXNzZXQoJHJlcXVlc3QtPmNvbXBhbmllc1swXSkpewogICAgICAgICAgICAgICAgZm9yZWFjaCgkcmVxdWVzdC0+Y29tcGFuaWVzIGFzICRrZXkgPT4gJGNvbXBhbnlfaWQpewogICAgICAgICAgICAgICAgICAgIGFycmF5X3B1c2goJGNvbXBhbmllcywgWwogICAgICAgICAgICAgICAgICAgICAgICAnZW50cnlfdHlwZV9pZCcgPT4gJGVudHJ5VHlwZS0+aWQsCiAgICAgICAgICAgICAgICAgICAgICAgICdjb21wYW55X2lkJyA9PiAkY29tcGFueV9pZAogICAgICAgICAgICAgICAgICAgIF0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIEVudHJ5VHlwZUNvbXBhbnk6Omluc2VydCgkY29tcGFuaWVzKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgQ2hhcnRPZkFjY291bnRFbnRyeVR5cGU6OndoZXJlKCdlbnRyeV90eXBlX2lkJywgJGVudHJ5VHlwZS0+aWQpLT5kZWxldGUoKTsKICAgICAgICAgICAgJGFjY291bnRzID0gW107CiAgICAgICAgICAgICRjb21wYW55X2FjY291bnRzID0gQ2hhcnRPZkFjY291bnQ6OndoZXJlSGFzKCdjb21wYW5pZXMnLCBmdW5jdGlvbigkcXVlcnkpIHVzZSgkcmVxdWVzdCl7CiAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZUluKCdjb21wYW55X2lkJywgaXNzZXQoJHJlcXVlc3QtPmNvbXBhbmllc1swXSkgPyAkcmVxdWVzdC0+Y29tcGFuaWVzIDogW10pOwogICAgICAgICAgICB9KS0+Z2V0KCk7CiAgICAgICAgICAgIGlmKGlzc2V0KCRjb21wYW55X2FjY291bnRzWzBdKSl7CiAgICAgICAgICAgICAgICBmb3JlYWNoICgkY29tcGFueV9hY2NvdW50cyBhcyAka2V5ID0+ICRhY2NvdW50KSB7CiAgICAgICAgICAgICAgICAgICAgYXJyYXlfcHVzaCgkYWNjb3VudHMsIFsKICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0X29mX2FjY291bnRfaWQnID0+ICRhY2NvdW50LT5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgJ2VudHJ5X3R5cGVfaWQnID0+ICRlbnRyeVR5cGUtPmlkLAogICAgICAgICAgICAgICAgICAgIF0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIENoYXJ0T2ZBY2NvdW50RW50cnlUeXBlOjppbnNlcnQoJGFjY291bnRzKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgREI6OmNvbW1pdCgpOwogICAgICAgICAgICByZXR1cm4gJHRoaXMtPnJlZGlyZWN0QmFja1dpdGhTdWNjZXNzKCJFbnRyeSBUeXBlIGhhcyBiZWVuIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5IiwgJ2FjY291bnRpbmcuZW50cnktdHlwZXMuaW5kZXgnKTsKICAgICAgICB9Y2F0Y2ggKFxUaHJvd2FibGUgJHRoKXsKICAgICAgICAgICAgREI6OnJvbGxiYWNrKCk7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+YmFja1dpdGhFcnJvcigkdGgtPmdldE1lc3NhZ2UoKSk7CiAgICAgICAgfQogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBkZXN0cm95KCRpZCkKICAgIHsKICAgICAgICBEQjo6YmVnaW5UcmFuc2FjdGlvbigpOwogICAgICAgIHRyeXsKICAgICAgICAgICAgRW50cnlUeXBlOjpmaW5kKCRpZCktPmRlbGV0ZSgpOwoKICAgICAgICAgICAgREI6OmNvbW1pdCgpOwogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbihbCiAgICAgICAgICAgICAgICAnc3VjY2VzcycgPT4gdHJ1ZSwKICAgICAgICAgICAgICAgICdtZXNzYWdlJyA9PiAiRW50cnkgVHlwZSBoYXMgYmVlbiBEZWxldGVkISIKICAgICAgICAgICAgXSk7CiAgICAgICAgfWNhdGNoIChcVGhyb3dhYmxlICR0aCl7CiAgICAgICAgICAgIERCOjpyb2xsYmFjaygpOwogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbihbCiAgICAgICAgICAgICAgICAnc3VjY2VzcycgPT4gZmFsc2UsCiAgICAgICAgICAgICAgICAnbWVzc2FnZScgPT4gJHRoLT5nZXRNZXNzYWdlKCkKICAgICAgICAgICAgXSk7CiAgICAgICAgfQogICAgfQp9Cg==