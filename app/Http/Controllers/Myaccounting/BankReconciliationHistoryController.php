<?php
bolt_decrypt( __FILE__ , 'e6r32y'); return 0;
##!!!##