<?php
bolt_decrypt( __FILE__ , 'BCg4Tt'); return 0;
##!!!##