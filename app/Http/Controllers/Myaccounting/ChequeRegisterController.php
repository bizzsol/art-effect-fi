<?php
bolt_decrypt( __FILE__ , '5cJMBq'); return 0;
##!!!##