<?php
bolt_decrypt( __FILE__ , 'bXaXM7'); return 0;
##!!!##