<?php
bolt_decrypt( __FILE__ , '2Nyw2I'); return 0;
##!!!##