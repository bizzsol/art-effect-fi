<?php
bolt_decrypt( __FILE__ , 'KZbAvB'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use \App\Models\PmsModels\Accounts\Company;
use \App\Models\PmsModels\Accounts\CostCentre;
use \App\Models\PmsModels\Accounts\FiscalYear;
use \App\Models\PmsModels\Accounts\EntryType;
use \App\Models\PmsModels\Accounts\Tag;
use \App\Models\PmsModels\Accounts\ChartOfAccount;
use \App\Models\PmsModels\Accounts\Entry;
use \App\Models\PmsModels\Accounts\EntryItem;
use \App\Models\PmsModels\Accounts\ChequeRegister;
use \App\Models\PmsModels\Suppliers;
use \App\Models\PmsModels\Purchase\PurchaseOrder;
use \App\Models\PmsModels\Grn\GoodsReceivedItemStockIn;
use \App\Models\PmsModels\SupplierPayment;
use \App\Models\PmsModels\SupplierLedgers;
use \App\Models\PmsModels\Accounts\BankAccount;
use \App\Models\PmsModels\Accounts\AdvanceCategory;
use \App\Models\PmsModels\Purchase\PurchaseOrderEntry;

use \App\Models\PmsModels\Accounts\CurrencyType;
use \App\Models\PmsModels\Accounts\Currency;
use \App\Models\PmsModels\Accounts\ExchangeRate;

use App, DB, DataTables;
use Illuminate\Support\Facades\Auth;

class ChequeRegisterController extends Controller
{
    public function headerColumns($value='')
    {
        return array(
            ['SL', 'SL'], 
            ['bank_account', 'bank_account', 'text-center'],
            ['supplier', 'supplier', 'text-center'],
            // ['invoice', 'invoice', 'text-center'],
            ['date', 'date', 'text-center'],
            ['invoices', 'invoices'],
            ['cheque_number', 'cheque_number', 'text-center'],
            ['source', 'source', 'text-center'],
            // ['type', 'type', 'text-center'],
            // ['debit_credit', 'debit_credit', 'text-center'],
            ['currency', 'currency', 'text-center'], 
            ['amount', 'amount', 'text-right'],
            ['narration', 'narration'],
            ['issued_by', 'issued_by', 'text-center'],
            ['options', 'options', 'text-center','width:15%']
        );
    }

    public function index()
    {
        try {
            $cheques = ChequeRegister::with([
                'bankAccount',
                'entry.exchangeRate.currency',
                'creator',
                'supplierLedger.relSupplierPayment',
                'supplierLedger.supplier',
                'cheques.supplierLedger.relSupplierPayment',
                'cheques.supplierLedger.supplier',
            ])
            ->where('bank_account_id', request()->get('bank_account_id'))
            ->groupBy('cheque_number')
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });

            if (request()->ajax()) {
                return DataTables::of($cheques)
                ->addIndexColumn()
                ->addColumn('bank_account', function($cheque){
                    return '['.$cheque->bankAccount->number.'] '.$cheque->bankAccount->name.' ('.$cheque->bankAccount->bank_name.')';
                })
                ->filterColumn('bank_account', function ($query, $keyword) {
                    return $query->whereHas('bankAccount', function($query) use($keyword){
                        return $query->where(function($query) use($keyword){
                            return $query->where('number', 'LIKE', '%'.$keyword.'%')
                            ->orWhere('name', 'LIKE', '%'.$keyword.'%')
                            ->orWhere('bank_name', 'LIKE', '%'.$keyword.'%');
                        });
                    });
                })
                ->orderColumn('bank_account', function ($query, $order) {
                    return pleaseSortMe($query, $order, BankAccount::select('bank_accounts.number')
                        ->whereColumn('bank_accounts.id', 'cheque_registers.bank_account_id')
                        ->take(1)
                    );
                })
                ->addColumn('supplier', function($cheque){
                    return isset($cheque->supplierLedger->supplier->code) ? '['.$cheque->supplierLedger->supplier->code.'] '.$cheque->supplierLedger->supplier->name : '';
                })
                ->filterColumn('supplier', function ($query, $keyword) {
                    return $query->whereHas('supplierLedger.supplier', function($query) use($keyword){
                        return $query->where(function($query) use($keyword){
                            return $query->where('code', 'LIKE', '%'.$keyword.'%')
                            ->orWhere('name', 'LIKE', '%'.$keyword.'%');
                        });
                    });
                })
                ->orderColumn('supplier', function ($query, $order) {
                    return pleaseSortMe($query, $order, SupplierLedgers::select('suppliers.name')
                        ->join('suppliers', 'suppliers.id', '', 'supplier_ledgers.supplier_id')
                        ->whereColumn('supplier_ledgers.id', 'cheque_registers.supplier_ledger_id')
                        ->take(1)
                    );
                })
                ->editColumn('date', function($cheque){
                    return date('Y-m-d', strtotime($cheque->datetime));
                })
                ->filterColumn('date', function ($query, $keyword) {
                    return $query->where('datetime', 'LIKE', '%'.$keyword.'%');
                })
                ->orderColumn('date', function ($query, $order) {
                    return $query->orderby('datetime', $order);
                })
                ->addColumn('invoices', function($cheque){
                    $invoices = [];
                    if($cheque->cheques->where('bank_account_id', $cheque->bank_account_id)->count() > 0){
                        foreach($cheque->cheques->where('bank_account_id', $cheque->bank_account_id) as $key => $chk){
                            if(isset($chk->supplierLedger->relSupplierPayment->bill_number)){
                                array_push($invoices, $chk->supplierLedger->relSupplierPayment->bill_number);
                            }
                        }
                    }

                    return implode(', ', array_unique($invoices));
                })
                ->filterColumn('invoices', function ($query, $keyword) {
                    return $query->whereHas('cheques.supplierLedger.relSupplierPayment', function($query) use($keyword){
                        return $query->where('bill_number', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('currency', function($cheque){
                    return isset($cheque->entry->exchangeRate->currency->code) ? $cheque->entry->exchangeRate->currency->code : '';
                })
                ->filterColumn('currency', function ($query, $keyword) {
                    return $query->whereHas('entry.exchangeRate.currency', function ($query) use($keyword) {
                        $query->where('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('currency', function ($query, $order) {
                    return pleaseSortMe($query, $order, Entry::select('currencies.code')
                        ->join('currencies', 'currencies.id', '=', 'exchange_rates.currency_id')
                        ->join('exchange_rates', 'exchange_rates.id', 'entries.exchange_rate_id')
                        ->whereColumn('entries.id', 'cheque_registers.entry_id')
                        ->take(1)
                    );
                })
                ->editColumn('amount', function($cheque){
                    return systemMoneyFormat($cheque->cheques->where('bank_account_id', $cheque->bank_account_id)->sum('amount'));
                })
                ->filterColumn('amount', function ($query, $keyword) {
                    return $query->where('amount', 'LIKE', '%'.$keyword.'%');
                })
                ->orderColumn('amount', function ($query, $order) {
                    return $query->orderby('amount', $order);
                })
                ->addColumn('issued_by', function($cheque){
                    return $cheque->creator ? $cheque->creator->name : '';
                })
                ->filterColumn('issued_by', function ($query, $keyword) {
                    return $query->whereHas('creator', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('issued_by', function ($query, $order) {
                    return pleaseSortMe($query, $order, User::select('users.name')
                        ->whereColumn('users.id', 'cheque_registers.created_by')
                        ->take(1)
                    );
                })
                ->addColumn('options', function($cheque){
                    return '<a class="btn btn-xs btn-primary mt-1" target="_blank" href="'.url('accounting/cheque-register/'.$cheque->id).'"><i class="las la-money-check-alt"></i>&nbsp;Print Cheque</a><a class="btn btn-xs btn-success mt-1 mb-1" target="_blank" href="'.url('accounting/cheque-register/'.$cheque->id).'?cash"><i class="las la-money-check-alt"></i>&nbsp;Cash Cheque</a><a class="btn btn-xs btn-success" onclick="editNarration($(this))" data-cheque-id="'.$cheque->id.'" data-narration="'.$cheque->narration.'" data-payee-name="'.$cheque->payee_name.'"><i class="la la-edit"></i>&nbsp;Edit Narration</a>';
                })
                ->rawColumns(['options'])
                ->make(true);
            }

            return view('accounting.backend.pages.chequeRegister.index', [
                'title' => 'Cheque Register',
                'bankAccounts' => BankAccount::with([
                    'currency'
                ])->get(),
                'headerColumns' => $this->headerColumns()
            ]);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function store(Request $request)
    {
        DB::beginTransaction();
        try{
            $cheque = ChequeRegister::findOrFail($request->id);
            ChequeRegister::where([
                'bank_account_id' => $cheque->bank_account_id,
                'cheque_number' => $cheque->cheque_number,
            ])
            ->update([
                'narration' => $request->narration,
                'payee_name' => $request->payee_name,
            ]);

            DB::commit();
            return response()->json([
                'success' => true,
                'message' => "Cheque Narration has been updated."
            ]);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function show($id)
    {
        try {
            $cheque = ChequeRegister::with([
                'bankAccount',
                'entry.exchangeRate.currency',
                'creator'
            ])->findOrFail($id);
            $amount = ChequeRegister::where([
                'bank_account_id' => $cheque->bank_account_id,
                'cheque_number' => $cheque->cheque_number,
            ])->sum('amount');
            $title = 'Cheque #'.$cheque->cheque_number;

            return viewMPDF('accounting.backend.pages.chequeRegister.cheque', [
                'title' => $title,
                'cheque' => $cheque,
                'amount' => $amount
            ], $title, $title, 'a5', 'L');
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }
}
