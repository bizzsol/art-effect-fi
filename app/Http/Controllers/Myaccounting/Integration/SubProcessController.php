<?php
bolt_decrypt( __FILE__ , 'FdfF2o'); return 0;
##!!!##