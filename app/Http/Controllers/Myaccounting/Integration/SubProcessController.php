<?php
bolt_decrypt( __FILE__ , 'KLYKXm'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting\Integration;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App, DB, DataTables;

use \App\Models\PmsModels\Accounts\ChartOfAccount;
use \App\Models\Integration\Source;
use \App\Models\Integration\ControlPoint;
use \App\Models\Integration\EntryPoint;
use \App\Models\Integration\Requirement;
use \App\Models\Integration\Process;
use \App\Models\Integration\SubProcess;
use \App\Models\Integration\SubProcessLedger;
use \App\Models\Integration\EntryPointLedger;

class SubProcessController extends Controller
{

    /**
     * Set global data table headers.
     *
     * @return headerColumns
     */
     public function headerColumns($value='')
     {
        return array(
            ['SL', 'SL'],
            ['code', 'code', 'text-center'],
            ['name', 'name', 'text-center'],
            ['type', 'type', 'text-center'],
            ['source', 'source'],
            ['control_point', 'control_point'],
            ['entry_point', 'entry_point'],
            ['requirement', 'requirement'],
            ['description', 'description'],
            ['actions', 'actions', 'text-center'],
        );
    }

    public function index()
    {
        try {
            if (request()->ajax()) {
                return Datatables::of(
                    SubProcess::when(!datatableOrdering(), function($query){
                        return $query->orderby('id', 'desc');
                    })
                )
                ->addIndexColumn()

                ->addColumn('source', function ($subProcess) {
                    return $subProcess->source->name;
                })
                ->filterColumn('source', function ($query, $keyword) {
                    return $query->whereHas('source', function ($query) use ($keyword) {
                        $query->where('name', 'LIKE', '%' . $keyword . '%');
                    });
                })
                ->orderColumn('source', function ($query, $order) {
                    return pleaseSortMe($query, $order, Source::select('sources.name')
                        ->whereColumn('sources.id', 'sub_processes.source_id')
                        ->take(1)
                    );
                })

                ->addColumn('control_point', function ($subProcess) {
                    return $subProcess->controlPoint->name;
                })
                ->filterColumn('control_point', function ($query, $keyword) {
                    return $query->whereHas('controlPoint', function ($query) use ($keyword) {
                        $query->where('name', 'LIKE', '%' . $keyword . '%');
                    });
                })
                ->orderColumn('control_point', function ($query, $order) {
                    return pleaseSortMe($query, $order, ControlPoint::select('control_points.name')
                        ->whereColumn('control_points.id', 'sub_processes.control_oint_id')
                        ->take(1)
                    );
                })

                ->addColumn('entry_point', function ($subProcess) {
                    return $subProcess->entryPoint->name;
                })
                ->filterColumn('entry_point', function ($query, $keyword) {
                    return $query->whereHas('entryPoint', function ($query) use ($keyword) {
                        $query->where('name', 'LIKE', '%' . $keyword . '%');
                    });
                })
                ->orderColumn('entry_point', function ($query, $order) {
                    return pleaseSortMe($query, $order, EntryPoint::select('entry_points.name')
                        ->whereColumn('entry_points.id', 'sub_processes.entry_oint_id')
                        ->take(1)
                    );
                })

                ->addColumn('requirement', function ($subProcess) {
                    return $subProcess->requirement->name;
                })
                ->filterColumn('requirement', function ($query, $keyword) {
                    return $query->whereHas('requirement', function ($query) use ($keyword) {
                        $query->where('name', 'LIKE', '%' . $keyword . '%');
                    });
                })
                ->orderColumn('requirement', function ($query, $order) {
                    return pleaseSortMe($query, $order, Requirement::select('requirements.name')
                        ->whereColumn('requirements.id', 'sub_processes.requirement_id')
                        ->take(1)
                    );
                })

                ->addColumn('actions', function($process){
                    return '<a class="btn btn-xs btn-primary ml-1" href="'.url('accounting/sub-processes/'.$process->id.'/edit').'"><i class="la la-edit"></i></a>
                                <a class="btn btn-xs btn-danger ml-1" onclick="deleteFromCRUD($(this))" data-src="'. route('accounting.sub-processes.destroy', $process->id).'"><i class="la la-trash"></i></a>';
                })
                ->rawColumns(['actions'])
                ->make(true);
            }

            $data = [
                'title' => 'List of Processes',
                'headerColumns' => $this->headerColumns(),
            ];
            return view('accounting.backend.pages.integrations.sub-processes.index', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function create()
    {
        $data = [
            'title' => 'New Sub-Process',
            'sources' => Source::all(),
            'controlPoints' => ControlPoint::all(),
            'entryPoints' => EntryPoint::all(),
            'requirements' => Requirement::all(),
            'processes' => Process::all(),
            'code' => uniqueCodeWithoutPrefix(3,'sub_processes','code')
        ];

        return view('accounting.backend.pages.integrations.sub-processes.create', $data);
    }

    public function store(Request $request)
    {
        $request->validate([
            'code' => 'required|unique:sub_processes',
            'name' => 'required',
            'process_id' => 'required',
            'type' => 'required',
            'description' => 'required',
            'source_id' => 'required',
            'control_point_id' => 'required',
            'entry_point_id' => 'required',
            'requirement_id' => 'required',
        ]);

        DB::beginTransaction();
        try{
            if(isset($request->debit_percentages) && array_sum($request->debit_percentages) > 100){
                return $this->backWithError("Total Debit Percentages cannot be more than 100%");
            }

            if(isset($request->credit_percentages) && array_sum($request->credit_percentages) > 100){
                return $this->backWithError("Total Credit Percentages cannot be more than 100%");
            }

            
            $subProcess = SubProcess::create($request->all());

            $ledgers = [];
            if(isset($request->debit_percentages) && is_array($request->debit_percentages) && count($request->debit_percentages) > 0){
                foreach ($request->debit_percentages as $chart_of_account_id => $percentage) {
                    array_push($ledgers, [
                        'sub_process_id' => $subProcess->id,
                        'chart_of_account_id' => $chart_of_account_id,
                        'type' => 'D',
                        'percentage' => $percentage,
                        'created_by' => auth()->user()->id,
                    ]);
                }
            }

            if(isset($request->credit_percentages) && is_array($request->credit_percentages) && count($request->credit_percentages) > 0){
                foreach ($request->credit_percentages as $chart_of_account_id => $percentage) {
                    array_push($ledgers, [
                        'sub_process_id' => $subProcess->id,
                        'chart_of_account_id' => $chart_of_account_id,
                        'type' => 'C',
                        'percentage' => $percentage,
                        'created_by' => auth()->user()->id,
                    ]);
                }
            }

            if(isset($ledgers[0])){
                SubProcessLedger::insert($ledgers);
            }

            DB::commit();
            return $this->redirectBackWithSuccess("Sub-Process has been created successfully", 'accounting.sub-processes.create');
        }catch (\Throwable $th){
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
    }

    public function show($entry_point_id)
    {
        $data = [
            'entryPointLedgers' => EntryPointLedger::with([
                'chartOfAccount'
            ])
            ->where('entry_point_id', $entry_point_id)
            ->orderBy('type', 'desc')
            ->get(), 
        ];

        return view('accounting.backend.pages.integrations.sub-processes.ledgers', $data);
    }

    public function edit($id)
    {
        $data = [
            'title' => 'Edit Sub-Process',
            'subProcess' => SubProcess::with([
                'ledgers.chartOfAccount'
            ])->findOrFail($id),
            'sources' => Source::all(),
            'controlPoints' => ControlPoint::all(),
            'entryPoints' => EntryPoint::all(),
            'requirements' => Requirement::all(),
            'processes' => Process::all(),
        ];

        return view('accounting.backend.pages.integrations.sub-processes.edit', $data);
    }

    public function update(Request $request, $id)
    {
        $request->validate([
            'name' => 'required',
            'process_id' => 'required',
            'type' => 'required',
            'description' => 'required',
            'source_id' => 'required',
            'control_point_id' => 'required',
            'entry_point_id' => 'required',
            'requirement_id' => 'required',
        ]);

        DB::beginTransaction();
        try{
            if(isset($request->debit_percentages) && array_sum($request->debit_percentages) > 100){
                return $this->backWithError("Total Debit Percentages cannot be more than 100%");
            }

            if(isset($request->credit_percentages) && array_sum($request->credit_percentages) > 100){
                return $this->backWithError("Total Credit Percentages cannot be more than 100%");
            }
            
            $subProcess = SubProcess::find($id);
            $subProcess->fill($request->all());
            $subProcess->save();

            SubProcessLedger::where('sub_process_id', $subProcess->id)->delete();

            $ledgers = [];
            if(isset($request->debit_percentages) && is_array($request->debit_percentages) && count($request->debit_percentages) > 0){
                foreach ($request->debit_percentages as $chart_of_account_id => $percentage) {
                    array_push($ledgers, [
                        'sub_process_id' => $subProcess->id,
                        'chart_of_account_id' => $chart_of_account_id,
                        'type' => 'D',
                        'percentage' => $percentage,
                        'created_by' => auth()->user()->id,
                    ]);
                }
            }

            if(isset($request->credit_percentages) && is_array($request->credit_percentages) && count($request->credit_percentages) > 0){
                foreach ($request->credit_percentages as $chart_of_account_id => $percentage) {
                    array_push($ledgers, [
                        'sub_process_id' => $subProcess->id,
                        'chart_of_account_id' => $chart_of_account_id,
                        'type' => 'C',
                        'percentage' => $percentage,
                        'created_by' => auth()->user()->id,
                    ]);
                }
            }

            if(isset($ledgers[0])){
                SubProcessLedger::insert($ledgers);
            }

            DB::commit();
            return $this->redirectBackWithSuccess("Sub-Process has been updated successfully", 'accounting.sub-processes.index');
        }catch (\Throwable $th){
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
    }

    public function destroy($id)
    {
        DB::beginTransaction();
        try{
            SubProcess::find($id)->delete();

            DB::commit();
            return response()->json([
                'success' => true,
                'message' => "Sub-Process has been Deleted!"
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }
}
