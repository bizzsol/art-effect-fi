<?php
bolt_decrypt( __FILE__ , 'Yg5BoE'); return 0;
##!!!##