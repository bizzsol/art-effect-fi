<?php
bolt_decrypt( __FILE__ , 'XrHAlA'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting\Integration;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App, DB, DataTables;

use \App\Models\PmsModels\Accounts\Company;
use \App\Models\PmsModels\Accounts\CostCentre;
use \App\Models\PmsModels\Accounts\EntryType;
use \App\Models\PmsModels\Accounts\Currency;
use \App\Models\PmsModels\Accounts\ChartOfAccount;
use \App\Models\PmsModels\Accounts\ExchangeRate;
use \App\Models\PmsModels\Accounts\EntryLog;
use \App\Models\Integration\Source;
use \App\Models\Integration\ControlPoint;
use \App\Models\Integration\EntryPoint;
use \App\Models\Integration\Requirement;
use \App\Models\Integration\Process;
use \App\Models\Integration\SubProcess;
use \App\Models\Integration\SubProcessLedger;
use \App\Models\Integration\EntryPointLedger;
use \App\Models\Integration\Transaction;
use \App\Models\Integration\TransactionEntry;
use \App\Models\Integration\TransactionLog;

class TransactionController extends Controller
{
    /**
     * Set global data table headers.
     *
     * @return headerColumns
     */
     public function headerColumns($value='')
     {
        return array(
            ['SL', 'SL'],
            ['process', 'process', 'text-center'],
            ['sub_process', 'sub_process', 'text-center'],
            ['datetime', 'datetime', 'text-center'],
            ['currency', 'currency', 'text-center'],
            ['amount', 'amount', 'text-center'],
            ['transactions', 'transactions'],
            ['fiscal_years', 'fiscal_years'],
            ['fiscal_year_openings', 'fiscal_year_openings'],
            ['logs', 'logs', 'text-center'],
        );
    }

    public function index()
    {
        if(request()->has('transaction-details')){
            $transaction = Transaction::with([
                'subProcess.process',
                'entries.entry.entryType',
                'entries.entry.items.costCentre.profitCentre.company',
                'entries.entry.logs',
                'logs',
                'exchangeRate.currency'
            ])->findOrFail(request()->get('transaction_id'));

            $transaction_logs = [];
            if(isset($transaction->logs[0])){
                foreach($transaction->logs as $log){
                    array_push($transaction_logs, [
                        'request' => json_decode($log->request, true),
                        'logs' => json_decode(json_decode($log->request, true)['logs'], true)
                    ]);
                }
            }

            $entry_logs = [];
            $logs = EntryLog::where('entry_id', $transaction->entries->pluck('entry_id')->toArray())->get();
            if(isset($logs[0])){
                foreach($logs as $log){
                    array_push($entry_logs, [
                        'log' => $log,
                        'value' => json_decode($log->value, true)
                    ]);
                }
            }

            return [
                'transaction' => $transaction,
                'logs' => $transaction->logs,
                'transaction_logs' => $transaction_logs,
                'entry_logs' => $entry_logs,
            ];
        }

        try {
            if (request()->ajax()) {
                $costCentres = [];
                if(request()->get('company_id') > 0){
                    $costCentres = CostCentre::whereHas('profitCentre', function($query){
                        return $query->where('company_id', request()->get('company_id'));
                    })->pluck('id')->toArray();
                }
                return Datatables::of(
                    Transaction::with([
                        'subProcess.process',
                        'entries.entry.entryType',
                        'entries.entry.fiscalYear',
                        'entries.entry.fiscalYearOpeningEntries.fiscalYearOpening',
                        'logs',
                        'exchangeRate.currency'
                    ])
                    ->when(request()->get('company_id') > 0, function($query) use($costCentres){
                        return $query->whereHas('entries.entry.items', function($query) use($costCentres){
                            return $query->whereIn('cost_centre_id', $costCentres);
                        });
                    })
                    ->when(!datatableOrdering(), function($query){
                        return $query->orderby('id', 'desc');
                    })
                )
                ->addIndexColumn()

                ->addColumn('process', function ($transaction) {
                    return $transaction->subProcess->process->code.' | '.$transaction->subProcess->process->name;
                })
                ->filterColumn('process', function ($query, $keyword) {
                    return $query->whereHas('subProcess.process', function ($query) use ($keyword) {
                        $query->where('code', 'LIKE', '%' . $keyword . '%')
                              ->orWhere('name', 'LIKE', '%' . $keyword . '%');
                    });
                })
                ->orderColumn('process', function ($query, $order) {
                    return pleaseSortMe($query, $order, SubProcess::select('processes.code')
                        ->join('processes', 'processes.id', '=', 'sub_processes.process_id')
                        ->whereColumn('sub_processes.id', 'transactions.sub_process_id')
                        ->take(1)
                    );
                })

                ->addColumn('sub_process', function ($transaction) {
                    return $transaction->subProcess->code.' | '.$transaction->subProcess->name;
                })
                ->filterColumn('sub_process', function ($query, $keyword) {
                    return $query->whereHas('subProcess', function ($query) use ($keyword) {
                        $query->where('code', 'LIKE', '%' . $keyword . '%')
                              ->orWhere('name', 'LIKE', '%' . $keyword . '%');
                    });
                })
                ->orderColumn('sub_process', function ($query, $order) {
                    return pleaseSortMe($query, $order, SubProcess::select('sub_processes.code')
                        ->whereColumn('sub_processes.id', 'transactions.sub_process_id')
                        ->take(1)
                    );
                })

                ->editColumn('datetime', function ($transaction) {
                    return date('Y-m-d g:i a', strtotime($transaction->datetime));
                })

                ->addColumn('currency', function ($transaction) {
                    return $transaction->exchangeRate->currency->code.' | '.$transaction->exchangeRate->currency->name;
                })
                ->filterColumn('currency', function ($query, $keyword) {
                    return $query->whereHas('exchangeRate.currency', function ($query) use ($keyword) {
                        $query->where('code', 'LIKE', '%' . $keyword . '%')
                              ->orWhere('name', 'LIKE', '%' . $keyword . '%');
                    });
                })
                ->orderColumn('currency', function ($query, $order) {
                    return pleaseSortMe($query, $order, ExchangeRate::select('currencies.code')
                        ->join('currencies', 'currencies.id', '=', 'exchange_rates.currency_id')
                        ->whereColumn('exchange_rates.id', 'transactions.exchange_rate_id')
                        ->take(1)
                    );
                })

                ->addColumn('transactions', function($transaction){
                    $data = '';
                    if(isset($transaction->entries[0])){
                        foreach($transaction->entries as $entry){
                            if(isset($entry->entry->id)){
                                $data .= '<a class="btn btn-xs btn-success ml-1" onclick="getShortDetails($(this))" data-id="'.($entry->entry->id).'" data-entry-type="'.($entry->entry->entryType->name).'" data-code="'.($entry->entry->code).'">'.$entry->entry->code.'</a>';
                            }
                        }
                    }
                    return $data;
                })
                ->filterColumn('transactions', function ($query, $keyword) {
                    return $query->whereHas('entries.entry', function ($query) use ($keyword) {
                        $query->where('code', 'LIKE', '%' . $keyword . '%');
                    });
                })
                ->orderColumn('transactions', function ($query, $order) {
                    return pleaseSortMe($query, $order, TransactionEntry::select('entries.code')
                        ->join('entries', 'entries.id', '=', 'transaction_entries.entry_id')
                        ->whereColumn('transaction_entries.transaction_id', 'transactions.id')
                        ->take(1)
                    );
                })

                ->addColumn('fiscal_years', function($transaction){
                    $array = [];
                    if(isset($transaction->entries[0])){
                        foreach($transaction->entries as $entry){
                            if(isset($entry->entry->fiscalYear->id)){
                                array_push($array, $entry->entry->fiscalYear->title);
                            }
                        }
                    }
                    return implode(', ', $array);
                })
                ->filterColumn('fiscal_years', function ($query, $keyword) {
                    return $query->whereHas('entries.entry.fiscalYear', function ($query) use ($keyword) {
                        $query->where('title', 'LIKE', '%' . $keyword . '%');
                    });
                })
                ->orderColumn('fiscal_years', function ($query, $order) {
                    return pleaseSortMe($query, $order, TransactionEntry::select('fiscal_years.title')
                        ->join('fiscal_years', 'fiscal_years.id', '=', 'entries.fiscal_year_id')
                        ->join('entries', 'entries.id', '=', 'transaction_entries.entry_id')
                        ->whereColumn('transaction_entries.transaction_id', 'transactions.id')
                        ->take(1)
                    );
                })

                ->addColumn('fiscal_year_openings', function($transaction){
                    $array = [];
                    if(isset($transaction->entries[0])){
                        foreach($transaction->entries as $entry){
                            if(isset($entry->entry->fiscalYearOpeningEntries[0])){
                                $array = array_merge($array, $entry->entry->fiscalYearOpeningEntries->pluck('fiscalYearOpening.reference')->toArray());
                            }
                        }
                    }
                    return implode(', ', $array);
                })

                ->addColumn('logs', function($transaction){
                    return '<a class="btn btn-xs btn-danger ml-1" onclick="viewLogs('.$transaction->id.')">View Logs</a>';
                })

                ->rawColumns(['transactions', 'logs'])
                ->make(true);
            }

            $data = [
                'title' => 'List of Transactions',
                'companies' => Company::has('profitCentres.costCentres')
                ->whereHas('users', function($query){
                    return $query->where('user_id', auth()->user()->id);
                })
                ->get(),
                'headerColumns' => $this->headerColumns(),
            ];
            return view('accounting.backend.pages.integrations.transactions.index', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function create()
    {
        if(request()->has('get-cost-centres')){
            return CostCentre::whereHas('profitCentre', function($query){
                return $query->where('company_id', request()->get('company_id'));
            })->get();
        }

        if(request()->has('get-ledgers')){
            $data = [
                'subProcess' => SubProcess::with([
                    'ledgers.chartOfAccount'
                ])
                ->findOrFail(request()->get('sub_process_id')), 
            ];

            return view('accounting.backend.pages.integrations.transactions.ledgers', $data);
        }

        return view('accounting.backend.pages.integrations.transactions.create', [
            'title' => "New Transaction",
            'companies' => Company::all(),
            'entryTypes' => EntryType::all(),
            'currencies' => Currency::all(),
            'processes' => Process::all(),
        ]);
    }

    public function store(Request $request){
        $request->validate([
            'company_id' => 'required',
            'cost_centre_id' => 'required',
            'entry_type_id' => 'required',
            'currency_id' => 'required',
            'number' => 'required',
            'datetime' => 'required',
            'notes' => 'required',
            'sub_process_id' => 'required',
            'amount' => 'required',
        ]);

        if($request->has('debit_ledgers')){
            $request->validate([
                'debit_ledgers.*' => 'required',
            ]);
        }

        if($request->has('credit_ledgers')){
            $request->validate([
                'credit_ledgers.*' => 'required',
            ]);
        }

        DB::beginTransaction();
        try{
            $items = [];
            $subProcess = SubProcess::with([
                'ledgers'
            ])->findOrFail($request->sub_process_id);
            if(isset($subProcess->id)){
                if(isset($request->debit_ledgers) && is_array($request->debit_ledgers) && count($request->debit_ledgers) > 0){
                    foreach ($request->debit_ledgers as $chart_of_account_id => $amount) {
                        array_push($items, [
                            'cost_centre_id' => $request->cost_centre_id,
                            'chart_of_account_id' => $chart_of_account_id,
                            'debit' => $amount,
                            'credit' => 0,
                            'narration' => $subProcess->name.' :: '.$request->notes.' :: Debit',
                            'type' => 'api-integration',
                            'source' => $subProcess->id
                        ]);
                    }
                }else{
                    if($subProcess->ledgers->where('type', 'D')->count() > 0){
                        foreach ($subProcess->ledgers->where('type', 'D') as $key => $ledger) {
                            $amount = 0;
                            if($request->amount > 0 && $ledger->percentage > 0){
                                $amount = floor($request->amount*($ledger->percentage/100));
                            }

                            array_push($items, [
                                'cost_centre_id' => $request->cost_centre_id,
                                'chart_of_account_id' => $ledger->chart_of_account_id,
                                'debit' => $amount,
                                'credit' => 0,
                                'narration' => $subProcess->name.' :: '.$request->notes.' :: Debit',
                                'type' => 'api-integration',
                                'source' => $subProcess->id
                            ]);
                        }
                    }
                }

                if(isset($request->credit_ledgers) && is_array($request->credit_ledgers) && count($request->credit_ledgers) > 0){
                    foreach ($request->credit_ledgers as $chart_of_account_id => $amount) {
                        array_push($items, [
                            'cost_centre_id' => $request->cost_centre_id,
                            'chart_of_account_id' => $chart_of_account_id,
                            'debit' => 0,
                            'credit' => $amount,
                            'narration' => $subProcess->name.' :: '.$request->notes.' :: Credit',
                            'type' => 'api-integration',
                            'source' => $subProcess->id
                        ]);
                    }
                }else{
                    if($subProcess->ledgers->where('type', 'C')->count() > 0){
                        foreach ($subProcess->ledgers->where('type', 'C') as $key => $ledger) {
                            $amount = 0;
                            if($request->amount > 0 && $ledger->percentage > 0){
                                $amount = floor($request->amount*($ledger->percentage/100));
                            }

                            array_push($items, [
                                'cost_centre_id' => $request->cost_centre_id,
                                'chart_of_account_id' => $ledger->chart_of_account_id,
                                'debit' => 0,
                                'credit' => $amount,
                                'narration' => $subProcess->name.' :: '.$request->notes.' :: Credit',
                                'type' => 'api-integration',
                                'source' => $subProcess->id
                            ]);
                        }
                    }
                }
            }

            $exchange_rate_id = getExchangeRates($request->currency_id, date('Y-m-d', strtotime($request->datetime)), date('H:i:s', strtotime($request->datetime)))['rate']->id;
            $entry = saveLedgerEntries($request->entry_type_id, $request->datetime, isset($request->tag_id) ? $request->tag_id : 1, $request->number, $request->notes, $items, $exchange_rate_id, isset($request->is_advance) ? $request->is_advance : 0, isset($request->advance_category_id) ? $request->advance_category_id : 0, isset($request->is_manual) ? $request->is_manual : 0, isset($request->company_id) ? $request->company_id : 0);

            $response = [
                'success' => $entry['success'],
                'id' => isset($entry['entry']) ? $entry['entry']->id : false,
                'code' => isset($entry['entry']) ? $entry['entry']->code : false,
                'entry_type' => isset($entry['entry']) ? $entry['entry']->entryType->name : false,
                'data' => isset($entry['entry']) ? $entry['entry'] : false,
            ];

            $transaction = Transaction::create([
                'sub_process_id' => $subProcess->id,
                'datetime' => $request->datetime,
                'exchange_rate_id' => $exchange_rate_id,
                'amount' => $request->amount,
            ]);

            if(isset($entry['entry']->id)){
                TransactionEntry::create([
                    'transaction_id' => $transaction->id,
                    'entry_id' => $entry['entry']->id,
                ]);
            }

            TransactionLog::create([
                'transaction_id' => $transaction->id,
                'request' => json_encode($request->all()),
                'response' => json_encode($response),
                'logs' => "Posted by ".auth()->user()->name,
            ]);
            
            DB::commit();
            return response()->json($response, $entry['success'] ? 200 : 500);
        }catch (Exception $e){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $e->getMessage()
            ], 500);
        }
    }

    public function show($id)
    {
        $data = [
            'transaction' => Transaction::with([
                'logs'
            ])->findOrFail($id), 
        ];

        return view('accounting.backend.pages.integrations.transactions.logs', $data);
    }
}
