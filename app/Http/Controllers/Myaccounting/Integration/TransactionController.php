<?php
bolt_decrypt( __FILE__ , 'PTbqP0'); return 0;
##!!!##