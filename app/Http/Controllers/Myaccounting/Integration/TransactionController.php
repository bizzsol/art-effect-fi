<?php
bolt_decrypt( __FILE__ , 'URmP2L'); return 0;
##!!!##