<?php
bolt_decrypt( __FILE__ , 'N9nbt5'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting\Integration;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App, DB, DataTables;

use \App\Models\Integration\EntryPoint;
use \App\Models\Integration\EntryPointLedger;

class EntryPointController extends Controller
{

    /**
     * Set global data table headers.
     *
     * @return headerColumns
     */
     public function headerColumns($value='')
     {
        return array(
            ['SL', 'SL'],
            ['code', 'code',],
            ['short_name', 'short_name'],
            ['name', 'name'],
            ['description', 'description'],
            ['debit_ledgers', 'debit_ledgers'],
            ['credit_ledgers', 'credit_ledgers'],
            ['actions', 'actions', 'text-center'],
        );
    }

    public function index()
    {
        try {
            if (request()->ajax()) {
                return Datatables::of(
                    EntryPoint::with([
                        'ledgers.chartOfAccount'
                    ])->when(!datatableOrdering(), function($query){
                        return $query->orderby('id', 'desc');
                    })
                )
                ->addIndexColumn()
                ->addColumn('debit_ledgers', function($point){
                    return $point->ledgers->where('type', 'D')->pluck('chartOfAccount.name')->implode(', ');
                })
                ->addColumn('credit_ledgers', function($point){
                    return $point->ledgers->where('type', 'C')->pluck('chartOfAccount.name')->implode(', ');
                })
                ->addColumn('actions', function($point){
                    return '<a class="btn btn-xs btn-success ml-1" onclick="edit($(this))" data-src="'.url('accounting/entry-points/'.$point->id.'/edit?debits').'">Debits</a><a class="btn btn-xs btn-danger ml-1" onclick="edit($(this))" data-src="'.url('accounting/entry-points/'.$point->id.'/edit?credits').'">Credits</a><br><br><a class="btn btn-xs btn-primary ml-1" onclick="edit($(this))" data-src="'.url('accounting/entry-points/'.$point->id.'/edit').'"><i class="la la-edit"></i></a>
                                <a class="btn btn-xs btn-danger ml-1" onclick="deleteFromCRUD($(this))" data-src="'. route('accounting.entry-points.destroy', $point->id).'"><i class="la la-trash"></i></a>';
                })
                ->rawColumns(['actions'])
                ->make(true);
            }

            $data = [
                'title' => 'List of Entry Points',
                'headerColumns' => $this->headerColumns(),
            ];
            return view('accounting.backend.pages.integrations.entryPoints.index', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function create()
    {
        $data = [
            'title' => 'New Entry Point',
            'code' => uniqueCodeWithoutPrefix(2,'entry_points','code'),
        ];

        return view('accounting.backend.pages.integrations.entryPoints.create', $data);
    }

    public function store(Request $request)
    {
        $request->validate([
            'code' => 'required|unique:entry_points',
            'short_name' => 'required|unique:entry_points',
            'name' => 'required|unique:entry_points',
        ]);

        DB::beginTransaction();
        try{
            $entryPoint = EntryPoint::create($request->all());

            $ledgers = [];
            if(isset($request->debit_ledgers[0])){
                foreach ($request->debit_ledgers as $key => $chart_of_account_id) {
                    array_push($ledgers, [
                        'entry_point_id' => $entryPoint->id,
                        'chart_of_account_id' => $chart_of_account_id,
                        'type' => 'D',
                        'created_by' => auth()->user()->id,
                    ]);
                }
            }

            if(isset($request->credit_ledgers[0])){
                foreach ($request->credit_ledgers as $key => $chart_of_account_id) {
                    array_push($ledgers, [
                        'entry_point_id' => $entryPoint->id,
                        'chart_of_account_id' => $chart_of_account_id,
                        'type' => 'C',
                        'created_by' => auth()->user()->id,
                    ]);
                }
            }

            if(isset($ledgers[0])){
                EntryPointLedger::insert($ledgers);
            }

            DB::commit();
            return $this->redirectBackWithSuccess("Entry Point has been created successfully", 'accounting.entry-points.create');
        }catch (\Throwable $th){
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
    }

    public function edit($id)
    {
        $entryPoint = EntryPoint::with([
            'ledgers'
        ])->findOrFail($id);
        $all = getAllGroupAndLedgers();
        $data = [
            'title' => 'Edit '.$entryPoint->short_name,
            'debit_ledgers' => chartOfAccountsOptions([], 0, 0, $all, $entryPoint->ledgers->where('type', 'D')->pluck('chart_of_account_id')->toArray()),
            'credit_ledgers' => chartOfAccountsOptions([], 0, 0, $all, $entryPoint->ledgers->where('type', 'C')->pluck('chart_of_account_id')->toArray()),
            'entryPoint' => $entryPoint
        ];

        return view('accounting.backend.pages.integrations.entryPoints.edit', $data);
    }

    public function update(Request $request, $id)
    {
        if(!request()->has('debits') && request()->has('credit')){
            $request->validate([
                'short_name' => 'required|unique:entry_points,short_name,'.$id,
                'name' => 'required|unique:entry_points,name,'.$id,
            ]);
        }

        DB::beginTransaction();
        try{
            $entryPoint = EntryPoint::find($id);
            $entryPoint->fill($request->all());
            $entryPoint->save();

            $ledgers = [];
            if(isset($request->debit_ledgers[0])){
                foreach ($request->debit_ledgers as $key => $chart_of_account_id) {
                    array_push($ledgers, [
                        'entry_point_id' => $entryPoint->id,
                        'chart_of_account_id' => $chart_of_account_id,
                        'type' => 'D',
                        'created_by' => auth()->user()->id,
                    ]);
                }
            }

            if(request()->has('debits')){
                EntryPointLedger::where('entry_point_id', $entryPoint->id)->where('type', 'D')->delete();
                if(isset($ledgers[0])){
                    EntryPointLedger::insert($ledgers);
                }
            }

            $ledgers = [];
            if(isset($request->credit_ledgers[0])){
                foreach ($request->credit_ledgers as $key => $chart_of_account_id) {
                    array_push($ledgers, [
                        'entry_point_id' => $entryPoint->id,
                        'chart_of_account_id' => $chart_of_account_id,
                        'type' => 'C',
                        'created_by' => auth()->user()->id,
                    ]);
                }
            }

            if(request()->has('credits')){
                EntryPointLedger::where('entry_point_id', $entryPoint->id)->where('type', 'C')->delete();
                if(isset($ledgers[0])){
                    EntryPointLedger::insert($ledgers);
                }
            }

            DB::commit();
            return response()->json([
                'success' => true,
                'message' => "Entry Point has been updated successfully"
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function destroy($id)
    {
        DB::beginTransaction();
        try{
            EntryPoint::find($id)->delete();
            EntryPointLedger::where('entry_point_id', $id)->delete();

            DB::commit();
            return response()->json([
                'success' => true,
                'message' => "Entry Point has been Deleted!"
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }
}
