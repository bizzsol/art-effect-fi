<?php
bolt_decrypt( __FILE__ , 'YscK9D'); return 0;
##!!!##