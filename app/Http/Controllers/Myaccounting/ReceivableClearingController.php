<?php
bolt_decrypt( __FILE__ , 'pY0Z6w'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App, DB, DataTables;
use Illuminate\Support\Facades\Auth;

use \App\Models\PmsModels\Accounts\Company;
use \App\Models\PmsModels\Accounts\AccountGroup;
use \App\Models\PmsModels\Accounts\FiscalYear;
use \App\Models\PmsModels\Accounts\EntryType;
use \App\Models\PmsModels\Accounts\Tag;
use \App\Models\PmsModels\Accounts\ChartOfAccount;
use \App\Models\PmsModels\Accounts\Entry;
use \App\Models\PmsModels\Accounts\EntryItem;

use \App\Models\PmsModels\Accounts\CurrencyType;
use \App\Models\PmsModels\Accounts\Currency;
use \App\Models\PmsModels\Accounts\ExchangeRate;

use \App\Models\PmsModels\Accounts\FiscalYearClosingLedger;
use \App\Models\PmsModels\Accounts\Clearing;

class ReceivableClearingController extends Controller
{
    public function index()
    {
        try {
            return view('accounting.backend.pages.clearings.receivable.index', [
                'title' => 'Receivable Clearings',
                'groups' => AccountGroup::doesntHave('parent')->where('account_class_id', 1)->get(),
            ]);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function update(Request $request, $zero)
    {
        try {
            $date = $request->date;
            $accountDefaultSettings = accountDefaultSettings();

            $ledgers = ChartOfAccount::with([
                'accountGroup.accountClass'
            ])
            ->whereIn('id', isset($request->ledgers[0]) ? $request->ledgers : [])
            ->orderBy('code', 'asc')
            ->get();

            $entries = EntryItem::with([
                'entry.entryType',
                'entry.exchangeRate.currency',
            ])
            ->whereDoesntHave('entry.purchaseOrder')
            ->whereDoesntHave('entry.saleOrder')
            ->when($date, function($query) use($date){
                return $query->whereHas('entry', function($query) use($date){
                    return $query->where('date', '<=', $date);
                });
            })
            ->whereIn('chart_of_account_id', $ledgers->pluck('id')->toArray())
            ->where('realized', 0)
            ->get();

            return view('accounting.backend.pages.clearings.receivable.form', [
                'date' => $date,
                'ledgers' => $ledgers,
                'accountDefaultSettings' => $accountDefaultSettings,
                'entries' => $entries,
                'systemCurrency' => systemCurrency()
            ]);
        }catch (\Throwable $th){
            return $th->getMessage();
        }
    }

    public function store(Request $request)
    {
        $request->validate([
            'date' => 'required',
        ]);

        DB::beginTransaction();
        try{
            
            $accountDefaultSettings = accountDefaultSettings();
            $unrealizedCurrencyEventSettings = unrealizedCurrencyEventSettings();
            $systemCurrency = systemCurrency();

            $entries = EntryItem::with([
                'entry.entryType',
                'entry.exchangeRate.currency',
            ])
            ->whereDoesntHave('entry.purchaseOrder')
            ->whereDoesntHave('entry.saleOrder')
            ->when($request->date, function($query) use($request){
                return $query->whereHas('entry', function($query) use($request){
                    return $query->where('date', '<=', $request->date);
                });
            })
            ->whereIn('chart_of_account_id', array_unique($request->ledgers))
            ->where('realized', 0)
            ->get();

            $debits = [];
            $debit_entries = [];
            $sl = 0;
            if($entries->where('debit_credit', 'D')->count() > 0){
                foreach($entries->where('debit_credit', 'D') as $key => $entry){
                    $sl++;
                    $rate = isset(json_decode($entry->entry->exchangeRate->rates, true)[$systemCurrency->id]['rate']) ? json_decode($entry->entry->exchangeRate->rates, true)[$systemCurrency->id]['rate'] : 1;
                    $amount = $entry->amount*$rate;
                    $debits['D-'.$sl] = $amount;
                    $debit_entries['D-'.$sl] = $entry->id;
                }
            }

            $credits = [];
            if($entries->where('debit_credit', 'C')->count() > 0){
                foreach($entries->where('debit_credit', 'C') as $key => $entry){
                    $rate = isset(json_decode($entry->entry->exchangeRate->rates, true)[$systemCurrency->id]['rate']) ? json_decode($entry->entry->exchangeRate->rates, true)[$systemCurrency->id]['rate'] : 1;
                    $amount = $entry->amount*$rate;
                    $credits[$entry->id] = $amount;
                }
            }

            $array = [];
            $realized_entries = [];
            $total_gain = 0;
            $total_loss = 0;
            if(isset($request->debits) && is_array($request->debits) && count($request->debits) > 0){
                foreach($request->debits as $entry_id => $debit_key){
                    if(isset($debits[$debit_key])){
                        $credit_rate = isset(json_decode($entries->where('id', $entry_id)->first()->entry->exchangeRate->rates, true)[$systemCurrency->id]['rate']) ? json_decode($entries->where('id', $entry_id)->first()->entry->exchangeRate->rates, true)[$systemCurrency->id]['rate'] : 1;
                        $debit_rate = isset(json_decode($entries->where('id', $debit_entries[$debit_key])->first()->entry->exchangeRate->rates, true)[$systemCurrency->id]['rate']) ? json_decode($entries->where('id', $debit_entries[$debit_key])->first()->entry->exchangeRate->rates, true)[$systemCurrency->id]['rate'] : 1;

                        array_push($array, [
                            'cost_centre_id' => auth()->user()->costCentre->id,
                            'chart_of_account_id' => $entries->where('id', $entry_id)->first()->chart_of_account_id,
                            'debit' => $entries->where('id', $entry_id)->first()->amount*$credit_rate,
                            'credit' => 0,
                            'narration' => 'Receivable Debit',
                        ]);

                        array_push($array, [
                            'cost_centre_id' => auth()->user()->costCentre->id,
                            'chart_of_account_id' => $entries->where('id', $debit_entries[$debit_key])->first()->chart_of_account_id,
                            'debit' => 0,
                            'credit' => $entries->where('id', $debit_entries[$debit_key])->first()->amount*$debit_rate,
                            'narration' => 'Receivable Credit',
                        ]);

                        $gain_loss = $credits[$entry_id] - $debits[$debit_key];
                        if($gain_loss >= 0){
                            $total_gain += $gain_loss;
                        }elseif($gain_loss < 0){
                            $total_loss += ($gain_loss*(-1));
                        }

                        array_push($realized_entries, $entry_id);
                        array_push($realized_entries, $debit_entries[$debit_key]);
                    }
                }
            }

            if($total_loss > 0){
                array_push($array, [
                    'cost_centre_id' => auth()->user()->costCentre->id,
                    'chart_of_account_id' => $accountDefaultSettings['currency_gain_loss_account'],
                    'debit' => $total_loss,
                    'credit' => 0,
                    'narration' => 'Realized Loss Gain/Loss Debit',
                ]);
            }

            if($total_gain >= 0 && $total_loss <= 0){
                array_push($array, [
                    'cost_centre_id' => auth()->user()->costCentre->id,
                    'chart_of_account_id' => $accountDefaultSettings['currency_gain_loss_account'],
                    'debit' => 0,
                    'credit' => $total_gain,
                    'narration' => 'Realized Gain Gain/Loss Credit',
                ]);
            }

            $exchange_rate_id = getExchangeRates($systemCurrency->id, $request->date, '23:59:59')['rate']->id;
            $entry = saveLedgerEntries(5, date('Y-m-d H:i:s', strtotime($request->date)), 1, '', 'Realized Currency Evaluation', $array, $exchange_rate_id, 0, 0, 0, getCostCentreCompany(auth()->user()->costCentre->id));

            if(isset($entry['entry']->id)){
                EntryItem::where('entry_id', $entry['entry']->id)
                ->update([
                    'realized' => 1
                ]);
            }

            EntryItem::whereIn('id', $realized_entries)
            ->where('realized', 0)
            ->update([
                'realized' => 1
            ]);

            if(isset($entry['entry']->id)){
                Clearing::create([
                    'reference' => \Str::slug(32),
                    'type' => 'receivable',
                    'ledgers' => json_encode(array_unique($request->ledgers)),
                    'entry_id' => $entry['entry']->id,
                    'entry_items' => json_encode($realized_entries),
                ]);
            }

            DB::commit();
            session()->flash('alert-type', 'success');
            session()->flash('message', "Clearing Postings has been posted successfully.");
            return redirect()->back();
        }catch (\Throwable $th){
            DB::rollback();
            session()->flash('alert-type', 'error');
            session()->flash('message', $th->getMessage());
            return redirect()->back();
        }
    }
}
