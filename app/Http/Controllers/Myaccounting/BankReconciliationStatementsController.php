<?php
bolt_decrypt( __FILE__ , 'jDFOcE'); return 0;
##!!!##