<?php
bolt_decrypt( __FILE__ , 'TdmQ84'); return 0;
##!!!##