<?php
bolt_decrypt( __FILE__ , 'wJUEc9'); return 0;
##!!!##