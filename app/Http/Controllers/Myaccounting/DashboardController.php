<?php
bolt_decrypt( __FILE__ , 'vWKVED'); return 0;
##!!!##