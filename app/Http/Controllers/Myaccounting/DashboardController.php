<?php
bolt_decrypt( __FILE__ , 'lM7lGT'); return 0;
##!!!##