<?php
bolt_decrypt( __FILE__ , '0xCfkD'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use \App\Models\PmsModels\Accounts\Company;

use App,DB;
use Illuminate\Support\Facades\Auth;
use DataTables;

class CompanyController extends Controller
{

    /**
     * Set global data table headers.
     *
     * @return headerColumns
     */
     public function headerColumns($value='')
     {
        $rows =  array(
            ['SL', 'SL'],
            ['code', 'code',],
            ['name', 'name'],
            ['owner_name', 'owner_name', 'text-left'],
            ['phone', 'phone', 'text-center'], 
            ['email', 'email', 'text-center'],
            ['address', 'address', 'text-left'], 
            ['logo', 'logo', 'text-left'], 
            ['banner', 'banner', 'text-left'], 
            ['actions', 'actions', 'text-center'],
        );
        return $rows;
    }

    public function index()
    {
        $title = 'List of Companies';
        try {

            $companies=Company::when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });

            $options=[
                'company-profile'=>auth()->user()->hasPermissionTo('company-profile'),
                'company-edit'=>auth()->user()->hasPermissionTo('company-edit'),
                'company-delete'=>auth()->user()->hasPermissionTo('company-delete'),
            ];

            if (request()->ajax()) {
                return Datatables::of($companies)
                ->addIndexColumn()
                ->editColumn('logo', function($company){
                    if(!empty($company->logo)){
                        return '<img src="'.asset($company->logo).'" style="max-height: 25px">';
                    }
                })
                ->editColumn('banner', function($company){
                    if(!empty($company->banner)){
                        return '<img src="'.asset($company->banner).'" style="max-height: 25px">';
                    }
                })
                ->addColumn('actions', function($company) use($options){
                    $actions='';

                    if($options['company-profile']){
                        $actions.='<a class="btn btn-xs btn-success" href="'.url('accounting/companies/'.$company->id).'"><i class="lar la-address-card"></i></a>';
                    }
                    if($options['company-edit']){
                        $actions.='<a class="btn btn-xs btn-primary ml-1" href="'.url('accounting/companies/'.$company->id.'/edit').'"><i class="la la-edit"></i></a>';
                    }

                    if($options['company-delete']){
                        $actions.='<a class="btn btn-xs btn-danger deleteBtn ml-1" onclick="deleteBtn($(this))" data-src="'. route('accounting.companies.destroy', $company->id).'"><i class="la la-trash"></i></a>';
                    }
                    return $actions;
                })
                ->rawColumns(['logo','banner','actions'])
                ->make(true);
            }

            $data = [
                'title' => $title,
                'headerColumns' => $this->headerColumns(),
            ];
            return view('accounting.backend.pages.companies.index', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function create()
    {
        $data = [
            'title' => 'New Company',
            'code' => uniqueCodeWithoutPrefix(2,'companies','code')
        ];

        return view('accounting.backend.pages.companies.create', $data);
    }

    public function store(Request $request)
    {
        $request->validate([
            'code' => 'required|unique:companies',
            'name' => 'required|unique:companies',
            'owner_name' => 'required',
            'phone' => ['required', 'string', 'max:14', 'regex:/^([0-9\s\-\+\(\)]*)$/'],
            'email' => 'required',
            'address' => 'required',
            'logo_file' => ['required','mimes:jpeg,jpg,png,gif', 'max:3072'],
            'banner_file' => ['required','mimes:jpeg,jpg,png,gif', 'max:3072'],
        ]);

        DB::beginTransaction();
        try{
            $company = Company::create($request->all());
            if($request->hasFile('logo_file')){
                $company->logo = $this->fileUpload($request->file('logo_file'), 'upload/company/logo');
                $company->save();
            }

            if($request->hasFile('banner_file')){
                $company->banner = $this->fileUpload($request->file('banner_file'), 'upload/company/banner');
                $company->save();
            }

            DB::commit();
            return $this->redirectBackWithSuccess("Company has been created successfully", 'accounting.companies.create');
        }catch (\Throwable $th){
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
    }

    public function show($id)
    {
        $company = Company::findOrFail($id);
        $data = [
            'title' => 'Company Profile - #'.$company->name,
            'company' => $company
        ];

        return view('accounting.backend.pages.companies.profile', $data);
    }

    public function edit($id)
    {
        $data = [
            'title' => 'Edit Company',
            'company' => Company::findOrFail($id)
        ];

        return view('accounting.backend.pages.companies.edit', $data);
    }

    public function update(Request $request, $id)
    {
        $request->validate([
            'code' => 'required|unique:companies,code,'.$id,
            'name' => 'required|unique:companies,name,'.$id,
            'owner_name' => 'required',
            'phone' => ['required', 'string', 'max:14', 'regex:/^([0-9\s\-\+\(\)]*)$/'],
            'email' => 'required',
            'address' => 'required',
        ]);

        if($request->hasFile('logo_file')){
            $request->validate([
                'logo_file' => ['required','mimes:jpeg,jpg,png,gif', 'max:3072'],
            ]);
        }

        if($request->hasFile('banner_file')){
            $request->validate([
                'banner_file' => ['required','mimes:jpeg,jpg,png,gif', 'max:3072'],
            ]);
        }

        DB::beginTransaction();
        try{
            $company = Company::find($id);
            $company->fill($request->all());
            $company->save();

            if($request->hasFile('logo_file')){
                if(!empty($company->logo) && file_exists(public_path($company->logo))){
                    unlink(public_path($company->logo));
                }
                $company->logo = $this->fileUpload($request->file('logo_file'), 'upload/company/logo');
                $company->save();
            }

            if($request->hasFile('banner_file')){
                if(!empty($company->banner) && file_exists(public_path($company->banner))){
                    unlink(public_path($company->banner));
                }
                $company->banner = $this->fileUpload($request->file('banner_file'), 'upload/company/banner');
                $company->save();
            }

            DB::commit();
            return $this->redirectBackWithSuccess("Company has been updated successfully", 'accounting.companies.index');
        }catch (\Throwable $th){
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
    }

    public function destroy($id)
    {
        DB::beginTransaction();
        try{
            $company = Company::find($id);
            if(!empty($company->logo) && file_exists(public_path($company->logo))){
                unlink(public_path($company->logo));
            }

            if(!empty($company->banner) && file_exists(public_path($company->banner))){
                unlink(public_path($company->banner));
            }
            $delete = Company::find($id)->delete();

            DB::commit();
            return response()->json([
                'success' => true,
                'message' => "Company has been Deleted!"
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }
}
