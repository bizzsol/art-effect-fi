<?php
bolt_decrypt( __FILE__ , 'Fn8gs1'); return 0;
##!!!##