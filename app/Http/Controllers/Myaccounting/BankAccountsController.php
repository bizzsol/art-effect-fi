<?php
bolt_decrypt( __FILE__ , 'oEg5aO'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting;

use App;
use App\Http\Controllers\Controller;
use App\Models\PmsModels\Accounts\Company;
use App\Models\PmsModels\Accounts\AccountGroup;
use App\Models\PmsModels\Accounts\Bank;
use App\Models\PmsModels\Accounts\BankAccount;
use App\Models\PmsModels\Accounts\BankAccountType;
use App\Models\PmsModels\Accounts\BankBranch;
use App\Models\PmsModels\Accounts\ChartOfAccount;
use App\Models\PmsModels\Accounts\CurrencyType;
use Yajra\DataTables\Facades\DataTables;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\Request;

class BankAccountsController extends Controller
{
    public function headerColumns($value = '')
    {
        return array(
            ['SL', 'SL'],
            ['code', 'code', 'text-center'],
            ['type', 'type', 'text-center'],
            ['name', 'name', 'text-center'],
            ['number', 'number', 'text-center'],
            ['bank_name', 'bank_name', 'text-center'],
            ['bank_branch_name', 'bank_branch_name', 'text-center'],
            ['bank_address', 'bank_address', 'text-center'],
            ['currency', 'currency', 'text-center'],
            ['ledger', 'ledger', 'text-center'],
            ['companies', 'companies', 'text-center'],
            // ['charges_account', 'charges_account', 'text-center'],
            ['status', 'status', 'text-center'],
            ['actions', 'actions', 'text-center']
        );
    }

    public function index()
    {
        if(request()->has('ledger-with-no-bank-accounts')){
            return downloadExcel('accounting.backend.pages.bankAccounts.excel', [
                'ledgers' => ChartOfAccount::with([
                    'bankAccounts',
                    'companies.company'
                ])
                ->whereHas('companies.company', function($query){
                    return $query->where('code', request()->get('company'));
                })
                ->get()
            ], request()->get('company').'-ledger-with-no-bank-accounts');
        }

        try {
            if (request()->ajax()) {
                return DataTables::of(
                        BankAccount::with([
                            'currency',
                            'chartOfAccount.companies.company',
                            'bankChargesAccount',
                            'bankAccountType',
                            'bankBranch.bank'
                        ])
                    )
                    ->addIndexColumn()

                    ->addColumn('type', function ($bankAccount) {
                        return isset($bankAccount->bankAccountType->name) ? $bankAccount->bankAccountType->name . '('
                            . $bankAccount->bankAccountType->code . ')' : '';
                    })
                    ->filterColumn('type', function ($query, $keyword) {
                        return $query->whereHas('bankAccountType', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%')
                                ->orWhere('code', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('type', function ($query, $order) {
                        return pleaseSortMe($query, $order, BankAccountType::select('bank_account_types.name')
                            ->whereColumn('bank_account_types.id', 'bank_accounts.bank_account_type_id')
                            ->take(1)
                        );
                    })

                    ->addColumn('bank_name', function ($bankAccount) {
                        return isset($bankAccount->bankBranch->bank->name) ? $bankAccount->bankBranch->bank->name . '('
                            . $bankAccount->bankBranch->bank->code . ')' : '';
                    })
                    ->filterColumn('bank_name', function ($query, $keyword) {
                        return $query->whereHas('bankBranch.bank', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%')
                                ->orWhere('code', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('bank_name', function ($query, $order) {
                        return pleaseSortMe($query, $order, BankBranch::select('banks.name')
                            ->join('banks', 'banks.id', '=', 'bank_branches.bank_id')
                            ->whereColumn('bank_branches.id', 'bank_accounts.bank_branch_id')
                            ->take(1)
                        );
                    })

                    ->addColumn('bank_branch_name', function ($bankAccount) {
                        return isset($bankAccount->bankBranch->name) ? $bankAccount->bankBranch->name . '('
                            . $bankAccount->bankBranch->code . ')' : '';
                    })
                    ->filterColumn('bank_branch_name', function ($query, $keyword) {
                        return $query->whereHas('bankBranch', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%')
                                ->orWhere('code', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('bank_branch_name', function ($query, $order) {
                        return pleaseSortMe($query, $order, BankBranch::select('bank_branches.name')
                            ->whereColumn('bank_branches.id', 'bank_accounts.bank_branch_id')
                            ->take(1)
                        );
                    })

                    ->addColumn('bank_address', function ($bankAccount) {
                        return isset($bankAccount->bankBranch->address) ? $bankAccount->bankBranch->address : '';
                    })
                    ->filterColumn('bank_address', function ($query, $keyword) {
                        return $query->whereHas('bankBranch', function ($query) use ($keyword) {
                            $query->where('address', 'LIKE', '%' . $keyword . '%');

                        });
                    })
                    ->orderColumn('bank_address', function ($query, $order) {
                        return pleaseSortMe($query, $order, BankBranch::select('bank_branches.address')
                            ->whereColumn('bank_branches.id', 'bank_accounts.bank_branch_id')
                            ->take(1)
                        );
                    })

                    ->addColumn('currency', function ($bankAccount) {
                        return $bankAccount->currency->code;
                    })
                    ->filterColumn('currency', function ($query, $keyword) {
                        return $query->whereHas('currency', function ($query) use ($keyword) {
                            $query->where('code', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('currency', function ($query, $order) {
                        return pleaseSortMe($query, $order, Currency::select('currencies.name')
                            ->whereColumn('currencies.id', 'bank_accounts.currency_id')
                            ->take(1)
                        );
                    })

                    ->addColumn('ledger', function ($bankAccount) {
                        return isset($bankAccount->chartOfAccount->code) ? '[' . $bankAccount->chartOfAccount->code . '] ' . $bankAccount->chartOfAccount->name : '';
                    })
                    ->filterColumn('ledger', function ($query, $keyword) {
                        return $query->whereHas('chartOfAccount', function ($query) use ($keyword) {
                            $query->where('code', 'LIKE', '%' . $keyword . '%')
                                ->orWhere('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('ledger', function ($query, $order) {
                        return pleaseSortMe($query, $order, ChartOfAccount::select('chart_of_accounts.name')
                            ->whereColumn('chart_of_accounts.id', 'bank_accounts.chart_of_account_id')
                            ->take(1)
                        );
                    })

                    ->addColumn('companies', function ($bankAccount) {
                        return isset($bankAccount->chartOfAccount->code) ? $bankAccount->chartOfAccount->companies->pluck('company.code')->implode(', ')  : '';
                    })
                    ->filterColumn('companies', function ($query, $keyword) {
                        return $query->whereHas('chartOfAccount.companies.company', function ($query) use ($keyword) {
                            $query->where('code', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('companies', function ($query, $order) {
                        return pleaseSortMe($query, $order, ChartOfAccount::select('companies.code')
                            ->join('companies', 'companies.id', '=', 'chart_of_account_companies.company_id')
                            ->join('chart_of_account_companies', 'chart_of_account_companies.chart_of_account_id', '=', 'chart_of_accounts.id')
                            ->whereColumn('chart_of_accounts.id', 'bank_accounts.chart_of_account_id')
                            ->take(1)
                        );
                    })
                    
                    ->addColumn('status', function ($bankAccount) {
                        return view('accounting.backend.pages.approval-stage', [
                            'object' => $bankAccount
                        ])->render();
                    })
                    ->addColumn('actions', function ($bankAccount) {
                        $actions = '';
                        if (auth()->user()->hasPermissionTo('bank-account-edit')) {
                            if($bankAccount->status ==1) {
                                $actions .= '<a class="btn btn-xs btn-success" data-id="'.$bankAccount->id.'" data-table="'.$bankAccount->getTable().'" onclick="toggleStatus($(this))"><i class="la la-check"></i></a>&nbsp;';
                            }else{
                                 $actions .= '<a class="btn btn-xs btn-danger" data-id="'.$bankAccount->id.'" data-table="'.$bankAccount->getTable().'" onclick="toggleStatus($(this))"><i class="la la-check"></i></a>&nbsp;';
                            }
                            
                            $actions .= '<a class="btn btn-xs btn-primary" href="' . url('accounting/bank-accounts/' . $bankAccount->id . '/edit') . '"><i class="la la-edit"></i></a>&nbsp;';
                        }

                        if (auth()->user()->hasPermissionTo('bank-account-delete')) {
                            $actions .= '<a class="btn btn-xs btn-danger" onclick="deleteFromCRUD($(this))" data-src="' . route('accounting.bank-accounts.destroy', $bankAccount->id) . '"><i class="la la-trash"></i></a>&nbsp;';
                        }

                        $actions .= view('accounting.backend.pages.approval', [
                            'object' => $bankAccount,
                            'table' => 'bank_accounts'
                        ])->render();

                        return $actions;
                    })
                    
                    ->rawColumns(['status', 'actions', 'type'])
                    ->toJson();
            }

            return view('accounting.backend.pages.bankAccounts.index', [
                'title' => 'Bank Accounts',
                'headerColumns' => $this->headerColumns()
            ]);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function create()
    {
        if(request()->has('get-coa')){
            return chartOfAccountsOptions([], request()->get('chosen'), 0, getAllGroupAndLedgers(false, false, [1, 2, 3]), false, '', false, [request()->get('company_id')]);
        }

        $data = [
            'title' => 'New Bank Account',
            'code' => uniqueCodeWithoutPrefix(2, 'bank_accounts', 'code'),
            'currencyTypes' => CurrencyType::with(['currencies'])->get(),
            'bankAccountTypes' => BankAccountType::all(),
            'banks' => Bank::with(['branches'])->get(),
            'accountDefaultSettings' => accountDefaultSettings(),
            'companies' => Company::has('profitCentres.costCentres')
            ->whereHas('users', function($query){
                return $query->where('user_id', auth()->user()->id);
            })
            ->get(),
        ];

        return view('accounting.backend.pages.bankAccounts.create', $data);
    }

    public function store(Request $request)
    {
        $request->validate([
            'code' => 'required|unique:bank_accounts',
            'bank_account_type_id' => 'required',
            'name' => 'required',
            'number' => 'required',
            'bank_branch_id' => 'required',
            'chart_of_account_id' => ['required'],
            'currency_id' => ['required'],
        ]);

        DB::beginTransaction();
        try {
            $bank_account = BankAccount::create($request->all());
            reviewStatus($bank_account);

            /*$ledgerGroup = $this->getLedgerGroup($bank_account);
            saveGLForObjects($bank_account, $bank_account->chartOfAccount, $request, 'chart_of_account_id', $ledgerGroup);*/
            // saveGLForObjects($bank_account, $bank_account->bankChargesAccount, $request, 'bank_charges_account', $ledgerGroup);

            DB::commit();
            return $this->redirectBackWithSuccess("Bank Account has been created successfully", 'accounting.bank-accounts.index');
        } catch (\Throwable $th) {
            DB::rollBack();
            return $this->backWithError($th->getMessage());
        }
    }

    public function getLedgerGroup($bank_account)
    {
        $parent = AccountGroup::find(accountDefaultSettings()['bank_account_group']);
        if (isset($parent->id)) {
            $parentGroup = AccountGroup::where([
                'parent_id' => $parent->id,
                'name' => trim(bankAccountTypes()[$bank_account->type]['name']),
            ])->first();
            if (!isset($parentGroup->id)) {
                $parentGroup = AccountGroup::create([
                    'parent_id' => $parent->id,
                    'code' => uniqueCodeWithoutPrefix(4, 'account_groups', 'id'),
                    'name' => trim(bankAccountTypes()[$bank_account->type]['name']),
                    'account_class_id' => $parent->account_class_id,
                ]);
            }

            $group = AccountGroup::where([
                'parent_id' => $parentGroup->id,
                'name' => $bank_account->bank_name,
            ])->first();
            if (!isset($group->id)) {
                $group = AccountGroup::create([
                    'parent_id' => $parentGroup->id,
                    'code' => uniqueCodeWithoutPrefix(4, 'account_groups', 'id'),
                    'name' => $bank_account->bank_name,
                    'account_class_id' => $parentGroup->account_class_id,
                ]);
            }

            return $group->id;
        }

        return false;
    }

    public function show($id)
    {

    }

    public function edit($id)
    {
        $bankAccount = BankAccount::with([
            'chartOfAccount.companies',
            'bankChargesAccount'
        ])->findOrFail($id);

        $data = [
            'title' => 'Edit Bank Account',
            'bankAccount' => $bankAccount,
            'currencyTypes' => CurrencyType::with(['currencies'])->get(),
            'bankAccountTypes' => BankAccountType::all(),
            'banks' => Bank::with(['branches'])->get(),
            'companies' => Company::has('profitCentres.costCentres')
            ->whereHas('users', function($query){
                return $query->where('user_id', auth()->user()->id);
            })
            ->get(),
            'chartOfAccountsOptions' => chartOfAccountsOptions([], $bankAccount->chart_of_account_id, 0, getAllGroupAndLedgers(false, false, [1, 2, 3]), false, '', false, [$bankAccount->chartOfAccount->companies->first()->company_id]),
        ];

        return view('accounting.backend.pages.bankAccounts.edit', $data);
    }

    public function update(Request $request, $id)
    {
        $request->validate([
            'code' => 'required|unique:bank_accounts,code,' . $id,
            'bank_account_type_id' => 'required',
            'name' => 'required',
            'number' => 'required',
            'bank_branch_id' => 'required',
            'chart_of_account_id' => ['required'],
            'currency_id' => ['required'],
        ]);

        DB::beginTransaction();
        try {
            $bank_account = BankAccount::find($id);
            $bank_account->fill($request->all());
            $bank_account->save();
            reviewStatus($bank_account);

            /*$ledgerGroup = $this->getLedgerGroup($bank_account);
            saveGLForObjects($bank_account, $bank_account->chartOfAccount, $request, 'chart_of_account_id', $ledgerGroup);*/
            // saveGLForObjects($bank_account, $bank_account->bankChargesAccount, $request, 'bank_charges_account', $ledgerGroup);

            \DB::commit();
            return $this->redirectBackWithSuccess("Bank Account has been updated successfully", 'accounting.bank-accounts.index');
        } catch (\Throwable $th) {
            \DB::rollBack();
            return $this->backWithError($th->getMessage());
        }
    }

    public function destroy($id)
    {
        \DB::beginTransaction();
        try {
            BankAccount::find($id)->delete();
            \DB::commit();
            return response()->json([
                'success' => true,
                'message' => "Bank Account has been Deleted!"
            ]);
        } catch (\Throwable $th) {
            \DB::rollBack();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }
}
