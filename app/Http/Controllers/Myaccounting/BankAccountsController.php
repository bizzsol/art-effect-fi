<?php
bolt_decrypt( __FILE__ , 'CQ6ktB'); return 0;
##!!!##