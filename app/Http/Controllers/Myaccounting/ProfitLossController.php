<?php
bolt_decrypt( __FILE__ , 'n6TTAs'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use \App\Models\PmsModels\Accounts\Company;
use \App\Models\PmsModels\Accounts\ProfitCentre;
use \App\Models\PmsModels\Accounts\CostCentre;
use \App\Models\PmsModels\Accounts\AccountGroup;
use \App\Models\PmsModels\Accounts\FiscalYear;
use \App\Models\PmsModels\Accounts\EntryType;
use \App\Models\PmsModels\Accounts\Tag;
use \App\Models\PmsModels\Accounts\ChartOfAccount;
use \App\Models\PmsModels\Accounts\Entry;
use \App\Models\PmsModels\Accounts\EntryItem;

use \App\Models\PmsModels\Accounts\CurrencyType;
use \App\Models\PmsModels\Accounts\Currency;
use \App\Models\PmsModels\Accounts\ExchangeRate;

use \App\Models\PmsModels\Accounts\FiscalYearClosing;
use \App\Models\PmsModels\Accounts\FiscalYearClosingLedger;

use App, DB;
use Illuminate\Support\Facades\Auth;

class ProfitLossController extends Controller
{
    public function index(Request $request)
    {
        try {
            $title = 'Trading and Profit & Loss Statement';
            
            $fiscalYear = getActiveFiscalYear();
            $accountDefaultSettings = accountDefaultSettings();
            $systemCurrency = systemCurrency();

            $incomes = '';
            $expenses = '';
            $groupWise = false;
            if(request()->has('report_type')){

                $currency_id = request()->has('currency_id') ? request()->get('currency_id') : 0;
                $company_id = request()->has('company_id') ? request()->get('company_id') : 0;
                $profit_centre_id = request()->has('profit_centre_id') ? request()->get('profit_centre_id') : 0;
                $cost_centre_id = request()->has('cost_centre_id') ? request()->get('cost_centre_id') : 0;
                $fiscal_year_id = request()->has('fiscal_year_id') ? request()->get('fiscal_year_id') : 0;
                $fiscalYear = FiscalYear::findOrFail($fiscal_year_id);
                $all = getAllGroupAndLedgers();

                $rate = 1;
                if($systemCurrency->id != $currency_id){
                    $rates = getExchangeRates($systemCurrency->id);
                    $rate = isset($rates['rates'][$currency_id]['rate']) ? $rates['rates'][$currency_id]['rate'] : 1;
                }

                $debitEntryItems = EntryItem::join('entries', 'entries.id', '=', 'entry_items.entry_id')
                ->join('cost_centres', 'cost_centres.id', '=', 'entry_items.cost_centre_id')
                ->join('profit_centres', 'profit_centres.id', '=', 'cost_centres.profit_centre_id')

                ->join('chart_of_accounts', 'chart_of_accounts.id', '=', 'entry_items.chart_of_account_id')
                ->join('account_groups', 'account_groups.id', '=', 'chart_of_accounts.account_group_id')

                ->whereIn('account_groups.account_class_id', [4, 5])

                ->where('entries.is_approved', 'approved')
                ->where('entries.date', '>=', $request->from)
                ->where('entries.date', '<=', $request->to)
                ->where('entries.fiscal_year_id', $fiscal_year_id)
                ->where('profit_centres.company_id', $company_id)

                ->when($profit_centre_id > 0, function($query) use($profit_centre_id){
                    return $query->where('cost_centres.profit_centre_id', $profit_centre_id);
                })
                ->when($cost_centre_id > 0, function($query) use($cost_centre_id){
                    return $query->where('entry_items.cost_centre_id', $cost_centre_id);
                })

                ->where('entry_items.debit_credit', 'D')

                ->groupBy('entry_items.chart_of_account_id')

                ->get([
                    'entry_items.chart_of_account_id',
                    DB::raw('sum(entry_items.reporting_amount) as reporting_amount')
                ]);

                $creditEntryItems = EntryItem::join('entries', 'entries.id', '=', 'entry_items.entry_id')
                ->join('cost_centres', 'cost_centres.id', '=', 'entry_items.cost_centre_id')
                ->join('profit_centres', 'profit_centres.id', '=', 'cost_centres.profit_centre_id')

                ->join('chart_of_accounts', 'chart_of_accounts.id', '=', 'entry_items.chart_of_account_id')
                ->join('account_groups', 'account_groups.id', '=', 'chart_of_accounts.account_group_id')

                ->whereIn('account_groups.account_class_id', [4, 5])

                ->where('entries.is_approved', 'approved')
                ->where('entries.date', '>=', $request->from)
                ->where('entries.date', '<=', $request->to)
                ->where('entries.fiscal_year_id', $fiscal_year_id)
                ->where('profit_centres.company_id', $company_id)

                ->when($profit_centre_id > 0, function($query) use($profit_centre_id){
                    return $query->where('cost_centres.profit_centre_id', $profit_centre_id);
                })
                ->when($cost_centre_id > 0, function($query) use($cost_centre_id){
                    return $query->where('entry_items.cost_centre_id', $cost_centre_id);
                })

                ->where('entry_items.debit_credit', 'C')

                ->groupBy('entry_items.chart_of_account_id')

                ->get([
                    'entry_items.chart_of_account_id',
                    DB::raw('sum(entry_items.reporting_amount) as reporting_amount')
                ]);

                $carryForwarded = FiscalYearClosingLedger::join('fiscal_year_closings', 'fiscal_year_closings.id', '=', 'fiscal_year_closing_ledgers.fiscal_year_closing_id')

                ->join('chart_of_accounts', 'chart_of_accounts.id', '=', 'fiscal_year_closing_ledgers.chart_of_account_id')
                ->join('account_groups', 'account_groups.id', '=', 'chart_of_accounts.account_group_id')

                ->whereIn('account_groups.account_class_id', [4, 5])
                
                ->where('fiscal_year_closings.company_id', $company_id)
                ->where('fiscal_year_closings.to_fiscal_year_id', $fiscalYear->id)
                
                ->groupBy('fiscal_year_closing_ledgers.chart_of_account_id')

                ->get([
                    'fiscal_year_closing_ledgers.chart_of_account_id',
                    DB::raw('sum(fiscal_year_closing_ledgers.carry_forwarding_amount) as carry_forwarding_amount')
                ]);

                $incomeGroups = AccountGroup::doesntHave('parent')->whereIn('account_class_id', [4])->get();
                $expenseGroups = AccountGroup::doesntHave('parent')->whereIn('account_class_id', [5])->get();

                $incomeBalances = [];
                $expenseBalances = [];

                $groupWise = ($request->group_wise == 1);
                if($groupWise){
                    if($incomeGroups->count() > 0){
                        foreach($incomeGroups as $key => $group){
                            $incomes .= balanceSheet($company_id, $group, $request->from, $request->to, 0, !(request()->has('report_type') && $request->report_type == 'pdf'), ['D' => $debitEntryItems, 'C' => $creditEntryItems], $all, $carryForwarded, $rate);
                        }
                    }
                }else{
                    $chartOfAccounts = ChartOfAccount::with([
                        'accountGroup.accountClass'
                    ])
                    ->whereHas('accountGroup', function($query){
                        return $query->whereIn('account_class_id', [4]);
                    })
                    ->orderBy('code', 'asc')->get();
                    if($chartOfAccounts->count() > 0){
                        foreach($chartOfAccounts as $key => $account){
                            $balanceSheetLedger = balanceSheetLedger($company_id, $account, $request->from, $request->to, 0, !(request()->has('report_type') && $request->report_type == 'pdf'), ['D' => $debitEntryItems, 'C' => $creditEntryItems], $all, $carryForwarded, $rate);
                            
                            $incomes .= $balanceSheetLedger['data'];
                            array_push($incomeBalances, $balanceSheetLedger['balance']);
                        }

                        $incomes .= '<tr>
                            <td colspan="2"><strong>Total '.$incomeGroups->pluck('name')->implode(', ').':</strong></td>
                            <td class="closing_balance_column" style="text-align: right"><strong>'.systemMoneyFormat(array_sum($incomeBalances)).'</strong></td>
                        </tr>';
                    }
                }

                if($groupWise){
                    if($expenseGroups->count() > 0){
                        foreach($expenseGroups as $key => $group){
                            $expenses .= balanceSheet($company_id, $group, $request->from, $request->to, 0, !(request()->has('report_type') && $request->report_type == 'pdf'), ['D' => $debitEntryItems, 'C' => $creditEntryItems], $all, $carryForwarded, $rate);
                        }
                    }
                }else{
                    $chartOfAccounts = ChartOfAccount::with([
                        'accountGroup.accountClass'
                    ])
                    ->whereHas('accountGroup', function($query){
                        return $query->whereIn('account_class_id', [5]);
                    })
                    ->orderBy('code', 'asc')->get();
                    if($chartOfAccounts->count() > 0){
                        foreach($chartOfAccounts as $key => $account){
                            $balanceSheetLedger = balanceSheetLedger($company_id, $account, $request->from, $request->to, 0, !(request()->has('report_type') && $request->report_type == 'pdf'), ['D' => $debitEntryItems, 'C' => $creditEntryItems], $all, $carryForwarded, $rate);
                            
                            $expenses .= $balanceSheetLedger['data'];
                            array_push($expenseBalances, $balanceSheetLedger['balance']);
                        }

                        $expenses .= '<tr>
                            <td colspan="2"><strong>Total '.$expenseGroups->pluck('name')->implode(', ').':</strong></td>
                            <td class="closing_balance_column" style="text-align: right"><strong>'.systemMoneyFormat(array_sum($expenseBalances)).'</strong></td>
                        </tr>';
                    }
                }
            }

            $companies = Company::has('profitCentres.costCentres')
            ->whereHas('users', function($query){
                return $query->where('user_id', auth()->user()->id);
            })
            ->get();

            $data = [
                'title' => $title,
                'currencyTypes' => CurrencyType::with('currencies')->get(),
                'currency' => Currency::find(request()->get('currency_id')),
                'incomeGroups' => isset($incomeGroups) ? $incomeGroups : [],
                'expenseGroups' => isset($expenseGroups) ? $expenseGroups : [],
                'groupWise' => $groupWise,
                'incomes' => $incomes,
                'expenses' => $expenses,
                'fiscalYear' => $fiscalYear,
                'accountDefaultSettings' => $accountDefaultSettings,
                'companies' => $companies,
                'profitCentres' => ProfitCentre::where('company_id', $companies->first()->id)->orderBy('code', 'asc')->get(),
                'fiscalYears' => FiscalYear::all(),
            ];

            if(request()->has('report_type') && request()->get('report_type') == 'pdf'){
                return viewMPDF('accounting.backend.pages.reports.profitLoss.pdf', $data, $title, $title);
            }

            if(request()->has('report_type') && request()->get('report_type') == 'report'){
                return view('accounting.backend.pages.reports.profitLoss.report', $data);
            }

            return view('accounting.backend.pages.reports.profitLoss.index', $data);
        }catch (\Throwable $th){
            if(request()->has('report_type') && request()->get('report_type') == 'report'){
                return $th->getMessage();
            }

            return $this->backWithError($th->getMessage());
        }
    }
}
