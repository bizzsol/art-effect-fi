<?php
bolt_decrypt( __FILE__ , 'mn2QMM'); return 0;
##!!!##