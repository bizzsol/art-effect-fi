<?php
bolt_decrypt( __FILE__ , 'WNSl0d'); return 0;
##!!!##