<?php
bolt_decrypt( __FILE__ , '6mg91w'); return 0;
##!!!##