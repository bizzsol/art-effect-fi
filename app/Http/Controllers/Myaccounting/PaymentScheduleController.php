<?php
bolt_decrypt( __FILE__ , '8CBWto'); return 0;
##!!!##