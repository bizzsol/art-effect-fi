<?php
bolt_decrypt( __FILE__ , 'cS8NnV'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use DB, DataTables;

use App\Models\PmsModels\Accounts\Company;
use App\Models\PmsModels\Accounts\ChartOfAccount;
use App\Models\PmsModels\Accounts\SchedulePayment;
use App\Models\PmsModels\Accounts\SchedulePaymentLedger;


class PaymentScheduleController extends Controller
{   

    public function headerColumns($value='')
    {
        return array(
            ['SL', 'SL'],
            ['company', 'company', 'text-center'],
            ['code', 'code','text-center'],
            ['name', 'name', 'text-center'],
            ['day', 'day', 'text-center'],
            ['description', 'description','text-center'],
            ['debit_ledgers', 'debit_ledgers'], 
            ['credit_ledgers', 'credit_ledgers'], 
            ['actions', 'actions', 'text-center']
        );
    }

    public function index()
    {
        try {
            if (request()->ajax()) {
                return Datatables::of(
                    SchedulePayment::with([
                        'company',
                        'ledgers.chartOfAccount'
                    ])
                )
                ->addIndexColumn()
                
                ->addColumn('company', function($schedule) {
                    return isset($schedule->company->code) ? '['.$schedule->company->code.'] '.$schedule->company->name : '';
                })
                ->filterColumn('company', function ($query, $keyword) {
                    return $query->whereHas('company', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%')
                              ->orwhere('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('company', function ($query, $order) {
                    return pleaseSortMe($query, $order, Company::select('companies.name')
                        ->whereColumn('companies.id', 'schedule_payments.company_id')
                        ->take(1)
                    );
                })

                ->addColumn('debit_ledgers', function($schedule) {
                    $ledgers = '';
                    if($schedule->ledgers->where('type', 'D')->count() > 0){
                        $ledgers .= '<ol>';
                        foreach($schedule->ledgers->where('type', 'D') as $key => $ledger){
                            $ledgers .= '<li>['.$ledger->chartOfAccount->code.'] '.$ledger->chartOfAccount->name.': '.$ledger->amount.'</li>';
                        }
                        $ledgers .= '</ol>';
                    }
                    return $ledgers;
                })

                ->addColumn('credit_ledgers', function($schedule) {
                    $ledgers = '';
                    if($schedule->ledgers->where('type', 'C')->count() > 0){
                        $ledgers .= '<ol>';
                        foreach($schedule->ledgers->where('type', 'C') as $key => $ledger){
                            $ledgers .= '<li>['.$ledger->chartOfAccount->code.'] '.$ledger->chartOfAccount->name.': '.$ledger->amount.'</li>';
                        }
                        $ledgers .= '</ol>';
                    }
                    return $ledgers;
                })

                ->addColumn('actions', function($schedule){
                    $actions = '';

                    if(auth()->user()->hasPermissionTo('cost-centre-edit')){
                        $actions .= '<a class="btn btn-xs btn-primary rounded-circle m-1" href="'. url('accounting/payment-schedules/'.$schedule->id.'/edit?company_id='.$schedule->company_id).'"><i class="las la-edit"></i></a>';
                    }

                    if(auth()->user()->hasPermissionTo('cost-centre-delete')){
                        $actions .= '<a href="javascript:void(0)" class="btn btn-xs btn-danger m-1" data-src="'.route('accounting.payment-schedules.destroy', $schedule->id).'" onclick="deleteFromCRUD($(this))"><i class="la la-trash"></i></a>';
                    }
                    return $actions;
                })
                ->rawColumns(['debit_ledgers', 'credit_ledgers', 'actions'])
                ->make(true);
            }

            $data = [
                'title' => "Payment Schedules",
                'headerColumns' => $this->headerColumns(),
            ];

            return view('accounting.backend.pages.paymentSchedules.index', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function create()
    {
        $company = Company::find(request()->get('company_id'));
        $data = [
            'title' => 'New Payment Schedule',
            'companies' => Company::all(),
            'company' => $company,
            'chartOfAccountsOptions' => chartOfAccountsOptions([], 0, 0, getAllGroupAndLedgers(), false, 'yes', false, isset($company->id) ? [$company->id] : []),
            'costCentres' => isset($company->id) ? getCostCentres(true, $company->id) : '',
        ];

        return view('accounting.backend.pages.paymentSchedules.create', $data);
    }

    public function store(Request $request)
    {
        $request->validate([
            'company_id' => 'required',
            'name' => 'required',
            'day' => 'required',
            'debit_cost_centres' => 'required',
            'debit_cost_centres.*' => 'required',
            'debit_ledgers' => 'required',
            'debit_ledgers.*' => 'required',
            'debit_ledger_amounts' => 'required',
            'debit_ledger_amounts.*' => 'required',

            'credit_cost_centres' => 'required',
            'credit_cost_centres.*' => 'required',
            'credit_ledgers' => 'required',
            'credit_ledgers.*' => 'required',
            'credit_ledger_amounts' => 'required',
            'credit_ledger_amounts.*' => 'required',
        ]);

        if(array_sum(isset($request->debit_ledger_amounts[0]) ? $request->debit_ledger_amounts : []) != array_sum(isset($request->credit_ledger_amounts[0]) ? $request->credit_ledger_amounts : [])){
            return response()->json([
                'success' => false,
                'message' => "Total Debit & credit does not matched!"
            ]);
        }
        
        DB::beginTransaction();
        try{
            $schedule = SchedulePayment::create([
                'company_id' => $request->company_id,
                'code' => \Str::random(8),
                'name' => $request->name,
                'day' => $request->day,
                'description' => $request->description,
            ]);

            $ledgers = [];
            if(isset($request->debit_ledgers[0])){
                foreach($request->debit_ledgers as $key => $chart_of_account_id){
                    array_push($ledgers, [
                        'schedule_payment_id' => $schedule->id,
                        'cost_centre_id' => $request->debit_cost_centres[$key],
                        'chart_of_account_id' => $chart_of_account_id,
                        'type' => 'D',
                        'amount' => $request->debit_ledger_amounts[$key],
                    ]);
                }
            }

            if(isset($request->credit_ledgers[0])){
                foreach($request->credit_ledgers as $key => $chart_of_account_id){
                    array_push($ledgers, [
                        'schedule_payment_id' => $schedule->id,
                        'cost_centre_id' => $request->credit_cost_centres[$key],
                        'chart_of_account_id' => $chart_of_account_id,
                        'type' => 'C',
                        'amount' => $request->credit_ledger_amounts[$key],
                    ]);
                }
            }

            if(isset($ledgers[0])){
                SchedulePaymentLedger::insert($ledgers);
            }

            session()->flash('alert-type', 'success');
            session()->flash('message', "Payment Schedule Saved Successfully.");

            DB::commit();
            return response()->json([
                'success' => true
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function show($id)
    {
        
    }

    public function edit($id)
    {
        $company = Company::find(request()->get('company_id'));
        $data = [
            'title' => 'Edit Payment Schedule',
            'companies' => Company::all(),
            'company' => $company,
            'schedule' => SchedulePayment::with([
                'ledgers'
            ])->findOrFail($id),
            'chartOfAccountsOptions' => chartOfAccountsOptions([], 0, 0, getAllGroupAndLedgers(), false, 'yes', false, isset($company->id) ? [$company->id] : []),
            'costCentres' => isset($company->id) ? getCostCentres(true, $company->id) : '',
        ];

        return view('accounting.backend.pages.paymentSchedules.edit', $data);
    }

    public function update(Request $request, $id)
    {
        $request->validate([
            'company_id' => 'required',
            'name' => 'required',
            'day' => 'required',
            'debit_ledgers' => 'required',
            'debit_ledgers.*' => 'required',
            'debit_ledger_amounts' => 'required',
            'debit_ledger_amounts.*' => 'required',
        ]);

        if(array_sum(isset($request->debit_ledger_amounts[0]) ? $request->debit_ledger_amounts : []) != array_sum(isset($request->credit_ledger_amounts[0]) ? $request->credit_ledger_amounts : [])){
            return response()->json([
                'success' => false,
                'message' => "Total Debit & credit does not matched!"
            ]);
        }

        DB::beginTransaction();
        try{
            $schedule = SchedulePayment::findOrFail($id);
            $schedule->company_id = $request->company_id;
            $schedule->name = $request->name;
            $schedule->day = $request->day;
            $schedule->description = $request->description;
            $schedule->save();

            SchedulePaymentLedger::where('schedule_payment_id', $schedule->id)->forceDelete();
            $ledgers = [];
            if(isset($request->debit_ledgers[0])){
                foreach($request->debit_ledgers as $key => $chart_of_account_id){
                    array_push($ledgers, [
                        'schedule_payment_id' => $schedule->id,
                        'cost_centre_id' => $request->debit_cost_centres[$key],
                        'chart_of_account_id' => $chart_of_account_id,
                        'type' => 'D',
                        'amount' => $request->debit_ledger_amounts[$key],
                    ]);
                }
            }

            if(isset($request->credit_ledgers[0])){
                foreach($request->credit_ledgers as $key => $chart_of_account_id){
                    array_push($ledgers, [
                        'schedule_payment_id' => $schedule->id,
                        'cost_centre_id' => $request->credit_cost_centres[$key],
                        'chart_of_account_id' => $chart_of_account_id,
                        'type' => 'C',
                        'amount' => $request->credit_ledger_amounts[$key],
                    ]);
                }
            }

            if(isset($ledgers[0])){
                SchedulePaymentLedger::insert($ledgers);
            }

            session()->flash('alert-type', 'success');
            session()->flash('message', "Payment Schedule Updated Successfully.");

            DB::commit();
            return response()->json([
                'success' => true
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function destroy($id)
    {
        DB::beginTransaction();
        try{
            SchedulePayment::findOrFail($id)->delete();
            DB::commit();
            return response()->json([
                'success' => true,
                'message' => "Payment Schedules has been Deleted!"
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }
}
