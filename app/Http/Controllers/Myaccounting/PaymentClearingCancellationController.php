<?php
bolt_decrypt( __FILE__ , 'rIhl98'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App, DB, DataTables;
use Illuminate\Support\Facades\Auth;

use \App\Models\PmsModels\Accounts\Company;
use \App\Models\PmsModels\Accounts\AccountGroup;
use \App\Models\PmsModels\Accounts\FiscalYear;
use \App\Models\PmsModels\Accounts\EntryType;
use \App\Models\PmsModels\Accounts\Tag;
use \App\Models\PmsModels\Accounts\ChartOfAccount;
use \App\Models\PmsModels\Accounts\Entry;
use \App\Models\PmsModels\Accounts\EntryItem;

use \App\Models\PmsModels\Accounts\CurrencyType;
use \App\Models\PmsModels\Accounts\Currency;
use \App\Models\PmsModels\Accounts\ExchangeRate;

use \App\Models\PmsModels\Accounts\FiscalYearClosingLedger;
use \App\Models\PmsModels\Accounts\Clearing;

use \App\User;

class PaymentClearingCancellationController extends Controller
{
    public function headerColumns($value = '')
    {
        return array(
            ['SL', 'SL'],
            ['reference', 'reference', 'text-center'],
            ['ledgers', 'ledgers', 'text-center'],
            ['entry', 'entry', 'text-center'],
            ['created_by', 'created_by', 'text-center'],
            ['created_at', 'created_at', 'text-center'],
            ['actions', 'actions', 'text-center']
        );
    }

    public function index()
    {
        try {
            if (request()->ajax()) {
                return DataTables::of(
                    Clearing::with([
                        'entry.entryType',
                        'entry.items.chartOfAccount',
                        'creator'
                    ])
                    ->where('type', 'payable')
                    ->where('is_cancelled', 0)
                )
                ->addIndexColumn()

                ->editColumn('ledgers', function ($clearing) {
                    return ChartOfAccount::whereIn('id', json_decode($clearing->ledgers, true))->pluck('name')->implode(', ');
                })
                
                ->addColumn('entry', function ($clearing) {
                    if(auth()->user()->hasPermissionTo('entry-view')){
                        return  '<a class="text-primary" onclick="getShortDetails($(this))" data-id="'.($clearing->entry->id).'" data-entry-type="'.($clearing->entry->entryType->name).'" data-code="'.($clearing->entry->code).'">'.$clearing->entry->number.'</a>';
                    }
                    return $clearing->entry->number;
                })
                ->filterColumn('entry', function ($query, $keyword) {
                    return $query->whereHas('entry', function ($query) use ($keyword) {
                        $query->where('number', 'LIKE', '%' . $keyword . '%');
                    });
                })
                ->orderColumn('entry', function ($query, $order) {
                    return pleaseSortMe($query, $order, Entry::select('entries.number')
                        ->whereColumn('entries.id', 'clearings.entry_id')
                        ->take(1)
                    );
                })

                ->editColumn('created_by', function ($clearing) {
                    return $clearing->creator ? $clearing->creator->name : '';
                })
                ->filterColumn('created_by', function ($query, $keyword) {
                    return $query->whereHas('creator', function ($query) use ($keyword) {
                        $query->where('name', 'LIKE', '%' . $keyword . '%');
                    });
                })
                ->orderColumn('created_by', function ($query, $order) {
                    return pleaseSortMe($query, $order, User::select('users.name')
                        ->whereColumn('users.id', 'clearings.created_by')
                        ->take(1)
                    );
                })

                ->editColumn('created_at', function ($clearing) {
                    return date('Y-m-d g:i a', strtotime($clearing->created_at));
                })
                ->filterColumn('created_at', function ($query, $keyword) {
                    return $query->where('created_at', 'LIKE', '%' . $keyword . '%');
                })
                ->orderColumn('created_at', function ($query, $order) {
                    return $query->orderBy('created_at', $order);
                })

                ->addColumn('actions', function ($clearing) {
                    return  '<a class="btn btn-xs btn-danger" onclick="cancelClearing('.($clearing->id).')"><i class="las la-window-close"></i>&nbsp;Cancel</a>';
                })
                ->rawColumns(['entry', 'actions'])
                ->toJson();
            }

            return view('accounting.backend.pages.clearings.payment.cancel', [
                'title' => 'Payment Clearing Cancellation',
                'headerColumns' => $this->headerColumns()
            ]);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function update(Request $request, $id)
    {
        DB::beginTransaction();
        try{
            $clearing = Clearing::findOrFail($id);

            $array = [];
            if($clearing->entry->items->count() > 0){
                foreach($clearing->entry->items as $key => $item){
                    array_push($array, [
                        'cost_centre_id' => $item->cost_centre_id,
                        'chart_of_account_id' => $item->chart_of_account_id,
                        'debit' => $item->debit_credit == 'C' ? $item->amount : 0,
                        'credit' => $item->debit_credit == 'D' ? $item->amount : 0,
                        'narration' => 'Realized Gain Gain/Loss Credit :: Cancelled',
                    ]);
                }
            }

            $entry = saveLedgerEntries(5, $clearing->entry->date.' '.$clearing->entry->time, $clearing->entry->tag_id, $clearing->entry->number, $clearing->entry->notes.' :: Cancelled', $array, $clearing->entry->exchange_rate_id, 0, 0, 0, getCostCentreCompany(auth()->user()->costCentre->id));

            EntryItem::where('entry_id', $entry['entry']->id)
            ->update([
                'realized' => 1
            ]);

            EntryItem::whereIn('id', json_decode($clearing->entry_items, true))
            ->where('realized', 1)
            ->update([
                'realized' => 0
            ]);

            $clearing->is_cancelled = 1;
            $clearing->save();
            DB::commit();

            return response()->json([
                'success' => true,
                'message' => "Clearing has benn cancelled successfully."
            ]); 
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }
}
