<?php
bolt_decrypt( __FILE__ , 'wGJ0tT'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use App\Models\PmsModels\Accounts\Company;
use App\Models\PmsModels\Accounts\ProfitCentre;

use App, DB, DataTables;

class ProfitCentreController extends Controller
{   

    public function headerColumns($value='')
    {
        return array(
            ['SL', 'SL'],
            ['company', 'company', 'text-center'],
            ['code', 'code', 'text-center'],
            ['name', 'name', 'text-center'],
            ['phone', 'phone', 'text-center'],
            ['email', 'email', 'text-center'],
            ['address', 'address', 'text-center'],
            ['logo', 'logo', 'text-center'],
            ['banner', 'banner', 'text-center'],
            ['actions', 'actions', 'text-center']
        );
    }

    public function index()
    {
        try {
            if (request()->ajax()) {
                return Datatables::of(
                    ProfitCentre::with([
                        'company',
                    ])
                    ->when(!datatableOrdering(), function($query){
                        return $query->orderby('id', 'desc');
                    })
                )
                ->addIndexColumn()
                
                ->addColumn('company', function($profitCentre) {
                    return $profitCentre->company->name;
                })
                ->filterColumn('company', function ($query, $keyword) {
                    return $query->whereHas('company', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%')
                              ->orwhere('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('company', function ($query, $order) {
                    return pleaseSortMe($query, $order, Company::select('companies.name')
                        ->whereColumn('companies.id', 'profit_centres.company_id')
                        ->take(1)
                    );
                })

                ->editColumn('logo', function($profitCentre){
                    if(!empty($profitCentre->logo)){
                        return '<img src="'.asset($profitCentre->logo).'" style="max-height: 15px">';
                    }
                })
                ->editColumn('banner', function($profitCentre){
                    if(!empty($profitCentre->banner)){
                        return '<img src="'.asset($profitCentre->banner).'" style="max-height: 15px">';
                    }
                })

                ->addColumn('actions', function($profitCentre){
                    $actions = '';

                    if(auth()->user()->hasPermissionTo('profit-centre-edit')){
                        $actions .= '<a class="btn btn-xs btn-primary rounded-circle m-1" href="'. url('accounting/profit-centres/'.$profitCentre->id.'/edit').'"><i class="las la-edit"></i></a>';
                    }

                    if(auth()->user()->hasPermissionTo('profit-centre-delete')){
                        $actions .= '<a href="javascript:void(0)" class="btn btn-xs btn-danger m-1" data-src="'.route('accounting.profit-centres.destroy', $profitCentre->id).'" onclick="deleteFromCRUD($(this))"><i class="la la-trash"></i></a>';
                    }
                    return $actions;
                })
                ->rawColumns(['company','logo','banner','actions'])
                ->make(true);
            }

            $data = [
                'title' => "Profit Centre",
                'companies' => Company::all(),
                'headerColumns' => $this->headerColumns(),
            ];

            return view('accounting.backend.pages.profitCentres.index', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function create()
    {
        $data = [
            'title' => 'New Profit Centre',
            'companies' => Company::with([
                'profitCentres'
            ])->get(),
        ];

        return view('accounting.backend.pages.profitCentres.create', $data);
    }

    public function store(Request $request)
    {
        $request->validate([
            'company_id' => 'required',
            'code' => 'required|unique:profit_centres',
            'name' => 'required',
            // 'phone' => ['required', 'string', 'max:14', 'regex:/^([0-9\s\-\+\(\)]*)$/'],
            // 'email' => 'required',
            // 'address' => 'required',
        ]);

        if($request->hasFile('logo_file')){
            $request->validate([
                'logo_file' => ['required','mimes:jpeg,jpg,png,gif', 'max:3072'],
            ]);
        }

        if($request->hasFile('banner_file')){
            $request->validate([
                'banner_file' => ['required','mimes:jpeg,jpg,png,gif', 'max:3072'],
            ]);
        }

        DB::beginTransaction();
        try{
            $profitCentre = new ProfitCentre();
            $profitCentre->fill($request->all());
            $profitCentre->phone = !empty($request->phone) ? $request->phone : '01234567890';
            $profitCentre->email = !empty($request->email) ? $request->email : 'example@email.com';
            $profitCentre->save();

            if($request->hasFile('logo_file')){
                $profitCentre->logo = $this->fileUpload($request->file('logo_file'), 'upload/profit-centre/logo');
                $profitCentre->save();
            }

            if($request->hasFile('banner_file')){
                $profitCentre->banner = $this->fileUpload($request->file('banner_file'), 'upload/profit-centre/banner');
                $profitCentre->save();
            }

            DB::commit();
            return $this->redirectBackWithSuccess("Profit Centre has been created successfully", 'accounting.profit-centres.create');
        }catch (\Throwable $th){
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
    }

    public function edit($id)
    {
        $data = [
            'title' => 'Edit Profit Centre',
            'companies' => Company::with([
                'profitCentres'
            ])->get(),
            'profitCentre' => ProfitCentre::findOrFail($id)
        ];

        return view('accounting.backend.pages.profitCentres.edit', $data);
    }

    public function update(Request $request, $id)
    {
        $request->validate([
            'company_id' => 'required',
            'code' => 'required|unique:profit_centres,code,'.$id,
            'name' => 'required',
            // 'phone' => ['required', 'string', 'max:14', 'regex:/^([0-9\s\-\+\(\)]*)$/'],
            // 'email' => 'required',
            // 'address' => 'required',
        ]);

        if($request->hasFile('logo_file')){
            $request->validate([
                'logo_file' => ['required','mimes:jpeg,jpg,png,gif', 'max:3072'],
            ]);
        }

        if($request->hasFile('banner_file')){
            $request->validate([
                'banner_file' => ['required','mimes:jpeg,jpg,png,gif', 'max:3072'],
            ]);
        }

        DB::beginTransaction();
        try{
            $profitCentre = ProfitCentre::find($id);
            $profitCentre->fill($request->all());
            $profitCentre->phone = !empty($request->phone) ? $request->phone : '01234567890';
            $profitCentre->email = !empty($request->email) ? $request->email : 'example@email.com';
            $profitCentre->save();

            if($request->hasFile('logo_file')){
                if(!empty($profitCentre->logo)){
                    unlink(public_path($profitCentre->logo));
                }
                $profitCentre->logo = $this->fileUpload($request->file('logo_file'), 'upload/profit-centre/logo');
                $profitCentre->save();
            }

            if($request->hasFile('banner_file')){
                if(!empty($profitCentre->banner)){
                    unlink(public_path($profitCentre->banner));
                }

                $profitCentre->banner = $this->fileUpload($request->file('banner_file'), 'upload/profit-centre/banner');
                $profitCentre->save();
            }

            DB::commit();
            return $this->redirectBackWithSuccess("Profit Centre has been updated successfully", 'accounting.profit-centres.index');
        }catch (\Throwable $th){
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
    }

    public function destroy($id)
    {
        DB::beginTransaction();
        try{
            $profitCentre = ProfitCentre::find($id);
            if(!empty($profitCentre->logo)){
                unlink(public_path($profitCentre->logo));
            }

            if(!empty($profitCentre->banner)){
                unlink(public_path($profitCentre->banner));
            }
            $delete = ProfitCentre::find($id)->delete();

            DB::commit();
            return response()->json([
                'success' => true,
                'message' => "Profit Centre has been Deleted!"
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }
}
