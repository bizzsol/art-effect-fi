<?php
bolt_decrypt( __FILE__ , 'g5tDOH'); return 0;
##!!!##