<?php
bolt_decrypt( __FILE__ , '1pDbrG'); return 0;
##!!!##CgpuYW1lc3BhY2UgQXBwXEh0dHBcQ29udHJvbGxlcnNcTXlhY2NvdW50aW5nOwoKdXNlIEFwcFxIdHRwXENvbnRyb2xsZXJzXENvbnRyb2xsZXI7CnVzZSBJbGx1bWluYXRlXEh0dHBcUmVxdWVzdDsKCnVzZSBcQXBwXE1vZGVsc1xQbXNNb2RlbHNcQWNjb3VudHNcQ3VycmVuY3lUeXBlOwoKdXNlIEFwcCwgREIsIERhdGFUYWJsZXM7CnVzZSBJbGx1bWluYXRlXFN1cHBvcnRcRmFjYWRlc1xBdXRoOwoKY2xhc3MgQ3VycmVuY3lUeXBlQ29udHJvbGxlciBleHRlbmRzIENvbnRyb2xsZXIKewogICAgcHVibGljIGZ1bmN0aW9uIGhlYWRlckNvbHVtbnMoJHZhbHVlID0gJycpCiAgICB7CiAgICAgICAgcmV0dXJuIGFycmF5KAogICAgICAgICAgICBbJ1NMJywgJ1NMJywndGV4dC1jZW50ZXInXSwKICAgICAgICAgICAgWyduYW1lJywgJ25hbWUnLCAndGV4dC1sZWZ0J10sCiAgICAgICAgICAgIFsnZGVzY3JpcHRpb24nLCAnZGVzY3JpcHRpb24nXSwKICAgICAgICAgICAgWydhY3Rpb25zJywgJ2FjdGlvbnMnLCAndGV4dC1jZW50ZXInXQogICAgICAgICk7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KCkKICAgIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBpZiAocmVxdWVzdCgpLT5hamF4KCkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBEYXRhVGFibGVzOjpvZihDdXJyZW5jeVR5cGU6OnF1ZXJ5KCkpCiAgICAgICAgICAgICAgICAgICAgLT5hZGRJbmRleENvbHVtbigpCiAgICAgICAgICAgICAgICAgICAgLT5hZGRDb2x1bW4oJ2Rlc2NyaXB0aW9uJywgZnVuY3Rpb24gKCRjdXJyZW5jeVR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRjdXJyZW5jeVR5cGUtPmRlc2M7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPmZpbHRlckNvbHVtbignZGVzY3JpcHRpb24nLCBmdW5jdGlvbiAoJHF1ZXJ5LCAka2V5d29yZCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT54d2hlcmUoJ2Rlc2MnLCAnTElLRScsICclJyAuICRrZXl3b3JkIC4gJyUnKTsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC0+b3JkZXJDb2x1bW4oJ2Rlc2NyaXB0aW9uJywgZnVuY3Rpb24gKCRxdWVyeSwgJG9yZGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPm9yZGVyQnkoJ2Rlc2MnLCAkb3JkZXIpOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5hZGRDb2x1bW4oJ2FjdGlvbnMnLCBmdW5jdGlvbiAoJGN1cnJlbmN5VHlwZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxhIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1wcmltYXJ5IiBocmVmPSInLnVybCgnYWNjb3VudGluZy9jdXJyZW5jeS10eXBlcy8nLiRjdXJyZW5jeVR5cGUtPmlkLicvZWRpdCcpLiciPjxpIGNsYXNzPSJsYSBsYS1lZGl0Ij48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYnRuIGJ0bi14cyBidG4tZGFuZ2VyIiBvbmNsaWNrPSJkZWxldGVGcm9tQ1JVRCgkKHRoaXMpKSIgZGF0YS1zcmM9IicuIHJvdXRlKCdhY2NvdW50aW5nLmN1cnJlbmN5LXR5cGVzLmRlc3Ryb3knLCAkY3VycmVuY3lUeXBlLT5pZCkuJyI+PGkgY2xhc3M9ImxhIGxhLXRyYXNoIj48L2k+PC9hPic7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPnJhd0NvbHVtbnMoWydhY3Rpb25zJ10pCiAgICAgICAgICAgICAgICAgICAgLT50b0pzb24oKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHZpZXcoJ2FjY291bnRpbmcuYmFja2VuZC5wYWdlcy5jdXJyZW5jeS5jdXJyZW5jeVR5cGUuaW5kZXgnLCBbCiAgICAgICAgICAgICAgICAndGl0bGUnID0+ICdMaXN0IG9mIEN1cnJlbmN5IFR5cGUnLAogICAgICAgICAgICAgICAgJ2hlYWRlckNvbHVtbnMnID0+ICR0aGlzLT5oZWFkZXJDb2x1bW5zKCkKICAgICAgICAgICAgXSk7CiAgICAgICAgfSBjYXRjaCAoXFRocm93YWJsZSAkdGgpIHsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5iYWNrV2l0aEVycm9yKCR0aC0+Z2V0TWVzc2FnZSgpKTsKICAgICAgICB9CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIGNyZWF0ZSgpCiAgICB7CiAgICAgICAgJGRhdGEgPSBbCiAgICAgICAgICAgICd0aXRsZScgPT4gJ05ldyBDdXJyZW5jeSBUeXBlJywKICAgICAgICBdOwoKICAgICAgICByZXR1cm4gdmlldygnYWNjb3VudGluZy5iYWNrZW5kLnBhZ2VzLmN1cnJlbmN5LmN1cnJlbmN5VHlwZS5jcmVhdGUnLCAkZGF0YSk7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIHN0b3JlKFJlcXVlc3QgJHJlcXVlc3QpCiAgICB7CiAgICAgICAgJHJlcXVlc3QtPnZhbGlkYXRlKFsKICAgICAgICAgICAgJ25hbWUnID0+ICdyZXF1aXJlZHx1bmlxdWU6Y3VycmVuY3lfdHlwZXMnLAogICAgICAgIF0pOwoKICAgICAgICBEQjo6YmVnaW5UcmFuc2FjdGlvbigpOwogICAgICAgIHRyeXsKICAgICAgICAgICAgQ3VycmVuY3lUeXBlOjpjcmVhdGUoJHJlcXVlc3QtPmFsbCgpKTsKICAgICAgICAgICAgREI6OmNvbW1pdCgpOwogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmJhY2tXaXRoU3VjY2VzcygiQ3VycmVuY3kgVHlwZSBoYXMgYmVlbiBjcmVhdGVkIHN1Y2Nlc3NmdWxseSIpOwogICAgICAgIH1jYXRjaCAoXFRocm93YWJsZSAkdGgpewogICAgICAgICAgICBEQjo6cm9sbGJhY2soKTsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5iYWNrV2l0aEVycm9yKCR0aC0+Z2V0TWVzc2FnZSgpKTsKICAgICAgICB9CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIHNob3coJGlkKQogICAgewogICAgICAgIAogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBlZGl0KCRpZCkKICAgIHsKICAgICAgICAkZGF0YSA9IFsKICAgICAgICAgICAgJ3RpdGxlJyA9PiAnRWRpdCBDdXJyZW5jeSBUeXBlJywKICAgICAgICAgICAgJ2N1cnJlbmN5VHlwZScgPT4gQ3VycmVuY3lUeXBlOjpmaW5kT3JGYWlsKCRpZCkKICAgICAgICBdOwoKICAgICAgICByZXR1cm4gdmlldygnYWNjb3VudGluZy5iYWNrZW5kLnBhZ2VzLmN1cnJlbmN5LmN1cnJlbmN5VHlwZS5lZGl0JywgJGRhdGEpOwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiB1cGRhdGUoUmVxdWVzdCAkcmVxdWVzdCwgJGlkKQogICAgewogICAgICAgICRyZXF1ZXN0LT52YWxpZGF0ZShbCiAgICAgICAgICAgICduYW1lJyA9PiAncmVxdWlyZWR8dW5pcXVlOmN1cnJlbmN5X3R5cGVzLG5hbWUsJy4kaWQsCiAgICAgICAgXSk7CgogICAgICAgIERCOjpiZWdpblRyYW5zYWN0aW9uKCk7CiAgICAgICAgdHJ5ewogICAgICAgICAgICAkdHlwZSA9IEN1cnJlbmN5VHlwZTo6ZmluZCgkaWQpOwogICAgICAgICAgICAkdHlwZS0+ZmlsbCgkcmVxdWVzdC0+YWxsKCkpOwogICAgICAgICAgICAkdHlwZS0+c2F2ZSgpOwoKICAgICAgICAgICAgREI6OmNvbW1pdCgpOwogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmJhY2tXaXRoU3VjY2VzcygiQ3VycmVuY3kgVHlwZSBoYXMgYmVlbiB1cGRhdGVkIHN1Y2Nlc3NmdWxseSIpOwogICAgICAgIH1jYXRjaCAoXFRocm93YWJsZSAkdGgpewogICAgICAgICAgICBEQjo6cm9sbGJhY2soKTsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5iYWNrV2l0aEVycm9yKCR0aC0+Z2V0TWVzc2FnZSgpKTsKICAgICAgICB9CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIGRlc3Ryb3koJGlkKQogICAgewogICAgICAgIERCOjpiZWdpblRyYW5zYWN0aW9uKCk7CiAgICAgICAgdHJ5ewogICAgICAgICAgICAkZGVsZXRlID0gQ3VycmVuY3lUeXBlOjpmaW5kKCRpZCktPmRlbGV0ZSgpOwoKICAgICAgICAgICAgREI6OmNvbW1pdCgpOwogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbihbCiAgICAgICAgICAgICAgICAnc3VjY2VzcycgPT4gdHJ1ZSwKICAgICAgICAgICAgICAgICdtZXNzYWdlJyA9PiAiQ3VycmVuY3kgVHlwZSBoYXMgYmVlbiBEZWxldGVkISIKICAgICAgICAgICAgXSk7CiAgICAgICAgfWNhdGNoIChcVGhyb3dhYmxlICR0aCl7CiAgICAgICAgICAgIERCOjpyb2xsYmFjaygpOwogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbihbCiAgICAgICAgICAgICAgICAnc3VjY2VzcycgPT4gZmFsc2UsCiAgICAgICAgICAgICAgICAnbWVzc2FnZScgPT4gJHRoLT5nZXRNZXNzYWdlKCkKICAgICAgICAgICAgXSk7CiAgICAgICAgfQogICAgfQp9Cg==