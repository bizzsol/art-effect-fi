<?php
bolt_decrypt( __FILE__ , 'i1Nzf0'); return 0;
##!!!##