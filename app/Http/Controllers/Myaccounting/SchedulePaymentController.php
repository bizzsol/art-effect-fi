<?php
bolt_decrypt( __FILE__ , 'os68Dl'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use DB, DataTables;

use App\Models\PmsModels\Accounts\Company;
use App\Models\PmsModels\Accounts\ChartOfAccount;
use App\Models\PmsModels\Accounts\SchedulePayment;
use App\Models\PmsModels\Accounts\SchedulePaymentLedger;
use App\Models\PmsModels\Accounts\Schedule;
use App\Models\PmsModels\Accounts\ScheduleEntry;
use App\Models\PmsModels\Accounts\CurrencyType;
use App\Models\PmsModels\Accounts\FiscalYear;


class SchedulePaymentController extends Controller
{   

    public function headerColumns($value='')
    {
        return array(
            ['SL', 'SL'],
            ['company', 'company', 'text-center'],
            ['payment_schedule', 'payment_schedule','text-center'],
            ['code', 'code', 'text-center'],
            ['purpose', 'purpose', 'text-center'],
            ['date', 'date', 'text-center'],
            ['description', 'description', 'text-center'],
            ['transactions', 'transactions','text-center'],
        );
    }

    public function index()
    {
        try {
            if (request()->ajax()) {
                return Datatables::of(
                    Schedule::with([
                        'schedulePayment.company',
                        'entries.entry.entryType',
                    ])
                )
                ->addIndexColumn()
                
                ->addColumn('company', function($schedule) {
                    return isset($schedule->schedulePayment->company->code) ? '['.$schedule->schedulePayment->company->code.'] '.$schedule->schedulePayment->company->name : '';
                })
                ->filterColumn('company', function ($query, $keyword) {
                    return $query->whereHas('schedulePayment.company', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%')
                              ->orwhere('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('company', function ($query, $order) {
                    return pleaseSortMe($query, $order, SchedulePayment::select('companies.code')
                        ->join('companies', 'companies.id', '=', 'schedule_payments.company_id')
                        ->whereColumn('schedule_payments.id', 'schedules.schedule_payment_id')
                        ->take(1)
                    );
                })

                ->addColumn('payment_schedule', function($schedule) {
                    return isset($schedule->schedulePayment->name) ? $schedule->schedulePayment->name : '';
                })
                ->filterColumn('payment_schedule', function ($query, $keyword) {
                    return $query->whereHas('schedulePayment', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('payment_schedule', function ($query, $order) {
                    return pleaseSortMe($query, $order, SchedulePayment::select('schedule_payments.name')
                        ->whereColumn('schedule_payments.id', 'schedules.schedule_payment_id')
                        ->take(1)
                    );
                })

                ->addColumn('date', function($schedule) {
                    return $schedule->entries->count() > 0 ? $schedule->entries->first()->entry->date : '';
                })
                ->filterColumn('date', function ($query, $keyword) {
                    return $query->whereHas('entries.entry', function ($query) use($keyword) {
                        $query->where('date', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('date', function ($query, $order) {
                    return pleaseSortMe($query, $order, ScheduleEntry::select('entries.date')
                        ->join('entries', 'entries.id', '=', 'schedule_entries.entry_id')
                        ->whereColumn('schedule_entries.id', 'schedules.id')
                        ->take(1)
                    );
                })

                ->addColumn('transactions', function($schedule) {
                    $transactions = '';
                    if($schedule->entries->count() > 0){
                        foreach($schedule->entries as $key => $entry){
                            $transactions .= '<a class="btn btn-xs btn-primary mr-1 mb-1" onclick="getShortDetails($(this))" data-id="' . ($entry->entry_id) . '" data-entry-type="' . ($entry->entry->entryType->name) . '" data-code="' . ($entry->entry->code) . '">'.$entry->entry->code.'</a>';
                        }
                    }
                    return $transactions;
                })
                ->filterColumn('transactions', function ($query, $keyword) {
                    return $query->whereHas('entries.entry', function ($query) use($keyword) {
                        $query->where('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('transactions', function ($query, $order) {
                    return pleaseSortMe($query, $order, ScheduleEntry::select('entries.code')
                        ->join('entries', 'entries.id', '=', 'schedule_entries.entry_id')
                        ->whereColumn('schedule_entries.id', 'schedules.id')
                        ->take(1)
                    );
                })

                ->rawColumns(['transactions'])
                ->make(true);
            }

            $data = [
                'title' => "Scheduled Payments",
                'companies' => Company::has('profitCentres.costCentres')
                ->whereHas('users', function($query){
                    return $query->where('user_id', auth()->user()->id);
                })
                ->get(),
                'headerColumns' => $this->headerColumns(),
            ];

            return view('accounting.backend.pages.scheduledPayments.index', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function create()
    {
        $company = Company::has('profitCentres.costCentres')
        ->with([
            'schedulePayments'
        ])
        ->where('id', request()->get('company'))
        ->whereHas('users', function($query){
            return $query->where('user_id', auth()->user()->id);
        })->first();
        if (!isset($company->id)) {
            return redirect('accounting/entries');
        }

        $accountDefaultSettings = accountDefaultSettings();

        $schedule = SchedulePayment::with([
            'ledgers'
        ])->find(request()->get('schedule'));

        $data = [
            'title' => 'New Payment Schedule',
            'accountDefaultSettings' => $accountDefaultSettings,
            'systemCurrency' => systemCurrency($accountDefaultSettings['currency_id'], $accountDefaultSettings),
            'company' => $company,
            'schedule' => $schedule,
            'fiscalYear' => getActiveFiscalYear($company->id),
            'fiscalYears' => FiscalYear::whereHas('fiscalYearOpenings', function($query) use($company){
                return $query->where('status', 'opened')
                             ->where('is_approved', 'approved')
                             ->where('company_id', $company->id);
            })->get(),
            'currencyTypes' => CurrencyType::with(['currencies'])->get(),
            'costCentres' => getCostCentres(true, $company->id),
            'chartOfAccountsOptions' => chartOfAccountsOptions([], 0, 0, getAllGroupAndLedgers(), false, 'yes'),
        ];

        return view('accounting.backend.pages.scheduledPayments.create', $data);
    }

    public function store(Request $request)
    {
        $request->validate([
            'schedule_payment_id' => 'required',
            'purpose' => 'required',
            'fiscal_year_id' => 'required',
            'cost_centre_id' => 'required',
            'cost_centre_id.*' => 'required',
            'chart_of_account_id' => 'required',
            'chart_of_account_id.*' => 'required',
        ]);

        if ($this->amount($request)['debit'] <= 0 || $this->amount($request)['credit'] <= 0) {
            return response()->json([
                'success' => false,
                'message' => "Please add some Debit or Credit amount"
            ]);
        }

        if ($this->amount($request)['debit'] != $this->amount($request)['credit']) {
            return response()->json([
                'success' => false,
                'message' => "Debit & Credit amount must be same"
            ]);
        }

        DB::beginTransaction();
        try {
            $fiscalYear = FiscalYear::with([
                'fiscalYearOpenings'
            ])->findOrFail($request->fiscal_year_id);
            if((strtotime(date('Y-m-d', strtotime($request->datetime))) < strtotime($fiscalYear->start)) || (strtotime(date('Y-m-d', strtotime($request->datetime))) > strtotime($fiscalYear->end))){
                return response()->json([
                    'success' => false,
                    'message' => "Datetime is not in the range of the fiscal year period."
                ]);
            }

            $items = [];
            if (isset($request->chart_of_account_id[0])) {
                foreach ($request->chart_of_account_id as $key => $chart_of_account_id) {
                    array_push($items, [
                        'cost_centre_id' => $request->cost_centre_id[$key],
                        'chart_of_account_id' => $request->chart_of_account_id[$key],
                        'debit' => $request->debit[$key],
                        'credit' => $request->credit[$key],
                        'amount' => ($request->debit[$key] > 0 ? $request->debit[$key] : $request->credit[$key]),
                        'debit_credit' => ($request->debit[$key] > 0 ? 'D' : 'C'),
                        'narration' => $request->narration[$key],
                    ]);
                }
            }

            $schedulePayment = SchedulePayment::findOrFail($request->schedule_payment_id);
            $entry = saveLedgerEntries(4, $request->datetime, 1, $request->number, $request->notes, $items, getExchangeRates($request->currency_id, date('Y-m-d', strtotime($request->datetime)), date('H:i:s', strtotime($request->datetime)))['rate']->id, 1, 0, 1, $schedulePayment->company_id, $fiscalYear);

            if (isset($entry['success']) && $entry['success']) {

                $schedule = Schedule::create([
                    'schedule_payment_id' => $schedulePayment->id,
                    'code' => \Str::random(8),
                    'purpose' => $request->purpose,
                    'description' => $request->notes,
                ]);

                if($schedule){
                    ScheduleEntry::create([
                        'schedule_id' => $schedule->id,
                        'entry_id' => $entry['entry']->id,
                    ]);
                }

                DB::commit();
                return response()->json([
                    'success' => true,
                    'message' => $entry['message'],
                    'id' => $entry['entry']->id,
                    'code' => $entry['entry']->code,
                    'entry_type' => $entry['entry']->entryType->name,
                ]);
            } else {
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'message' => $entry['message']
                ]);
            }
        } catch (\Throwable $th) {
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function amount($request)
    {
        return [
            'debit' => array_sum($request->debit),
            'credit' => array_sum($request->credit),
        ];
    }
}
