<?php
bolt_decrypt( __FILE__ , 'I6v9wC'); return 0;
##!!!##