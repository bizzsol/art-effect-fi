<?php
bolt_decrypt( __FILE__ , 'JRnNNQ'); return 0;
##!!!##