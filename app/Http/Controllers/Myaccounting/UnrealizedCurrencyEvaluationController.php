<?php
bolt_decrypt( __FILE__ , 'LjNzzD'); return 0;
##!!!##