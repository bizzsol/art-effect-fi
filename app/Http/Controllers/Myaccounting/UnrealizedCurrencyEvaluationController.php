<?php
bolt_decrypt( __FILE__ , 'gGE8Qo'); return 0;
##!!!##