<?php
bolt_decrypt( __FILE__ , 'CuHWCf'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use \App\Models\PmsModels\Accounts\ChartOfAccount;
use \App\Models\PmsModels\Accounts\UnrealizedCurrencyEventSetting;
use \App\Models\PmsModels\Accounts\UnrealizedCurrencyEvent;
use \App\Models\PmsModels\Accounts\UnrealizedCurrencyEventLedger;

use \App\Models\PmsModels\Accounts\Currency;
use \App\Models\PmsModels\Accounts\ExchangeRate;
use \App\Models\PmsModels\Accounts\EntryItem;

use \App\Models\PmsModels\Suppliers;
use \App\Models\PmsModels\SupplierPayment;

use \App\Models\Sales\Customer;

use App, DB;
use Illuminate\Support\Facades\Auth;

class UnrealizedCurrencyEvaluationController extends Controller
{
    public function index()
    {
        try {
            $run_date = request()->has('run_date') ? request()->get('run_date') : date('Y-m-d');
            $payables = request()->has('payables') ? request()->get('payables') : 0;
            $receivables = request()->has('receivables') ? request()->get('receivables') : 0;
            $accountDefaultSettings = accountDefaultSettings();
            $unrealizedCurrencyEventSettings = unrealizedCurrencyEventSettings();

            $lastEvaluated = UnrealizedCurrencyEvent::orderBy('id', 'desc')->first();
            $from = isset($lastEvaluated->id) ? $lastEvaluated->run_date : false;
            $to = $run_date;

            $data = [
                'title' => 'Unrealized Currency Evaluation',
                'run_date' => $run_date,
                'payables' => $payables,
                'receivables' => $receivables,
                'accountDefaultSettings' => $accountDefaultSettings,
                'unrealizedCurrencyEventSettings' => $unrealizedCurrencyEventSettings,
                'ledgers' => ChartOfAccount::with([
                    'accountGroup'
                ])->orderBy('code', 'asc')->get(),
                'lastEvaluated' => $lastEvaluated,
                'from' => $from,
                'to' => $to,
            ];

            return view('accounting.backend.pages.unrealizedCurrencyEvaluation.index', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function update(Request $request)
    {
        try{
            $accountDefaultSettings = accountDefaultSettings();

            $lastEvaluated = UnrealizedCurrencyEvent::orderBy('id', 'desc')->first();
            $from = isset($lastEvaluated->id) ? $lastEvaluated->run_date : false;
            $to = $request->run_date;

            $asset_ledgers = isset($request->asset_ledgers[0]) ? $request->asset_ledgers : [];
            $liability_ledgers = isset($request->liability_ledgers[0]) ? $request->liability_ledgers : [];

            $supplierPayables = Suppliers::where('payable_account_id', '>', 0)->groupBy('payable_account_id')->pluck('payable_account_id')->toArray();
            if(!in_array($accountDefaultSettings['supplier_payable_account'], $supplierPayables)){
                array_push($supplierPayables, $accountDefaultSettings['supplier_payable_account']);
            }

            $customerReceivables = Customer::where('receivables_account_id', '>', 0)->groupBy('receivables_account_id')->pluck('receivables_account_id')->toArray();
            if(!in_array($accountDefaultSettings['receivables_account'], $customerReceivables)){
                array_push($customerReceivables, $accountDefaultSettings['receivables_account']);
            }

            $ledgers = ChartOfAccount::with([
                'accountGroup'
            ])
            ->whereIn('id', array_merge($customerReceivables, array_merge($supplierPayables, array_merge($asset_ledgers, $liability_ledgers))))
            ->orderBy('code', 'asc')->get();

            $entries = EntryItem::with([
                'entry.exchangeRate',
            ])
            ->doesntHave('entry.purchaseOrder')
            ->doesntHave('entry.saleOrder')
            ->when($to, function($query) use($to){
                return $query->whereHas('entry', function($query) use($to){
                    return $query->where('date', '<=', $to);
                });
            })
            ->whereIn('chart_of_account_id', $ledgers->pluck('id')->toArray())
            ->where('realized', 0)
            ->get();

            $orderEntries = EntryItem::with([
                'entry.exchangeRate',
            ])
            ->when($to, function($query) use($to){
                return $query->whereHas('entry', function($query) use($to){
                    return $query->where('date', '<=', $to);
                });
            })
            ->where(function($query){
                return $query->where(function($query){
                    return $query->has('entry.purchaseOrder');
                })->orWhere(function($query){
                    return $query->has('entry.saleOrder');
                });
            })
            ->whereIn('chart_of_account_id', $ledgers->pluck('id')->toArray())
            ->where('realized', 0)
            ->get();

            $currencies = Currency::all();
            $runRates = [];
            foreach ($currencies as $currency) {
                $runRates[$currency->id] = getExchangeRates($currency->id, $request->run_date, '23:59:59');
            }

            return view('accounting.backend.pages.unrealizedCurrencyEvaluation.form', [
                'title' => 'Unrealized Currency Evaluation', 
                'run_date' => $request->run_date,
                'payables' => $request->payables,
                'receivables' => $request->receivables,
                'asset_ledgers' => $asset_ledgers,
                'liability_ledgers' => $liability_ledgers,
                'accountDefaultSettings' => $accountDefaultSettings,
                'systemCurrency' => systemCurrency(),
                'supplierPayables' => $supplierPayables,
                'customerReceivables' => $customerReceivables,
                'ledgers' => $ledgers,
                'entries' => $entries,
                'orderEntries' => $orderEntries,
                'currencies' => $currencies,
                'runRates' => $runRates,
                'from' => $from,
                'to' => $to,
            ]);
        }catch (\Throwable $th){
            return $th->getMessage();
        }
    }

    public function store(Request $request)
    {
        $request->validate([
            'run_date' => 'required',
            'payables' => 'required',
            'receivables' => 'required',
            'reversal_date' => 'required',
        ]);

        DB::beginTransaction();
        try{
            $journalEntries = [];
            $provisionJournalEntries = [];

            $accountDefaultSettings = accountDefaultSettings();
            $unrealizedCurrencyEventSettings = unrealizedCurrencyEventSettings();
            $systemCurrency = systemCurrency();
            $lastEvaluated = UnrealizedCurrencyEvent::orderBy('id', 'desc')->first();
            $from = isset($lastEvaluated->id) ? $lastEvaluated->run_date : false;
            $to = $request->run_date;

            $supplierPayables = Suppliers::where('payable_account_id', '>', 0)->groupBy('payable_account_id')->pluck('payable_account_id')->toArray();
            if(!in_array($accountDefaultSettings['supplier_payable_account'], $supplierPayables)){
                array_push($supplierPayables, $accountDefaultSettings['supplier_payable_account']);
            }

            $customerReceivables = Customer::where('receivables_account_id', '>', 0)->groupBy('receivables_account_id')->pluck('receivables_account_id')->toArray();
            if(!in_array($accountDefaultSettings['receivables_account'], $customerReceivables)){
                array_push($customerReceivables, $accountDefaultSettings['receivables_account']);
            }

            $ledgers = ChartOfAccount::with([
                'accountGroup'
            ])
            ->whereIn('id', array_merge($customerReceivables, array_merge($supplierPayables, array_merge(explode(',', $request->asset_ledgers), explode(',', $request->liability_ledgers)))))
            ->orderBy('code', 'asc')->get();

            $entries = EntryItem::with([
                'entry.exchangeRate',
            ])
            ->when($to, function($query) use($to){
                return $query->whereHas('entry', function($query) use($to){
                    return $query->where('date', '<=', $to);
                });
            })
            ->doesntHave('entry.purchaseOrder')
            ->doesntHave('entry.saleOrder')
            ->whereIn('chart_of_account_id', $ledgers->pluck('id')->toArray())
            ->where('realized', 0)
            ->get();

            $orderEntries = EntryItem::with([
                'entry.exchangeRate',
            ])
            ->when($to, function($query) use($to){
                return $query->whereHas('entry', function($query) use($to){
                    return $query->where('date', '<=', $to);
                });
            })
            ->where(function($query){
                return $query->where(function($query){
                    return $query->has('entry.purchaseOrder');
                })->orWhere(function($query){
                    return $query->has('entry.saleOrder');
                });
            })
            ->whereIn('chart_of_account_id', $ledgers->pluck('id')->toArray())
            ->where('realized', 0)
            ->get();

            $currencies = Currency::all();
            $runRates = [];
            foreach ($currencies as $currency) {
                $runRates[$currency->id] = getExchangeRates($currency->id, request()->get('run_date'), '23:59:59');
            }

            $data = [];
            $asset_gain = 0;
            $asset_loss = 0;
            $liability_gain = 0;
            $liability_loss = 0;

            $provisions = [];

            if($ledgers->whereIn('id', $supplierPayables)->count() > 0){
                foreach($ledgers->whereIn('id', $supplierPayables)->sortBy('code') as $key => $ledger){
                    if($currencies->count() > 0){
                        foreach($currencies as $currency_key => $currency){
                            $transactions = $orderEntries->where('entry.exchangeRate.currency_id', $currency->id)->where('chart_of_account_id', $ledger->id);

                            $transaction_currency = 0;
                            $reporting_currency = 0;
                            $run_rate = isset(json_decode($runRates[$currency->id]['rate']->rates, true)[$systemCurrency->id]['rate']) ? json_decode($runRates[$currency->id]['rate']->rates, true)[$systemCurrency->id]['rate'] : 1;
                            
                            if($transactions->count() > 0){
                                foreach($transactions as $key => $transaction){
                                    $rate = exchangeRate($transaction->entry->exchangeRate, $systemCurrency->id);
                                    $transaction_currency += $transaction->amount*($transaction->debit_credit == 'D' ? 1 : (-1));
                                    $reporting_currency += $transaction->amount*($transaction->debit_credit == 'D' ? 1 : (-1))*$rate;

                                    array_push($provisions, $transaction->id);
                                }
                            }

                            $unrealized_amount = $transaction_currency*$run_rate;
                            $gain = $unrealized_amount > $reporting_currency ? $unrealized_amount-$reporting_currency : 0;
                            $loss = $unrealized_amount < $reporting_currency ? $reporting_currency-$unrealized_amount : 0;

                            if($transaction_currency != 0 && ($gain > 0 || $loss > 0)){
                                $data['payables'][$ledger->id][$currency->id] = [
                                    'transaction_currency' => $transaction_currency,
                                    'reporting_exchange_rate' => $run_rate,
                                    'reporting_currency' => $reporting_currency,
                                    'unrealized_amount' => $unrealized_amount,
                                    'gain' => $gain,
                                    'loss' => $loss,
                                ];

                                $liability_gain += $gain;
                                $liability_loss += $loss;

                                if($gain > 0){
                                    array_push($journalEntries, [
                                        'cost_centre_id' => auth()->user()->costCentre->id,
                                        'chart_of_account_id' => $unrealizedCurrencyEventSettings['pnl_liability_ledger_id'],
                                        'debit' => 0,
                                        'credit' => $gain,
                                        'narration' => 'Liability Gain Credit',
                                    ]);

                                    array_push($provisionJournalEntries, [
                                        'cost_centre_id' => auth()->user()->costCentre->id,
                                        'chart_of_account_id' => $unrealizedCurrencyEventSettings['pnl_liability_ledger_id'],
                                        'debit' => $gain,
                                        'credit' => 0,
                                        'narration' => 'Liability Gain Debit',
                                    ]);
                                }

                                if($loss > 0){
                                    array_push($journalEntries, [
                                        'cost_centre_id' => auth()->user()->costCentre->id,
                                        'chart_of_account_id' => $unrealizedCurrencyEventSettings['pnl_liability_ledger_id'],
                                        'debit' => $loss,
                                        'credit' => 0,
                                        'narration' => 'Liability Loss Debit',
                                    ]);

                                    array_push($provisionJournalEntries, [
                                        'cost_centre_id' => auth()->user()->costCentre->id,
                                        'chart_of_account_id' => $unrealizedCurrencyEventSettings['pnl_liability_ledger_id'],
                                        'debit' => 0,
                                        'credit' => $loss,
                                        'narration' => 'Liability Loss Credit',
                                    ]);
                                }
                            }
                        }
                    }
                }
            }

            if($ledgers->whereIn('id', $customerReceivables)->count() > 0){
                foreach($ledgers->whereIn('id', $customerReceivables)->sortBy('code') as $key => $ledger){
                    if($currencies->count() > 0){
                        foreach($currencies as $currency_key => $currency){
                            $transactions = $orderEntries->where('entry.exchangeRate.currency_id', $currency->id)->where('chart_of_account_id', $ledger->id);

                            $transaction_currency = 0;
                            $reporting_currency = 0;
                            $run_rate = isset(json_decode($runRates[$currency->id]['rate']->rates, true)[$systemCurrency->id]['rate']) ? json_decode($runRates[$currency->id]['rate']->rates, true)[$systemCurrency->id]['rate'] : 1;
                            if($transactions->count() > 0){
                                foreach($transactions as $key => $transaction){
                                    $rate = exchangeRate($transaction->entry->exchangeRate, $systemCurrency->id);
                                    $transaction_currency += $transaction->amount*($transaction->debit_credit == 'D' ? 1 : (-1));
                                    $reporting_currency += $transaction->amount*($transaction->debit_credit == 'D' ? 1 : (-1))*$rate;

                                    array_push($provisions, $transaction->id);
                                }
                            }

                            $unrealized_amount = $transaction_currency*$run_rate;
                            $gain = $reporting_currency < $unrealized_amount ? $unrealized_amount-$reporting_currency : 0;
                            $loss = $reporting_currency > $unrealized_amount ? $reporting_currency-$unrealized_amount : 0;
                            
                            if($transaction_currency != 0 && ($gain > 0 || $loss > 0)){
                                $data['assets'][$ledger->id][$currency->id] = [
                                    'transaction_currency' => $transaction_currency,
                                    'reporting_exchange_rate' => $run_rate,
                                    'reporting_currency' => $reporting_currency,
                                    'unrealized_amount' => $unrealized_amount,
                                    'gain' => $gain,
                                    'loss' => $loss,
                                ];

                                $asset_gain += $gain;
                                $asset_loss += $loss;

                                if($gain > 0){
                                    array_push($journalEntries, [
                                        'cost_centre_id' => auth()->user()->costCentre->id,
                                        'chart_of_account_id' => $unrealizedCurrencyEventSettings['pnl_asset_ledger_id'],
                                        'debit' => 0,
                                        'credit' => $gain,
                                        'narration' => 'Asset Gain Credit',
                                    ]);

                                    
                                    array_push($provisionJournalEntries, [
                                        'cost_centre_id' => auth()->user()->costCentre->id,
                                        'chart_of_account_id' => $unrealizedCurrencyEventSettings['pnl_asset_ledger_id'],
                                        'debit' => $gain,
                                        'credit' => 0,
                                        'narration' => 'Asset Gain Debit',
                                    ]);
                                }

                                if($loss > 0){
                                    array_push($journalEntries, [
                                        'cost_centre_id' => auth()->user()->costCentre->id,
                                        'chart_of_account_id' => $unrealizedCurrencyEventSettings['pnl_asset_ledger_id'],
                                        'debit' => $loss,
                                        'credit' => 0,
                                        'narration' => 'Asset Loss Debit',
                                    ]);

                                    array_push($provisionJournalEntries, [
                                        'cost_centre_id' => auth()->user()->costCentre->id,
                                        'chart_of_account_id' => $unrealizedCurrencyEventSettings['pnl_asset_ledger_id'],
                                        'debit' => 0,
                                        'credit' => $loss,
                                        'narration' => 'Asset Loss Credit',
                                    ]);
                                }
                            }
                        }
                    }
                }
            }

            if($ledgers->whereIn('id', explode(',', $request->asset_ledgers))->count() > 0){
                foreach($ledgers->whereIn('id', explode(',', $request->asset_ledgers))->sortBy('code') as $key => $ledger){
                    if($currencies->count() > 0){
                        foreach($currencies as $currency_key => $currency){
                            $transactions = $entries->where('entry.exchangeRate.currency_id', $currency->id)->where('chart_of_account_id', $ledger->id);

                            $transaction_currency = 0;
                            $reporting_currency = 0;
                            $run_rate = isset(json_decode($runRates[$currency->id]['rate']->rates, true)[$systemCurrency->id]['rate']) ? json_decode($runRates[$currency->id]['rate']->rates, true)[$systemCurrency->id]['rate'] : 1;
                            if($transactions->count() > 0){
                                foreach($transactions as $key => $transaction){
                                    $rate = exchangeRate($transaction->entry->exchangeRate, $systemCurrency->id);
                                    $transaction_currency += $transaction->amount*($transaction->debit_credit == 'D' ? 1 : (-1));
                                    $reporting_currency += $transaction->amount*($transaction->debit_credit == 'D' ? 1 : (-1))*$rate;

                                    array_push($provisions, $transaction->id);
                                }
                            }

                            $unrealized_amount = $transaction_currency*$run_rate;
                            $gain = $reporting_currency < $unrealized_amount ? $unrealized_amount-$reporting_currency : 0;
                            $loss = $reporting_currency > $unrealized_amount ? $reporting_currency-$unrealized_amount : 0;
                            
                            if($transaction_currency != 0 && ($gain > 0 || $loss > 0)){
                                $data['assets'][$ledger->id][$currency->id] = [
                                    'transaction_currency' => $transaction_currency,
                                    'reporting_exchange_rate' => $run_rate,
                                    'reporting_currency' => $reporting_currency,
                                    'unrealized_amount' => $unrealized_amount,
                                    'gain' => $gain,
                                    'loss' => $loss,
                                ];

                                $asset_gain += $gain;
                                $asset_loss += $loss;

                                if($gain > 0){
                                    array_push($journalEntries, [
                                        'cost_centre_id' => auth()->user()->costCentre->id,
                                        'chart_of_account_id' => $unrealizedCurrencyEventSettings['pnl_asset_ledger_id'],
                                        'debit' => 0,
                                        'credit' => $gain,
                                        'narration' => 'Asset Gain Credit',
                                    ]);

                                    
                                    array_push($provisionJournalEntries, [
                                        'cost_centre_id' => auth()->user()->costCentre->id,
                                        'chart_of_account_id' => $unrealizedCurrencyEventSettings['pnl_asset_ledger_id'],
                                        'debit' => $gain,
                                        'credit' => 0,
                                        'narration' => 'Asset Gain Debit',
                                    ]);
                                }

                                if($loss > 0){
                                    array_push($journalEntries, [
                                        'cost_centre_id' => auth()->user()->costCentre->id,
                                        'chart_of_account_id' => $unrealizedCurrencyEventSettings['pnl_asset_ledger_id'],
                                        'debit' => $loss,
                                        'credit' => 0,
                                        'narration' => 'Asset Loss Debit',
                                    ]);

                                    array_push($provisionJournalEntries, [
                                        'cost_centre_id' => auth()->user()->costCentre->id,
                                        'chart_of_account_id' => $unrealizedCurrencyEventSettings['pnl_asset_ledger_id'],
                                        'debit' => 0,
                                        'credit' => $loss,
                                        'narration' => 'Asset Loss Credit',
                                    ]);
                                }
                            }
                        }
                    }
                }
            }

            if($ledgers->whereIn('id', explode(',', $request->liability_ledgers))->count() > 0){
                foreach($ledgers->whereIn('id', explode(',', $request->liability_ledgers))->sortBy('code') as $key => $ledger){
                    if($currencies->count() > 0){
                        foreach($currencies as $currency_key => $currency){
                            $transactions = $entries->where('entry.exchangeRate.currency_id', $currency->id)->where('chart_of_account_id', $ledger->id);

                            $transaction_currency = 0;
                            $reporting_currency = 0;
                            $run_rate = isset(json_decode($runRates[$currency->id]['rate']->rates, true)[$systemCurrency->id]['rate']) ? json_decode($runRates[$currency->id]['rate']->rates, true)[$systemCurrency->id]['rate'] : 1;
                            
                            if($transactions->count() > 0){
                                foreach($transactions as $key => $transaction){
                                    $rate = exchangeRate($transaction->entry->exchangeRate, $systemCurrency->id);
                                    $transaction_currency += $transaction->amount*($transaction->debit_credit == 'D' ? 1 : (-1));
                                    $reporting_currency += $transaction->amount*($transaction->debit_credit == 'D' ? 1 : (-1))*$rate;

                                    array_push($provisions, $transaction->id);
                                }
                            }

                            $unrealized_amount = $transaction_currency*$run_rate;
                            $gain = $unrealized_amount > $reporting_currency ? $unrealized_amount-$reporting_currency : 0;
                            $loss = $unrealized_amount < $reporting_currency ? $reporting_currency-$unrealized_amount : 0;

                            if($transaction_currency != 0 && ($gain > 0 || $loss > 0)){
                                $data['liabilities'][$ledger->id][$currency->id] = [
                                    'transaction_currency' => $transaction_currency,
                                    'reporting_exchange_rate' => $run_rate,
                                    'reporting_currency' => $reporting_currency,
                                    'unrealized_amount' => $unrealized_amount,
                                    'gain' => $gain,
                                    'loss' => $loss,
                                ];

                                $liability_gain += $gain;
                                $liability_loss += $loss;

                                if($gain > 0){
                                    array_push($journalEntries, [
                                        'cost_centre_id' => auth()->user()->costCentre->id,
                                        'chart_of_account_id' => $unrealizedCurrencyEventSettings['pnl_liability_ledger_id'],
                                        'debit' => 0,
                                        'credit' => $gain,
                                        'narration' => 'Liability Gain Credit',
                                    ]);

                                    array_push($provisionJournalEntries, [
                                        'cost_centre_id' => auth()->user()->costCentre->id,
                                        'chart_of_account_id' => $unrealizedCurrencyEventSettings['pnl_liability_ledger_id'],
                                        'debit' => $gain,
                                        'credit' => 0,
                                        'narration' => 'Liability Gain Debit',
                                    ]);
                                }

                                if($loss > 0){
                                    array_push($journalEntries, [
                                        'cost_centre_id' => auth()->user()->costCentre->id,
                                        'chart_of_account_id' => $unrealizedCurrencyEventSettings['pnl_liability_ledger_id'],
                                        'debit' => $loss,
                                        'credit' => 0,
                                        'narration' => 'Liability Loss Debit',
                                    ]);

                                    array_push($provisionJournalEntries, [
                                        'cost_centre_id' => auth()->user()->costCentre->id,
                                        'chart_of_account_id' => $unrealizedCurrencyEventSettings['pnl_liability_ledger_id'],
                                        'debit' => 0,
                                        'credit' => $loss,
                                        'narration' => 'Liability Loss Credit',
                                    ]);
                                }
                            }
                        }
                    }
                }
            }

            $event = UnrealizedCurrencyEvent::create([
                'reference' => \Str::random(8),
                'run_date' => $request->run_date,
                'reversal_date' => $request->reversal_date,
                'payable' => $request->payables,
                'receivable' => $request->receivables,
            ]);

            $eventLedgers = [];
            if(is_array($data) && count($data) > 0){
                foreach($data as $portion){
                    if(is_array($portion) && count($portion) > 0){
                        foreach($portion as $ledger_id => $currencies){
                            if(is_array($currencies) && count($currencies) > 0){
                                foreach($currencies as $currency_id => $value){
                                    array_push($eventLedgers, [
                                        'currency_event_id' => $event->id,
                                        'chart_of_account_id' => $ledger_id,
                                        'transaction_currency_id' => $currency_id,
                                        'reporting_currency_id' => $systemCurrency->id,
                                        'transaction_amount' => $value['transaction_currency'],
                                        'transaction_exchange_rate' => $value['transaction_currency'] != 0 && $value['reporting_currency'] != 0 ? $value['reporting_currency']/$value['transaction_currency']  : 0,
                                        'reporting_amount' => $value['reporting_currency'],
                                        'run_date_exchange_rate' => $value['reporting_exchange_rate'],
                                        'unrealized_amount' => $value['unrealized_amount'],
                                        'gain' => $value['gain'],
                                        'loss' => $value['loss'],
                                    ]);
                                }
                            }
                        }
                    }
                }
            }

            if(is_array($eventLedgers) && count($eventLedgers) > 0){
                UnrealizedCurrencyEventLedger::insert($eventLedgers);
            }else{
                return response()->json([
                    'success' => false,
                    "message" => "No Data found for this operation!"
                ]);
            }                                          

            if($asset_gain > 0){
                array_push($journalEntries, [
                    'cost_centre_id' => auth()->user()->costCentre->id,
                    'chart_of_account_id' => $unrealizedCurrencyEventSettings['provision_asset_ledger_id'],
                    'debit' => $asset_gain,
                    'credit' => 0,
                    'narration' => 'Provision Debit',
                ]);

                array_push($provisionJournalEntries, [
                    'cost_centre_id' => auth()->user()->costCentre->id,
                    'chart_of_account_id' => $unrealizedCurrencyEventSettings['provision_asset_ledger_id'],
                    'debit' => 0,
                    'credit' => $asset_gain,
                    'narration' => 'Provision Credit',
                ]);
            }

            if($asset_loss > 0){
                array_push($journalEntries, [
                    'cost_centre_id' => auth()->user()->costCentre->id,
                    'chart_of_account_id' => $unrealizedCurrencyEventSettings['provision_asset_ledger_id'],
                    'debit' => 0,
                    'credit' => $asset_loss,
                    'narration' => 'Provision Credit',
                ]);

                array_push($provisionJournalEntries, [
                    'cost_centre_id' => auth()->user()->costCentre->id,
                    'chart_of_account_id' => $unrealizedCurrencyEventSettings['provision_asset_ledger_id'],
                    'debit' => $asset_loss,
                    'credit' => 0,
                    'narration' => 'Provision Debit',
                ]);
            }

            if($liability_gain > 0){
                array_push($journalEntries, [
                    'cost_centre_id' => auth()->user()->costCentre->id,
                    'chart_of_account_id' => $unrealizedCurrencyEventSettings['provision_liability_ledger_id'],
                    'debit' => $liability_gain,
                    'credit' => 0,
                    'narration' => 'Provision Debit',
                ]);
                
                array_push($provisionJournalEntries, [
                    'cost_centre_id' => auth()->user()->costCentre->id,
                    'chart_of_account_id' => $unrealizedCurrencyEventSettings['provision_liability_ledger_id'],
                    'debit' => 0,
                    'credit' => $liability_gain,
                    'narration' => 'Provision Credit',
                ]);
            }

            if($liability_loss > 0){
                array_push($journalEntries, [
                    'cost_centre_id' => auth()->user()->costCentre->id,
                    'chart_of_account_id' => $unrealizedCurrencyEventSettings['provision_liability_ledger_id'],
                    'debit' => 0,
                    'credit' => $liability_loss,
                    'narration' => 'Provision Credit',
                ]);

                array_push($provisionJournalEntries, [
                    'cost_centre_id' => auth()->user()->costCentre->id,
                    'chart_of_account_id' => $unrealizedCurrencyEventSettings['provision_liability_ledger_id'],
                    'debit' => $liability_loss,
                    'credit' => 0,
                    'narration' => 'Provision Debit',
                ]);
            }

            $exchange_rate_id = $runRates[$systemCurrency->id]['rate']->id;
            $entry = saveLedgerEntries(5, date('Y-m-d H:i:s', strtotime($request->run_date)), 1, '', 'Unrealized Currency Evaluation', $journalEntries, $exchange_rate_id, 0, 0, 0, getCostCentreCompany(auth()->user()->costCentre->id));
            saveLedgerEntries(5, date('Y-m-d H:i:s', strtotime($request->reversal_date)), 1, $entry['entry']->number, 'Unrealized Currency Evaluation :: Reversal', $provisionJournalEntries, $exchange_rate_id, 0, 0, 0, getCostCentreCompany(auth()->user()->costCentre->id));

            DB::commit();
            session()->flash('alert-type', 'success');
            session()->flash('message', 'Currency Evaluation has benn done successfully.');
            return response()->json([
                'success' => true,
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function show($ledger_id)
    {
        try{
            $ledger = ChartOfAccount::findOrFail($ledger_id);
            $currency = Currency::findOrFail(request()->get('currency_id'));

            $lastEvaluated = UnrealizedCurrencyEvent::orderBy('id', 'desc')->first();
            $from = isset($lastEvaluated->id) ? $lastEvaluated->run_date : false;
            $to = request()->get('run_date');

            $data = [
                'ledger' => $ledger,
                'currency' => $currency,
                'systemCurrency' => systemCurrency(),
                'unrealizedCurrencyEventSettings' => unrealizedCurrencyEventSettings(),
                'run_date' => getExchangeRates($currency->id, request()->get('run_date'), '23:59:59'),
                'entries' => EntryItem::with([
                    'entry.exchangeRate',
                    'entry.purchaseOrder.purchaseOrder.relSupplierPayments.relSupplierLedgers'
                ])
                ->when($to, function($query) use($to){
                    return $query->whereHas('entry', function($query) use($to){
                        return $query->where('date', '<=', $to);
                    });
                })
                ->where('chart_of_account_id', $ledger_id)
                ->where('realized', 0)
                ->get()
            ];

            return response()->json([
                'title' => ucwords(request()->get('type'))." Details for [".$ledger->code.'] '.$ledger->name.', Currency: '.$currency->name.', Run date: '.request()->get('run_date'),
                'content' => view('accounting.backend.pages.unrealizedCurrencyEvaluation.details.'.request()->get('type'), $data)->render()
            ]);
        }catch (\Throwable $th){
            return response()->json([
                'title' => "Whoops!",
                'content' => $th->getMessage()
            ]);
        }
    }
}
