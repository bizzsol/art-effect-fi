<?php
bolt_decrypt( __FILE__ , 'Ty4NFr'); return 0;
##!!!##