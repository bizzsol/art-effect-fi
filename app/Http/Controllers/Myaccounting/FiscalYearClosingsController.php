<?php
bolt_decrypt( __FILE__ , 'MZNqHI'); return 0;
##!!!##