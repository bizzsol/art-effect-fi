<?php
bolt_decrypt( __FILE__ , 'nXEh1T'); return 0;
##!!!##