<?php
bolt_decrypt( __FILE__ , '6l0yTa'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use \App\Models\PmsModels\Accounts\Company;
use \App\Models\PmsModels\Accounts\FiscalYear;
use \App\Models\PmsModels\Accounts\FiscalYearClosing;
use \App\Models\PmsModels\Accounts\FiscalYearClosingLedger;
use \App\Models\PmsModels\Accounts\ChartOfAccount;
use \App\Models\PmsModels\Accounts\EntryItem;
use \App\Models\PmsModels\Accounts\ExchangeRate;

use \App\Models\PmsModels\Accounts\FiscalYearOpening;
use \App\Models\PmsModels\Accounts\FiscalYearOpeningUser;
use \App\Models\PmsModels\Accounts\FiscalYearOpeningEntry;

use App, DB, DataTables;

class FiscalYearClosingsController extends Controller
{   
    /**
     * Set global data table headers.
     *
     * @return headerColumns
     */
     public function headerColumns($value='')
     {
        $rows =  array(
            ['SL', 'SL'],
            ['company', 'company', 'text-center'],
            ['reference', 'reference', 'text-center'],
            ['date', 'date','text-center'],
            ['time', 'time', 'text-center'],
            ['from_fiscal_year', 'from_fiscal_year', 'text-center'],
            ['to_fiscal_year', 'to_fiscal_year', 'text-center'],
            ['balance', 'balance', 'text-center'],
            ['profit_loss', 'profit_loss', 'text-center'],
            ['retained_earnings', 'retained_earnings', 'text-center'],
            ['processed_by', 'processed_by', 'text-center'],
        );
        return $rows;
    }

    public function index()
    {
        $title = 'Fiscal Year Closings';
        try {

            $fiscalYearClosings = FiscalYearClosing::with([
                'fromFiscalYear',
                'toFiscalYear',
                'creator'
            ])
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });

            if (request()->ajax()) {
                return Datatables::of($fiscalYearClosings)
                ->addIndexColumn()

                ->addColumn('company', function($closing){
                    return $closing->company ? '['.$closing->company->code.'] '.$closing->company->name : '';
                })
                ->filterColumn('company', function ($query, $keyword) {
                    return $query->whereHas('company', function ($query) use ($keyword) {
                        $query->where('code', 'LIKE', '%' . $keyword . '%')
                              ->orWhere('name', 'LIKE', '%' . $keyword . '%');
                    });
                })
                ->orderColumn('company', function ($query, $order) {
                    return pleaseSortMe($query, $order, Company::select('companies.name')
                        ->whereColumn('companies.id', 'fiscal_year_closings.company_id')
                    );
                })

                ->editColumn('reference', function($closing){
                    return '<a href="'.url('accounting/fiscal-year-closings/'.$closing->id).'">'.$closing->reference.'</a>';
                })
                ->editColumn('time', function($closing){
                    return date('g:i a', strtotime($closing->time));
                })
                
                ->addColumn('from_fiscal_year', function($closing){
                    return $closing->fromFiscalYear ? $closing->fromFiscalYear->title.' | '.date('d-M-y', strtotime($closing->fromFiscalYear->start)).' to '.date('d-M-y', strtotime($closing->fromFiscalYear->end)) : '';
                })
                ->filterColumn('from_fiscal_year', function ($query, $keyword) {
                    return $query->whereHas('fromFiscalYear', function ($query) use ($keyword) {
                        $query->where('title', 'LIKE', '%' . $keyword . '%')
                              ->orWhere('start', 'LIKE', '%' . $keyword . '%')
                              ->orWhere('end', 'LIKE', '%' . $keyword . '%');
                    });
                })
                ->orderColumn('from_fiscal_year', function ($query, $order) {
                    return pleaseSortMe($query, $order, FiscalYear::select('fiscal_years.title')
                        ->whereColumn('fiscal_years.id', 'fiscal_year_closings.from_fiscal_year_id')
                    );
                })

                ->addColumn('to_fiscal_year', function($closing){
                    return $closing->toFiscalYear ? $closing->toFiscalYear->title.' | '.date('d-M-y', strtotime($closing->toFiscalYear->start)).' to '.date('d-M-y', strtotime($closing->toFiscalYear->end)) : '';
                })
                ->filterColumn('to_fiscal_year', function ($query, $keyword) {
                    return $query->whereHas('toFiscalYear', function ($query) use ($keyword) {
                        $query->where('title', 'LIKE', '%' . $keyword . '%')
                              ->orWhere('start', 'LIKE', '%' . $keyword . '%')
                              ->orWhere('end', 'LIKE', '%' . $keyword . '%');
                    });
                })
                ->orderColumn('to_fiscal_year', function ($query, $order) {
                    return pleaseSortMe($query, $order, FiscalYear::select('fiscal_years.title')
                        ->whereColumn('fiscal_years.id', 'fiscal_year_closings.to_fiscal_year_id')
                    );
                })

                ->addColumn('processed_by', function($closing){
                    return $closing->creator ? $closing->creator->name : '';
                })
                ->filterColumn('processed_by', function ($query, $keyword) {
                    return $query->whereHas('creator', function ($query) use ($keyword) {
                        $query->where('name', 'LIKE', '%' . $keyword . '%');
                    });
                })
                ->orderColumn('processed_by', function ($query, $order) {
                    return pleaseSortMe($query, $order, \App\User::select('users.name')
                        ->whereColumn('users.id', 'fiscal_year_closings.created_at')
                    );
                })

                ->rawColumns(['reference'])
                ->make(true);
            }

            $data = [
                'title' => $title,
                'headerColumns' => $this->headerColumns(),
            ];

            return view('accounting.backend.pages.fiscalYearClosings.index', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function create()
    {
        $companies = Company::all();
        $company = false;

        $data = [
            'title' => 'Run Fiscal Year Closing',
            'companies' => $companies
        ];

        if(request()->has('company_id')){
            $company = Company::findOrFail(request()->get('company_id'));
            if(isset($company->id)){
                $accountDefaultSettings = accountDefaultSettings();
                $balanceSheetItems = isset(json_decode($accountDefaultSettings['balance_sheet_items'], true)[0]) ? json_decode($accountDefaultSettings['balance_sheet_items'], true) : [];
                $profitLossItems = isset(json_decode($accountDefaultSettings['profit_loss_items'], true)[0]) ? json_decode($accountDefaultSettings['profit_loss_items'], true) : [];
                
                $fiscalYear = getActiveFiscalYear($company->id);
                $systemCurrency = systemCurrency();

                $debitTransactions = EntryItem::join('entries', 'entries.id', '=', 'entry_items.entry_id')
                ->join('cost_centres', 'cost_centres.id', '=', 'entry_items.cost_centre_id')
                ->join('profit_centres', 'profit_centres.id', '=', 'cost_centres.profit_centre_id')

                ->join('chart_of_accounts', 'chart_of_accounts.id', '=', 'entry_items.chart_of_account_id')
                ->join('account_groups', 'account_groups.id', '=', 'chart_of_accounts.account_group_id')

                ->where('entries.is_approved', 'approved')
                ->where('entries.date', '>=', $fiscalYear->start)
                ->where('entries.date', '<=', $fiscalYear->end)
                ->where('entries.fiscal_year_id', $fiscalYear->id)
                ->where('profit_centres.company_id', $company->id)
                ->where('entry_items.debit_credit', 'D')

                ->groupBy('entry_items.chart_of_account_id')

                ->get([
                    'entry_items.chart_of_account_id',
                    DB::raw('sum(entry_items.reporting_amount) as reporting_amount')
                ]);

                $creditTransactions = EntryItem::join('entries', 'entries.id', '=', 'entry_items.entry_id')
                ->join('cost_centres', 'cost_centres.id', '=', 'entry_items.cost_centre_id')
                ->join('profit_centres', 'profit_centres.id', '=', 'cost_centres.profit_centre_id')

                ->join('chart_of_accounts', 'chart_of_accounts.id', '=', 'entry_items.chart_of_account_id')
                ->join('account_groups', 'account_groups.id', '=', 'chart_of_accounts.account_group_id')

                ->where('entries.is_approved', 'approved')
                ->where('entries.date', '>=', $fiscalYear->start)
                ->where('entries.date', '<=', $fiscalYear->end)
                ->where('entries.fiscal_year_id', $fiscalYear->id)
                ->where('profit_centres.company_id', $company->id)
                ->where('entry_items.debit_credit', 'C')

                ->groupBy('entry_items.chart_of_account_id')

                ->get([
                    'entry_items.chart_of_account_id',
                    DB::raw('sum(entry_items.reporting_amount) as reporting_amount')
                ]);

                $carryForwarded = FiscalYearClosingLedger::join('fiscal_year_closings', 'fiscal_year_closings.id', '=', 'fiscal_year_closing_ledgers.fiscal_year_closing_id')

                ->join('chart_of_accounts', 'chart_of_accounts.id', '=', 'fiscal_year_closing_ledgers.chart_of_account_id')
                ->join('account_groups', 'account_groups.id', '=', 'chart_of_accounts.account_group_id')

                ->where('fiscal_year_closings.company_id', $company->id)
                ->where('fiscal_year_closings.to_fiscal_year_id', $fiscalYear->id)
                
                ->groupBy('fiscal_year_closing_ledgers.chart_of_account_id')

                ->get([
                    'fiscal_year_closing_ledgers.chart_of_account_id',
                    DB::raw('sum(fiscal_year_closing_ledgers.carry_forwarding_amount) as carry_forwarding_amount')
                ]);

                $getAllGroupAndLedgers = getAllGroupAndLedgers();

                $balanceSheetLedgers = ChartOfAccount::with([
                    'accountGroup.accountClass',
                    'exchangeRate'
                ])
                ->whereHas('accountGroup', function($query) use($balanceSheetItems){
                    return $query->whereIn('account_class_id', $balanceSheetItems);
                })
                ->orderBy('code', 'asc')
                ->get();

                $profitLossLedgers = ChartOfAccount::with([
                    'accountGroup.accountClass',
                    'exchangeRate'
                ])
                ->whereHas('accountGroup', function($query) use($profitLossItems){
                    return $query->whereIn('account_class_id', $profitLossItems);
                })
                ->orderBy('code', 'asc')
                ->get();

                $fiscalYears = FiscalYear::where('start', '>=', $fiscalYear->end)
                ->whereDoesntHave('toFiscalYearClosing', function($query) use($company){
                    return $query->where('company_id', $company->id);
                })
                ->take(1)
                ->get();

                $data['title'] = 'Run Fiscal Year Closing for Company # ['.$company->code.'] '.$company->name;
                $data['company'] = $company;
                $data['accountDefaultSettings'] = $accountDefaultSettings;
                $data['fiscalYears'] = $fiscalYears;
                $data['balanceSheetLedgers'] = $balanceSheetLedgers;
                $data['profitLossLedgers'] = $profitLossLedgers;
                $data['systemCurrency'] = $systemCurrency;
                $data['fiscalYear'] = $fiscalYear;
                $data['carryForwarded'] = $carryForwarded;
                $data['debitTransactions'] = $debitTransactions;
                $data['creditTransactions'] = $creditTransactions;
                // $data['exchangeRates'] = $exchangeRates;
                $data['getAllGroupAndLedgers'] = $getAllGroupAndLedgers;
            }
        }

        return view('accounting.backend.pages.fiscalYearClosings.create', $data);
    }

    public function store(Request $request)
    {
        $request->validate([
            'company_id' => 'required',
            'from_fiscal_year_id' => 'required',
            'to_fiscal_year_id' => 'required',
        ]);

        DB::beginTransaction();
        try{
            
            $accountDefaultSettings = accountDefaultSettings();
            $balanceSheetItems = isset(json_decode($accountDefaultSettings['balance_sheet_items'], true)[0]) ? json_decode($accountDefaultSettings['balance_sheet_items'], true) : [];
            $profitLossItems = isset(json_decode($accountDefaultSettings['profit_loss_items'], true)[0]) ? json_decode($accountDefaultSettings['profit_loss_items'], true) : [];
            
            $fiscalYear = FiscalYear::findOrFail($request->from_fiscal_year_id);
            $systemCurrency = systemCurrency();
            $exchangeRate = getExchangeRates($systemCurrency->id, date('Y-m-d'), date('H:i:s'));

            $debitTransactions = EntryItem::join('entries', 'entries.id', '=', 'entry_items.entry_id')
            ->join('cost_centres', 'cost_centres.id', '=', 'entry_items.cost_centre_id')
            ->join('profit_centres', 'profit_centres.id', '=', 'cost_centres.profit_centre_id')

            ->join('chart_of_accounts', 'chart_of_accounts.id', '=', 'entry_items.chart_of_account_id')
            ->join('account_groups', 'account_groups.id', '=', 'chart_of_accounts.account_group_id')

            ->where('entries.is_approved', 'approved')
            ->where('entries.date', '>=', $fiscalYear->start)
            ->where('entries.date', '<=', $fiscalYear->end)
            ->where('entries.fiscal_year_id', $fiscalYear->id)
            ->where('profit_centres.company_id', $request->company_id)
            ->where('entry_items.debit_credit', 'D')

            ->groupBy('entry_items.chart_of_account_id')

            ->get([
                'entry_items.chart_of_account_id',
                DB::raw('sum(entry_items.reporting_amount) as reporting_amount')
            ]);

            $creditTransactions = EntryItem::join('entries', 'entries.id', '=', 'entry_items.entry_id')
            ->join('cost_centres', 'cost_centres.id', '=', 'entry_items.cost_centre_id')
            ->join('profit_centres', 'profit_centres.id', '=', 'cost_centres.profit_centre_id')

            ->join('chart_of_accounts', 'chart_of_accounts.id', '=', 'entry_items.chart_of_account_id')
            ->join('account_groups', 'account_groups.id', '=', 'chart_of_accounts.account_group_id')

            ->where('entries.is_approved', 'approved')
            ->where('entries.date', '>=', $fiscalYear->start)
            ->where('entries.date', '<=', $fiscalYear->end)
            ->where('entries.fiscal_year_id', $fiscalYear->id)
            ->where('profit_centres.company_id', $request->company_id)
            ->where('entry_items.debit_credit', 'C')

            ->groupBy('entry_items.chart_of_account_id')

            ->get([
                'entry_items.chart_of_account_id',
                DB::raw('sum(entry_items.reporting_amount) as reporting_amount')
            ]);

            $carryForwarded = FiscalYearClosingLedger::join('fiscal_year_closings', 'fiscal_year_closings.id', '=', 'fiscal_year_closing_ledgers.fiscal_year_closing_id')

            ->join('chart_of_accounts', 'chart_of_accounts.id', '=', 'fiscal_year_closing_ledgers.chart_of_account_id')
            ->join('account_groups', 'account_groups.id', '=', 'chart_of_accounts.account_group_id')

            ->where('fiscal_year_closings.company_id', $request->company_id)
            ->where('fiscal_year_closings.to_fiscal_year_id', $fiscalYear->id)
            
            ->groupBy('fiscal_year_closing_ledgers.chart_of_account_id')

            ->get([
                'fiscal_year_closing_ledgers.chart_of_account_id',
                DB::raw('sum(fiscal_year_closing_ledgers.carry_forwarding_amount) as carry_forwarding_amount')
            ]);

            $getAllGroupAndLedgers = getAllGroupAndLedgers();

            $balanceSheetLedgers = ChartOfAccount::with([
                'accountGroup.accountClass',
                'exchangeRate'
            ])
            ->whereHas('accountGroup', function($query) use($balanceSheetItems){
                return $query->whereIn('account_class_id', $balanceSheetItems);
            })
            ->orderBy('code', 'asc')
            ->get();

            $profitLossLedgers = ChartOfAccount::with([
                'accountGroup.accountClass',
                'exchangeRate'
            ])
            ->whereHas('accountGroup', function($query) use($profitLossItems){
                return $query->whereIn('account_class_id', $profitLossItems);
            })
            ->orderBy('code', 'asc')
            ->get();

            $carryForwarded = FiscalYearClosing::with([
                'exchangeRate',
                'ledgers'
            ])
            ->where('company_id', $request->company_id)
            ->where('to_fiscal_year_id', $fiscalYear->id)
            ->get();
            
            $ledgers = [];

            $profitLossBalance = 0;
            if($profitLossLedgers->count() > 0){
                foreach($profitLossLedgers as $key => $ledger){
                    $balance = systemDoubleValue(ledgerClosingBalance($ledger->accountGroup, $ledger, ['D' => $debitTransactions, 'C' => $creditTransactions], $getAllGroupAndLedgers, $carryForwarded)['balance'], 2);

                    $profitLossBalance += $balance;

                    $ledgers[$ledger->id]['previous_balance'] = $balance;
                    $ledgers[$ledger->id]['carry_forwarding_amount'] = 0;
                }
            }
            $profitLossBalance = systemDoubleValue($profitLossBalance, 2);

            $balanceSheetBalance = 0;
            if($balanceSheetLedgers->count() > 0){
                foreach($balanceSheetLedgers as $key => $ledger){
                    $balance = systemDoubleValue(ledgerClosingBalance($ledger->accountGroup, $ledger, ['D' => $debitTransactions, 'C' => $creditTransactions], $getAllGroupAndLedgers, $carryForwarded)['balance'], 2);
                    
                    $balanceSheetBalance += $balance;
                    $ledgers[$ledger->id]['previous_balance'] = $balance;
                    $ledgers[$ledger->id]['carry_forwarding_amount'] = $balance;
                }
            }
            $balanceSheetBalance = systemDoubleValue($balanceSheetBalance, 2);

            $ledgers[$accountDefaultSettings['retained_earnings']]['carry_forwarding_amount'] = $ledgers[$accountDefaultSettings['retained_earnings']]['carry_forwarding_amount']+$profitLossBalance;

            $closing = FiscalYearClosing::create([
                'reference' => \Str::random(8),
                'date' => date('Y-m-d'),
                'time' => date('H:i:s'),
                'company_id' => $request->company_id,
                'from_fiscal_year_id' => $request->from_fiscal_year_id,
                'to_fiscal_year_id' => $request->to_fiscal_year_id,
                'exchange_rate_id' => $exchangeRate['rate']->id,
                'balance' => $balanceSheetBalance,
                'profit_loss' => $profitLossBalance,
                'retained_earnings' => $profitLossBalance,
            ]);

            if($closing){
                if(is_array($ledgers) && count($ledgers) > 0){
                    $array = [];
                    foreach($ledgers as $chart_of_account_id => $value){
                        array_push($array, [
                            'fiscal_year_closing_id' => $closing->id,
                            'chart_of_account_id' => $chart_of_account_id,
                            'previous_balance' => $value['previous_balance'],
                            'carry_forwarding_amount' => $value['carry_forwarding_amount'],
                            'created_by' => auth()->user()->id
                        ]);
                    }

                    FiscalYearClosingLedger::insert($array);
                }
            }

            DB::commit();
            session()->flash('alert-type', 'success');
            session()->flash('message', 'Fiscal year Closing ran successfully.');
            return redirect('accounting/fiscal-year-closings');

        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function show($id)
    {
        $accountDefaultSettings = accountDefaultSettings();
        $balanceSheetItems = isset(json_decode($accountDefaultSettings['balance_sheet_items'], true)[0]) ? json_decode($accountDefaultSettings['balance_sheet_items'], true) : [];
        $profitLossItems = isset(json_decode($accountDefaultSettings['profit_loss_items'], true)[0]) ? json_decode($accountDefaultSettings['profit_loss_items'], true) : [];

        $closing = FiscalYearClosing::with([
            'exchangeRate.currency'
        ])->findOrFail($id);
        $data = [
            'title' => 'Fiscal Year Closing #'.$closing->reference,
            'closing' => $closing,
            'balanceSheetLedgers' => FiscalYearClosingLedger::with([
                'chartOfAccount'
            ])
            ->whereHas('chartOfAccount.accountGroup', function($query) use($balanceSheetItems){
                return $query->whereIn('account_class_id', $balanceSheetItems);
            })->get(),
            'profitLossLedgers' => FiscalYearClosingLedger::with([
                'chartOfAccount'
            ])
            ->whereHas('chartOfAccount.accountGroup', function($query) use($profitLossItems){
                return $query->whereIn('account_class_id', $profitLossItems);
            })->get(),
        ];

        return view('accounting.backend.pages.fiscalYearClosings.closing', $data);
    }

    public function edit($id)
    {
        
    }

    public function update(Request $request, $id)
    {
       
    }

    public function destroy($id)
    {

    }
}
