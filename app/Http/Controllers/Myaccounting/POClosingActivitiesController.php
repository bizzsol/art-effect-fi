<?php
bolt_decrypt( __FILE__ , '6oEEnK'); return 0;
##!!!##