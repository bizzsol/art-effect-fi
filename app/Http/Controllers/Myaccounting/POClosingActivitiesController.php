<?php
bolt_decrypt( __FILE__ , 'kZYf3I'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use \App\Models\PmsModels\Purchase\PurchaseOrder;
use \App\Models\PmsModels\Quotations;

use App, DB, DataTables;
use Illuminate\Support\Facades\Auth;

class POClosingActivitiesController extends Controller
{
    public function headerColumns($value='')
    {
        return array(
            ['SL', 'SL'],
            ['approved_date', 'approved_date', 'text-center'],
            ['reference_no', 'reference_no', 'text-center'],
            ['supplier', 'supplier'],
            ['quotation_ref_no', 'quotation_ref_no', 'text-center'],
            ['currency', 'currency', 'text-center'],
            ['total_price', 'total_price', 'text-right'],
            ['vat', 'vat', 'text-right'],
            ['gross_price', 'gross_price', 'text-right'],
            ['advance_amount', 'advance_amount', 'text-right'],
            ['bill_amount', 'bill_amount', 'text-right'],
            ['paid_amount', 'paid_amount', 'text-right'],
            ['options', 'options', 'text-center'],
        );
    }

    public function index()
    {
        try {
            if (request()->ajax()) {
                $purchaseOrders =  PurchaseOrder::with([
                    'relQuotation.relSuppliers',
                    'relQuotation.exchangeRate.currency',
                ])
                ->where('is_closed', request()->has('closed'))
                ->when(!datatableOrdering(), function($query){
                    return $query->orderby('reference_no', 'desc');
                });

                return DataTables::of($purchaseOrders)
                ->addColumn('approved_date', function($po){
                    return date('Y-m-d',strtotime($po->po_date));
                })
                ->filterColumn('approved_date', function ($query, $keyword) {
                    $query->where('po_date', 'LIKE', '%'.$keyword.'%');
                })
                ->orderColumn('approved_date', function ($query, $order) {
                    return $query->orderBy('po_date', $order);
                })
                ->editColumn('reference_no', function($po){
                    return  '<a target="__blank" href="'.route('pms.billing-audit.po.invoice.print', $po->id).'"  title="Purchase Order Print View">'.$po->reference_no.'</a>';
                })
                ->addColumn('supplier', function($po){
                    return  isset($po->relQuotation->relSuppliers) ? (isset($po->relQuotation->relSuppliers->name) ? $po->relQuotation->relSuppliers->name.' ('.$po->relQuotation->relSuppliers->code.')' : '') : '';
                })
                ->filterColumn('supplier', function ($query, $keyword) {
                    return $query->whereHas('relQuotation.relSuppliers', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%')
                              ->orWhere('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('supplier', function ($query, $order) {
                    return pleaseSortMe($query, $order, Quotations::select('suppliers.name')
                        ->join('suppliers', 'suppliers.id', '=', 'quotations.supplier_id')
                        ->whereColumn('quotations.id', 'purchase_orders.quotation_id')
                        ->take(1)
                    );
                })
                ->addColumn('quotation_ref_no', function($po){
                    return isset($po->relQuotation->reference_no)?$po->relQuotation->reference_no:'';
                })
                ->filterColumn('quotation_ref_no', function ($query, $keyword) {
                    return $query->whereHas('relQuotation', function ($query) use($keyword) {
                        $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('quotation_ref_no', function ($query, $order) {
                    return pleaseSortMe($query, $order, Quotations::select('quotations.reference_no')
                        ->whereColumn('quotations.id', 'purchase_orders.quotation_id')
                        ->take(1)
                    );
                })
                ->addColumn('currency', function($po){
                    return isset($po->relQuotation->exchangeRate->currency->code)?$po->relQuotation->exchangeRate->currency->code:'';
                })
                ->filterColumn('currency', function ($query, $keyword) {
                    return $query->whereHas('relQuotation.exchangeRate.currency', function ($query) use($keyword) {
                        $query->where('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('currency', function ($query, $order) {
                    return pleaseSortMe($query, $order, Quotations::select('currencies.code')
                        ->join('exchange_rates', 'exchange_rates.id', '=', 'quotations.exchange_rate_id')
                        ->join('currencies', 'currencies.id', '=', 'exchange_rates.currency_id')
                        ->whereColumn('quotations.id', 'purchase_orders.quotation_id')
                        ->take(1)
                    );
                })
                ->addColumn('total_price', function($po){
                    return ((isset($po->relQuotation->exchangeRate->currency->symbol)?$po->relQuotation->exchangeRate->currency->symbol:'').' '.systemMoneyFormat($po->total_price));
                })
                ->filterColumn('total_price', function ($query, $keyword) {
                    return $query->where('total_price', 'LIKE', '%'.$keyword.'%');
                    
                })
                ->orderColumn('total_price', function ($query, $order) {
                    return $query->orderBy('total_price', $order);
                })
                ->addColumn('vat', function($po){
                    return ((isset($po->relQuotation->exchangeRate->currency->symbol)?$po->relQuotation->exchangeRate->currency->symbol:'').' '.systemMoneyFormat($po->vat));
                })
                ->filterColumn('vat', function ($query, $keyword) {
                    return $query->where('vat', 'LIKE', '%'.$keyword.'%');
                    
                })
                ->orderColumn('vat', function ($query, $order) {
                    return $query->orderBy('vat', $order);
                })
                ->addColumn('gross_price', function($po){
                    return ((isset($po->relQuotation->exchangeRate->currency->symbol)?$po->relQuotation->exchangeRate->currency->symbol:'') .' '.systemMoneyFormat($po->gross_price));
                })
                ->filterColumn('gross_price', function ($query, $keyword) {
                    return $query->where('gross_price', 'LIKE', '%'.$keyword.'%');
                    
                })
                ->orderColumn('gross_price', function ($query, $order) {
                    return $query->orderBy('gross_price', $order);
                })
                ->addColumn('advance_amount', function($po){
                    return ((isset($po->relQuotation->exchangeRate->currency->symbol)?$po->relQuotation->exchangeRate->currency->symbol:'') .' '. systemMoneyFormat(poAdvance($po->id)['advance']));
                })
                
                ->addColumn('bill_amount', function($po){
                    return ((isset($po->relQuotation->exchangeRate->currency->symbol)?$po->relQuotation->exchangeRate->currency->symbol:'') .' '.systemMoneyFormat(\App\Models\PmsModels\SupplierLedgers::whereHas('relSupplierPayment', function($query) use($po){
                        return $query->where('purchase_order_id', $po->id);
                    })->sum('debit')));
                })
                ->addColumn('paid_amount', function($po){
                    return ((isset($po->relQuotation->exchangeRate->currency->symbol)?$po->relQuotation->exchangeRate->currency->symbol:'') .' '. systemMoneyFormat(\App\Models\PmsModels\SupplierPayment::where('purchase_order_id', $po->id)->whereIn('bill_type', ['po', 'grn'])->sum('bill_amount')));
                })
                ->addColumn('options', function($po){
                    if($po->is_closed == 1){
                        return '<a title="Re-open Purchase Order" class="btn btn-xs btn-success" onclick="OpenModal($(this))" data-purchase-order-id="'.$po->id.'">
                            <i class="las la-folder-open"></i>&nbsp;Re-open
                        </a>';
                    }else{
                        return '<a title="Close Purchase Order" class="btn btn-xs btn-danger" onclick="OpenModal($(this))" data-purchase-order-id="'.$po->id.'">
                            <i class="las la-folder-minus"></i>&nbsp;Close
                        </a>';
                    }
                })
                ->addIndexColumn()
                ->rawColumns(['reference_no', 'options'])
                ->make(true);
            }

            return view('accounting.backend.pages.poClosingActivities.index', [
                'title' => ((request()->has('closed') ? "Closed" : "Open")." Purchase Orders"), 
                'headerColumns' => $this->headerColumns()
            ]);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function create()
    {
        $purchaseOrder = PurchaseOrder::findOrFail(request()->get('purchase_order_id'));
        return response()->json([
            'title' => ($purchaseOrder->is_closed == 1 ? 'Re-open' : 'Close').' Purchase order #'.$purchaseOrder->reference_no,
            'body' => view('accounting.backend.pages.poClosingActivities.close', compact('purchaseOrder'))->render()
        ]);
    }

    public function store(Request $request)
    {
        $request->validate([
            'purchase_order_id' => 'required',
        ]);

        try{
            $order = PurchaseOrder::findOrFail($request->purchase_order_id);
            $order->is_closed = ($order->is_closed == 1 ? 0 : 1);
            $order->closing_remarks = $request->closing_remarks;
            $order->save();
            return $this->backWithSuccess("Purchase order has been ".($order->is_closed == 1 ? 'closed' : 're-opened')." successfully.");
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }
}
