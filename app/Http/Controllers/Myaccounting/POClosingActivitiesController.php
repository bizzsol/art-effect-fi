<?php
bolt_decrypt( __FILE__ , 'Bgd3vA'); return 0;
##!!!##