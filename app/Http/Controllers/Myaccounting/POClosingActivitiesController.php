<?php
bolt_decrypt( __FILE__ , 'LpS3OZ'); return 0;
##!!!##