<?php
bolt_decrypt( __FILE__ , 'cDqATS'); return 0;
##!!!##CgpuYW1lc3BhY2UgQXBwXEh0dHBcQ29udHJvbGxlcnNcTXlhY2NvdW50aW5nOwoKdXNlIEFwcFxIdHRwXENvbnRyb2xsZXJzXENvbnRyb2xsZXI7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xBY2NvdW50c1xBcHByb3ZhbExldmVsOwp1c2UgSWxsdW1pbmF0ZVxIdHRwXFJlcXVlc3Q7Cgp1c2UgREIsIERhdGFUYWJsZXM7CgpjbGFzcyBBcHByb3ZhbExldmVsQ29udHJvbGxlciBleHRlbmRzIENvbnRyb2xsZXIKewoKICAgIC8qKgogICAgICogU2V0IGdsb2JhbCBkYXRhIHRhYmxlIGhlYWRlcnMuCiAgICAgKgogICAgICogQHJldHVybiBoZWFkZXJDb2x1bW5zCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBoZWFkZXJDb2x1bW5zKCR2YWx1ZSA9ICcnKQogICAgewogICAgICAgIHJldHVybiBhcnJheSgKICAgICAgICAgICAgWydTTCcsICdTTCddLAogICAgICAgICAgICBbJ2NvZGUnLCAnY29kZScsICd0ZXh0LWNlbnRlciddLAogICAgICAgICAgICBbJ25hbWUnLCAnbmFtZScsICd0ZXh0LWNlbnRlciddLAogICAgICAgICAgICBbJ2FjdGlvbnMnLCAnYWN0aW9ucycsICd0ZXh0LWNlbnRlciddLAogICAgICAgICk7CiAgICB9CgogICAgLyoqCiAgICAgKiBEaXNwbGF5IGEgbGlzdGluZyBvZiB0aGUgcmVzb3VyY2UuCiAgICAgKgogICAgICogQHJldHVybiBcSWxsdW1pbmF0ZVxIdHRwXFJlc3BvbnNlCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBpbmRleCgpCiAgICB7CiAgICAgICAgdHJ5IHsKCiAgICAgICAgICAgIGlmIChyZXF1ZXN0KCktPmFqYXgoKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIERhdGF0YWJsZXM6Om9mKAogICAgICAgICAgICAgICAgICAgICAgICBBcHByb3ZhbExldmVsOjp3aGVuKCFkYXRhdGFibGVPcmRlcmluZygpLCBmdW5jdGlvbiAoJHF1ZXJ5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT5vcmRlcmJ5KCdpZCcsICdkZXNjJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIC0+YWRkSW5kZXhDb2x1bW4oKQogICAgICAgICAgICAgICAgICAgIC0+YWRkQ29sdW1uKCdhY3Rpb25zJywgZnVuY3Rpb24gKCRsZXZlbCl7CiAgICAgICAgICAgICAgICAgICAgICAgICRhY3Rpb25zID0gJyc7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXV0aCgpLT51c2VyKCktPmhhc1Blcm1pc3Npb25UbygnYXBwcm92YWwtbGV2ZWwtZWRpdCcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYWN0aW9ucyAuPSAnPGEgY2xhc3M9ImJ0biBidG4teHMgYnRuLXByaW1hcnkgbWwtMSIgaHJlZj0iJyAuIHVybCgnYWNjb3VudGluZy9hcHByb3ZhbC1sZXZlbHMvJyAuICRsZXZlbC0+aWQgLiAnL2VkaXQnKSAuICciPjxpIGNsYXNzPSJsYSBsYS1lZGl0Ij48L2k+PC9hPic7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdXRoKCktPnVzZXIoKS0+aGFzUGVybWlzc2lvblRvKCdhcHByb3ZhbC1sZXZlbC1kZWxldGUnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFjdGlvbnMgLj0gJzxhIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1kYW5nZXIgZGVsZXRlQnRuIG1sLTEiIG9uY2xpY2s9ImRlbGV0ZUZyb21DUlVEKCQodGhpcykpIiBkYXRhLXNyYz0iJyAuIHJvdXRlKCdhY2NvdW50aW5nLmFwcHJvdmFsLWxldmVscy5kZXN0cm95JywgJGxldmVsLT5pZCkgLiAnIj48aSBjbGFzcz0ibGEgbGEtdHJhc2giPjwvaT48L2E+JzsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGFjdGlvbnM7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPnJhd0NvbHVtbnMoWydhY3Rpb25zJ10pCiAgICAgICAgICAgICAgICAgICAgLT5tYWtlKHRydWUpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkZGF0YSA9IFsKICAgICAgICAgICAgICAgICd0aXRsZScgPT4gJ0xpc3Qgb2YgQXBwcm92YWwgTGV2ZWxzJywKICAgICAgICAgICAgICAgICdoZWFkZXJDb2x1bW5zJyA9PiAkdGhpcy0+aGVhZGVyQ29sdW1ucygpLAogICAgICAgICAgICBdOwogICAgICAgICAgICByZXR1cm4gdmlldygnYWNjb3VudGluZy5iYWNrZW5kLnBhZ2VzLmFwcHJvdmFsTGV2ZWxzLmluZGV4JywgJGRhdGEpOwogICAgICAgIH0gY2F0Y2ggKFxUaHJvd2FibGUgJHRoKSB7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+YmFja1dpdGhFcnJvcigkdGgtPmdldE1lc3NhZ2UoKSk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogU2hvdyB0aGUgZm9ybSBmb3IgY3JlYXRpbmcgYSBuZXcgcmVzb3VyY2UuCiAgICAgKgogICAgICogQHJldHVybiBcSWxsdW1pbmF0ZVxIdHRwXFJlc3BvbnNlCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBjcmVhdGUoKQogICAgewogICAgICAgICRkYXRhID0gWwogICAgICAgICAgICAndGl0bGUnID0+ICdOZXcgQXBwcm92YWwgTGV2ZWwnLAogICAgICAgICAgICAnY29kZScgPT4gdW5pcXVlQ29kZVdpdGhvdXRQcmVmaXgoMiwgJ2FwcHJvdmFsX2xldmVscycsICdjb2RlJykKICAgICAgICBdOwoKICAgICAgICByZXR1cm4gdmlldygnYWNjb3VudGluZy5iYWNrZW5kLnBhZ2VzLmFwcHJvdmFsTGV2ZWxzLmNyZWF0ZScsICRkYXRhKTsKICAgIH0KCiAgICAvKioKICAgICAqIFN0b3JlIGEgbmV3bHkgY3JlYXRlZCByZXNvdXJjZSBpbiBzdG9yYWdlLgogICAgICoKICAgICAqIEBwYXJhbSBcSWxsdW1pbmF0ZVxIdHRwXFJlcXVlc3QgJHJlcXVlc3QKICAgICAqIEByZXR1cm4gXElsbHVtaW5hdGVcSHR0cFxSZXNwb25zZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gc3RvcmUoUmVxdWVzdCAkcmVxdWVzdCkKICAgIHsKICAgICAgICAkcmVxdWVzdC0+dmFsaWRhdGUoWwogICAgICAgICAgICAnY29kZScgPT4gJ3JlcXVpcmVkfHVuaXF1ZTphcHByb3ZhbF9sZXZlbHMnLAogICAgICAgICAgICAnbmFtZScgPT4gJ3JlcXVpcmVkfHVuaXF1ZTphcHByb3ZhbF9sZXZlbHMnLAogICAgICAgIF0pOwoKICAgICAgICBEQjo6YmVnaW5UcmFuc2FjdGlvbigpOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIEFwcHJvdmFsTGV2ZWw6OmNyZWF0ZSgkcmVxdWVzdC0+YWxsKCkpOwoKICAgICAgICAgICAgREI6OmNvbW1pdCgpOwogICAgICAgICAgICByZXR1cm4gJHRoaXMtPnJlZGlyZWN0QmFja1dpdGhTdWNjZXNzKCJBcHByb3ZhbCBMZXZlbCBoYXMgYmVlbiBjcmVhdGVkIHN1Y2Nlc3NmdWxseSIsICdhY2NvdW50aW5nLmFwcHJvdmFsLWxldmVscy5pbmRleCcpOwogICAgICAgIH0gY2F0Y2ggKFxUaHJvd2FibGUgJHRoKSB7CiAgICAgICAgICAgIERCOjpyb2xsYmFjaygpOwogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmJhY2tXaXRoRXJyb3IoJHRoLT5nZXRNZXNzYWdlKCkpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIERpc3BsYXkgdGhlIHNwZWNpZmllZCByZXNvdXJjZS4KICAgICAqCiAgICAgKiBAcGFyYW0gaW50ICRpZAogICAgICogQHJldHVybiBcSWxsdW1pbmF0ZVxIdHRwXFJlc3BvbnNlCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBzaG93KCRpZCkKICAgIHsKICAgICAgIAogICAgfQoKICAgIC8qKgogICAgICogU2hvdyB0aGUgZm9ybSBmb3IgZWRpdGluZyB0aGUgc3BlY2lmaWVkIHJlc291cmNlLgogICAgICoKICAgICAqIEBwYXJhbSBpbnQgJGlkCiAgICAgKiBAcmV0dXJuIFxJbGx1bWluYXRlXEh0dHBcUmVzcG9uc2UKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGVkaXQoJGlkKQogICAgewogICAgICAgICRsZXZlbCA9IEFwcHJvdmFsTGV2ZWw6OmZpbmRPckZhaWwoJGlkKTsKICAgICAgICAkZGF0YSA9IFsKICAgICAgICAgICAgJ3RpdGxlJyA9PiAnQXBwcm92YWwgTGV2ZWwgRWRpdCAtICMnIC4gJGxldmVsLT5uYW1lLAogICAgICAgICAgICAnbGV2ZWwnID0+ICRsZXZlbAogICAgICAgIF07CgogICAgICAgIHJldHVybiB2aWV3KCdhY2NvdW50aW5nLmJhY2tlbmQucGFnZXMuYXBwcm92YWxMZXZlbHMuZWRpdCcsICRkYXRhKTsKICAgIH0KCiAgICAvKioKICAgICAqIFVwZGF0ZSB0aGUgc3BlY2lmaWVkIHJlc291cmNlIGluIHN0b3JhZ2UuCiAgICAgKgogICAgICogQHBhcmFtIFxJbGx1bWluYXRlXEh0dHBcUmVxdWVzdCAkcmVxdWVzdAogICAgICogQHBhcmFtIGludCAkaWQKICAgICAqIEByZXR1cm4gXElsbHVtaW5hdGVcSHR0cFxSZWRpcmVjdFJlc3BvbnNlCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiB1cGRhdGUoUmVxdWVzdCAkcmVxdWVzdCwgJGlkKQogICAgewogICAgICAgICRyZXF1ZXN0LT52YWxpZGF0ZShbCiAgICAgICAgICAgICdjb2RlJyA9PiAncmVxdWlyZWR8dW5pcXVlOmFwcHJvdmFsX2xldmVscyxjb2RlLCcgLiAkaWQsCiAgICAgICAgICAgICduYW1lJyA9PiAncmVxdWlyZWR8dW5pcXVlOmFwcHJvdmFsX2xldmVscyxuYW1lLCcgLiAkaWQsCiAgICAgICAgXSk7CgogICAgICAgIERCOjpiZWdpblRyYW5zYWN0aW9uKCk7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJGxldmVsID0gQXBwcm92YWxMZXZlbDo6ZmluZCgkaWQpOwogICAgICAgICAgICAkbGV2ZWwtPmZpbGwoJHJlcXVlc3QtPmFsbCgpKTsKICAgICAgICAgICAgJGxldmVsLT5zYXZlKCk7CgogICAgICAgICAgICBEQjo6Y29tbWl0KCk7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+cmVkaXJlY3RCYWNrV2l0aFN1Y2Nlc3MoIkFwcHJvdmFsIExldmVsIGhhcyBiZWVuIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5IiwgJ2FjY291bnRpbmcuYXBwcm92YWwtbGV2ZWxzLmluZGV4Jyk7CiAgICAgICAgfSBjYXRjaCAoXFRocm93YWJsZSAkdGgpIHsKICAgICAgICAgICAgREI6OnJvbGxiYWNrKCk7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+YmFja1dpdGhFcnJvcigkdGgtPmdldE1lc3NhZ2UoKSk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogUmVtb3ZlIHRoZSBzcGVjaWZpZWQgcmVzb3VyY2UgZnJvbSBzdG9yYWdlLgogICAgICoKICAgICAqIEBwYXJhbSBpbnQgJGlkCiAgICAgKiBAcmV0dXJuIFxJbGx1bWluYXRlXEh0dHBcSnNvblJlc3BvbnNlCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBkZXN0cm95KCRpZCkKICAgIHsKICAgICAgICBEQjo6YmVnaW5UcmFuc2FjdGlvbigpOwogICAgICAgIHRyeSB7CgogICAgICAgICAgICBBcHByb3ZhbExldmVsOjpmaW5kKCRpZCktPmRlbGV0ZSgpOwoKICAgICAgICAgICAgREI6OmNvbW1pdCgpOwogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbihbCiAgICAgICAgICAgICAgICAnc3VjY2VzcycgPT4gdHJ1ZSwKICAgICAgICAgICAgICAgICdtZXNzYWdlJyA9PiAiQXBwcm92YWwgTGV2ZWwgaGFzIGJlZW4gRGVsZXRlZCEiCiAgICAgICAgICAgIF0pOwogICAgICAgIH0gY2F0Y2ggKFxUaHJvd2FibGUgJHRoKSB7CiAgICAgICAgICAgIERCOjpyb2xsYmFjaygpOwogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbihbCiAgICAgICAgICAgICAgICAnc3VjY2VzcycgPT4gZmFsc2UsCiAgICAgICAgICAgICAgICAnbWVzc2FnZScgPT4gJHRoLT5nZXRNZXNzYWdlKCkKICAgICAgICAgICAgXSk7CiAgICAgICAgfQogICAgfQp9Cg==