<?php
bolt_decrypt( __FILE__ , 'sOY5kE'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting\SharedCostRatio;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use \App\Models\PmsModels\Accounts\Company;
use \App\Models\PmsModels\Accounts\CostCentre;
use \App\Models\PmsModels\Accounts\CostCentreAllocation;
use \App\Models\PmsModels\Accounts\CostCentreAllocationTarget;
use \App\Models\PmsModels\Accounts\SharedCostRatio;
use \App\Models\PmsModels\Accounts\SharedCostRatioEntry;
use \App\Models\PmsModels\Accounts\CurrencyType;
use \App\Models\PmsModels\Accounts\Entry;
use \App\Models\PmsModels\Accounts\EntryItem;
use \App\User;
use DB, DataTables;

class SharedCostRatiosController extends Controller
{
    public function headerColumns($value = '')
    {
        return array(
            ['SL', 'SL'],
            ['allocation_name', 'allocation_name', 'text-center'],
            ['allocation_company', 'allocation_company', 'text-center'],
            ['allocation_cost_centre', 'allocation_cost_centre', 'text-center'],
            ['allocation_chart_of_account', 'allocation_chart_of_account', 'text-center'],
            ['code', 'code', 'text-center'],
            ['description', 'description', 'text-center'],
            ['from', 'from', 'text-center'],
            ['to', 'to', 'text-center'],
            ['allocation', 'allocation', 'text-center'],
            ['balance', 'balance', 'text-center'],
            ['entries', 'entries', 'text-center'],
            ['creator', 'creator', 'text-center'],
        );
    }

    public function index()
    {
        try {
            if (request()->ajax()) {
                return DataTables::of(
                        SharedCostRatio::with([
                            'costCentreAllocation.costCentre.profitCentre.company',
                            'costCentreAllocation.chartOfAccount',
                            'entries.entry',
                            'creator'
                        ])
                    )
                    ->addIndexColumn()

                    ->addColumn('allocation_name', function ($ratio) {
                        return $ratio->costCentreAllocation->name;
                    })
                    ->filterColumn('allocation_name', function ($query, $keyword) {
                        return $query->whereHas('costCentreAllocation', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('allocation_name', function ($query, $order) {
                        return pleaseSortMe($query, $order, CostCentreAllocation::select('cost_centre_allocations.name')
                            ->whereColumn('cost_centre_allocations.id', 'shared_cost_ratios.cost_centre_allocation_id')
                            ->take(1)
                        );
                    })

                    ->addColumn('allocation_company', function ($ratio) {
                        return '['.$ratio->costCentreAllocation->costCentre->profitCentre->company->code.'] '.$ratio->costCentreAllocation->costCentre->profitCentre->company->name;
                    })
                    ->filterColumn('allocation_company', function ($query, $keyword) {
                        return $query->whereHas('costCentreAllocation.costCentre.profitCentre.company', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%')
                                  ->orWhere('code', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('allocation_company', function ($query, $order) {
                        return pleaseSortMe($query, $order, CostCentreAllocation::select('companies.code')
                            ->join('companies', 'companies.id', '=', 'profit_centres.company_id')
                            ->join('profit_centres', 'profit_centres.id', '=', 'cost_centres.profit_centre_id')
                            ->join('cost_centres', 'cost_centres.id', '=', 'cost_centre_allocations.cost_centre_id')
                            ->whereColumn('cost_centre_allocations.id', 'shared_cost_ratios.cost_centre_allocation_id')
                            ->take(1)
                        );
                    })

                    ->addColumn('allocation_cost_centre', function ($ratio) {
                        return '['.$ratio->costCentreAllocation->costCentre->code.'] '.$ratio->costCentreAllocation->costCentre->name;
                    })
                    ->filterColumn('allocation_cost_centre', function ($query, $keyword) {
                        return $query->whereHas('costCentreAllocation.costCentre', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%')
                                  ->orWhere('code', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('allocation_cost_centre', function ($query, $order) {
                        return pleaseSortMe($query, $order, CostCentreAllocation::select('cost_centres.code')
                            ->join('cost_centres', 'cost_centres.id', '=', 'cost_centre_allocations.cost_centre_id')
                            ->whereColumn('cost_centre_allocations.id', 'shared_cost_ratios.cost_centre_allocation_id')
                            ->take(1)
                        );
                    })

                    ->addColumn('allocation_chart_of_account', function ($ratio) {
                        return '['.$ratio->costCentreAllocation->chartOfAccount->code.'] '.$ratio->costCentreAllocation->chartOfAccount->name;
                    })
                    ->filterColumn('allocation_chart_of_account', function ($query, $keyword) {
                        return $query->whereHas('costCentreAllocation.chartOfAccount', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%')
                                  ->orWhere('code', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('allocation_chart_of_account', function ($query, $order) {
                        return pleaseSortMe($query, $order, CostCentreAllocation::select('chart_of_accounts.code')
                            ->join('chart_of_accounts', 'chart_of_accounts.id', '=', 'cost_centre_allocations.chart_of_account_id')
                            ->whereColumn('cost_centre_allocations.id', 'shared_cost_ratios.cost_centre_allocation_id')
                            ->take(1)
                        );
                    })

                    ->addColumn('entries', function ($ratio) {
                        return '<a href="'.url('accounting/shared-cost-ratios/'.$ratio->id).'">'.$ratio->entries->pluck('entry.code')->implode(', ').'</a>';
                    })
                    ->filterColumn('entries', function ($query, $keyword) {
                        return $query->whereHas('entries.entry', function ($query) use ($keyword) {
                            $query->where('code', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('entries', function ($query, $order) {
                        return pleaseSortMe($query, $order, SharedCostRatioEntry::select('entries.code')
                            ->join('entries', 'entries.id', '=', 'shared_cost_ratio_entries.entry_id')
                            ->whereColumn('shared_cost_ratio_entries.id', 'shared_cost_ratios.id')
                            ->take(1)
                        );
                    })

                    ->addColumn('creator', function ($ratio) {
                        return $ratio->creator ? $ratio->creator->name : '';
                    })
                    ->filterColumn('creator', function ($query, $keyword) {
                        return $query->whereHas('creator', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('creator', function ($query, $order) {
                        return pleaseSortMe($query, $order, User::select('users.name')
                            ->whereColumn('users.id', 'shared_cost_ratios.created_by')
                            ->take(1)
                        );
                    })

                    ->rawColumns(['entries'])
                    ->toJson();
            }

            return view('accounting.backend.pages.sharedCostRatio.sharedCostRatio.index', [
                'title' => 'Shared Cost Ratio',
                'headerColumns' => $this->headerColumns()
            ]);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function create()
    {
        $currency_id = request()->has('currency_id') ? request()->get('currency_id') : 1;
        $from = request()->has('from') ? request()->get('from') : date('Y-m-01');
        $to = request()->has('to') ? request()->get('to') : date('Y-m-d');
        
        $costCentreAllocation = CostCentreAllocation::with([
            'costCentre.profitCentre.company',
            'chartOfAccount',
            'targets.costCentre.profitCentre.company',
            'targets.chartOfAccount',
        ])->whereHas('costCentre.profitCentre.company.users', function($query){
            return $query->where('user_id', auth()->user()->id);
        })
        ->whereHas('chartOfAccount.users', function($query){
            return $query->where('user_id', auth()->user()->id);
        })->find(request()->get('cost_centre_allocation_id'));

        $debit = EntryItem::whereHas('entry.exchangeRate', function($query) use($currency_id){
            return $query->where('currency_id', $currency_id);
        })
        ->where([
            'cost_centre_id' => isset($costCentreAllocation->cost_centre_id) ? $costCentreAllocation->cost_centre_id : 0,
            'chart_of_account_id' => isset($costCentreAllocation->chart_of_account_id) ? $costCentreAllocation->chart_of_account_id : 0,
            'cost_allocated' => 0,
            'debit_credit' => 'D',
        ])
        ->whereHas('entry', function($query) use($from, $to){
            return $query->where('date', '>=', $from)
                         ->where('date', '<=', $to)
                         ->where('is_approved', 'approved');
        })->sum('amount');

        $credit = EntryItem::whereHas('entry.exchangeRate', function($query) use($currency_id){
            return $query->where('currency_id', $currency_id);
        })
        ->where([
            'cost_centre_id' => isset($costCentreAllocation->cost_centre_id) ? $costCentreAllocation->cost_centre_id : 0,
            'chart_of_account_id' => isset($costCentreAllocation->chart_of_account_id) ? $costCentreAllocation->chart_of_account_id : 0,
            'cost_allocated' => 0,
            'debit_credit' => 'C',
        ])
        ->whereHas('entry', function($query) use($from, $to){
            return $query->where('date', '>=', $from)
                         ->where('date', '<=', $to)
                         ->where('is_approved', 'approved');
        })->sum('amount');
        $balance = $debit-$credit;
        $balance = ($balance != 0 && $costCentreAllocation->allocation > 0 ? $balance*($costCentreAllocation->allocation/100) : 0);

        $data = [
            'title' => 'New Cost Ratio Share',
            'costCentreAllocations' => CostCentreAllocation::with([
                'costCentre.profitCentre.company',
                'chartOfAccount'
            ])->whereHas('costCentre.profitCentre.company.users', function($query){
                return $query->where('user_id', auth()->user()->id);
            })
            ->whereHas('chartOfAccount.users', function($query){
                return $query->where('user_id', auth()->user()->id);
            })->get(),
            'currencyTypes' => CurrencyType::with(['currencies'])->get(),
            'costCentreAllocation' => $costCentreAllocation,
            'currency_id' => $currency_id,
            'from' => $from,
            'to' => $to,
            'balance' => $balance
        ];

        return view('accounting.backend.pages.sharedCostRatio.sharedCostRatio.create', $data);
    }

    public function store(Request $request)
    {
        $request->validate([
            'cost_centre_allocation_id' => 'required',
            'currency_id' => 'required',
            'from' => 'required',
            'to' => 'required',
        ]);

        DB::beginTransaction();
        try{
            $costCentreAllocation = CostCentreAllocation::with([
                'costCentre.profitCentre.company',
                'chartOfAccount',
                'targets.costCentre.profitCentre.company',
                'targets.chartOfAccount',
            ])->whereHas('costCentre.profitCentre.company.users', function($query){
                return $query->where('user_id', auth()->user()->id);
            })
            ->whereHas('chartOfAccount.users', function($query){
                return $query->where('user_id', auth()->user()->id);
            })->find($request->cost_centre_allocation_id);

            $debit = EntryItem::whereHas('entry.exchangeRate', function($query) use($request){
                return $query->where('currency_id', $request->currency_id);
            })
            ->where([
                'cost_centre_id' => $costCentreAllocation->cost_centre_id,
                'chart_of_account_id' => $costCentreAllocation->chart_of_account_id,
                'cost_allocated' => 0,
                'debit_credit' => 'D',
            ])
            ->whereHas('entry', function($query) use($request){
                return $query->where('date', '>=', $request->from)
                             ->where('date', '<=', $request->to)
                             ->where('is_approved', 'approved');
            })->sum('amount');

            $credit = EntryItem::whereHas('entry.exchangeRate', function($query) use($request){
                return $query->where('currency_id', $request->currency_id);
            })
            ->where([
                'cost_centre_id' => $costCentreAllocation->cost_centre_id,
                'chart_of_account_id' => $costCentreAllocation->chart_of_account_id,
                'cost_allocated' => 0,
                'debit_credit' => 'C',
            ])
            ->whereHas('entry', function($query) use($request){
                return $query->where('date', '>=', $request->from)
                             ->where('date', '<=', $request->to)
                             ->where('is_approved', 'approved');
            })->sum('amount');
            $balance = $debit-$credit;
            $balance = ($balance != 0 && $costCentreAllocation->allocation > 0 ? $balance*($costCentreAllocation->allocation/100) : 0);

            $sharedCostRatio = SharedCostRatio::create([
                'cost_centre_allocation_id' => $costCentreAllocation->id,
                'code' => entryUniqueCode(15, 'SCR-'.date('ymd', strtotime(date('Y-m-d H:i:s'))).'-', 'shared_cost_ratios', 'code'),
                'description' => '',
                'from' => $request->from,
                'to' => $request->to,
                'allocation' => $costCentreAllocation->allocation,
                'balance' => $balance,
                'created_by' => auth()->user()->id,
            ]);

            $entries = [];
            if($costCentreAllocation->targets->count() > 0){
                foreach($costCentreAllocation->targets as $target){
                    $amount = $target->allocation > 0 && $balance != 0 ? $balance*($target->allocation/100) : 0;

                    $sourceItems = [];
                    array_push($sourceItems, [
                        'cost_centre_id' => $costCentreAllocation->cost_centre_id,
                        'chart_of_account_id' => $costCentreAllocation->chart_of_account_id,
                        'debit' => $amount < 0 ? $amount*(-1) : 0,
                        'credit' => $amount > 0 ? $amount : 0,
                        'amount' => ($amount < 0 ? $amount*(-1) : $amount),
                        'debit_credit' => ($amount < 0 ? 'D' : 'C'),
                        'narration' => 'Ledger '.($amount < 0 ? 'Debit' : 'Credit'),
                    ]);
                    array_push($sourceItems, [
                        'cost_centre_id' => $costCentreAllocation->cost_centre_id,
                        'chart_of_account_id' => $amount > 0 ? $costCentreAllocation->costCentre->profitCentre->company->intercompany_debit_ledger_id : $costCentreAllocation->costCentre->profitCentre->company->intercompany_credit_ledger_id,
                        'debit' => $amount > 0 ? $amount : 0,
                        'credit' => $amount < 0 ? $amount*(-1) : 0,
                        'amount' => ($amount > 0 ? $amount : $amount*(-1)),
                        'debit_credit' => ($amount > 0 ? 'D' : 'C'),
                        'narration' => 'Inter Company Ledger '.($amount > 0 ? 'Debit' : 'Credit'),
                    ]);

                    $destinationItems = [];
                    array_push($destinationItems, [
                        'cost_centre_id' => $target->cost_centre_id,
                        'chart_of_account_id' => $target->chart_of_account_id,
                        'debit' => $amount > 0 ? $amount : 0,
                        'credit' => $amount < 0 ? $amount*(-1) : 0,
                        'amount' => ($amount > 0 ? $amount*(-1) : $amount),
                        'debit_credit' => ($amount > 0 ? 'D' : 'C'),
                        'narration' => 'Ledger '.($amount > 0 ? 'Debit' : 'Credit'),
                    ]);
                    array_push($destinationItems, [
                        'cost_centre_id' => $target->cost_centre_id,
                        'chart_of_account_id' => $amount < 0 ? $target->costCentre->profitCentre->company->intercompany_debit_ledger_id : $target->costCentre->profitCentre->company->intercompany_credit_ledger_id,
                        'debit' => $amount < 0 ? $amount*(-1) : 0,
                        'credit' => $amount > 0 ? $amount : 0,
                        'amount' => ($amount < 0 ? $amount : $amount*(-1)),
                        'debit_credit' => ($amount < 0 ? 'D' : 'C'),
                        'narration' => 'Inter Company Ledger '.($amount < 0 ? 'Debit' : 'Credit'),
                    ]);

                    $same = $costCentreAllocation->costCentre->profitCentre->company_id == $target->costCentre->profitCentre->company_id;
                    $entry = saveLedgerEntries(5, date('Y-m-d H:i:s'), 1, $sharedCostRatio->code, '', $same ? array_merge($sourceItems, $destinationItems) : $sourceItems, getExchangeRates($request->currency_id, date('Y-m-d', strtotime(date('Y-m-d H:i:s'))), date('H:i:s', strtotime(date('Y-m-d H:i:s'))))['rate']->id, 1, false, 1, $costCentreAllocation->costCentre->profitCentre->company_id, getActiveFiscalYear($costCentreAllocation->costCentre->profitCentre->company_id));
                    if (isset($entry['success']) && $entry['success']) {
                        array_push($entries, [
                            'shared_cost_ratio_id' => $sharedCostRatio->id,
                            'entry_id' => $entry['entry']->id,
                        ]);

                        if(!$same){
                            $entry = saveLedgerEntries(5, date('Y-m-d H:i:s'), 1, $sharedCostRatio->code, '', $destinationItems, getExchangeRates($request->currency_id, date('Y-m-d', strtotime(date('Y-m-d H:i:s'))), date('H:i:s', strtotime(date('Y-m-d H:i:s'))))['rate']->id, 1, false, 1, $target->costCentre->profitCentre->company_id, getActiveFiscalYear($target->costCentre->profitCentre->company_id));
                            if (isset($entry['success']) && $entry['success']) {
                                array_push($entries, [
                                    'shared_cost_ratio_id' => $sharedCostRatio->id,
                                    'entry_id' => $entry['entry']->id,
                                ]);
                            }
                        }
                    }
                }
            }

            if(isset($entries[0])){
                SharedCostRatioEntry::insert($entries);
            }

            EntryItem::whereHas('entry.exchangeRate', function($query) use($request){
                return $query->where('currency_id', $request->currency_id);
            })
            ->where([
                'cost_centre_id' => $costCentreAllocation->cost_centre_id,
                'chart_of_account_id' => $costCentreAllocation->chart_of_account_id,
                'cost_allocated' => 0,
            ])
            ->whereHas('entry', function($query) use($request){
                return $query->where('date', '>=', $request->from)
                             ->where('date', '<=', $request->to)
                             ->where('is_approved', 'approved');
            })
            ->update([
                'cost_allocated' => 1
            ]);

            EntryItem::whereIn('entry_id', collect($entries)->pluck('entry_id')->toArray())->update([
                'cost_allocated' => 1
            ]);

            DB::commit();
            session()->flash('alert-type', "success");
            session()->flash('message', "Cost Ratio has been shared successfully.");
            return response()->json([
                'success' => true,
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function show($id)
    {
        $sharedCostRatio = SharedCostRatio::with([
            'costCentreAllocation.costCentre.profitCentre.company',
            'costCentreAllocation.targets.costCentre.profitCentre.company',
            'entries.entry.fiscalYear',
            'entries.entry.exchangeRate.currency',
            'entries.entry.items.chartOfAccount',
            'entries.entry.entryType',
            'entries.entry.items.costCentre.profitCentre.company',
            'entries.entry.approvals.approvalLevel',
            'creator'
        ])->findOrFail($id);

        return view('accounting.backend.pages.sharedCostRatio.sharedCostRatio.entries', [
            'title' => 'Shared Cost Ratio #'.$sharedCostRatio->code,
            'sharedCostRatio' => $sharedCostRatio,
            'approvals' => auth()->user()->approvals->pluck('approval_level_id')->toArray()
        ]);
    }
}
