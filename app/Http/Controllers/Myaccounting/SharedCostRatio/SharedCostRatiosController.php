<?php
bolt_decrypt( __FILE__ , 'ErrAJ7'); return 0;
##!!!##