<?php
bolt_decrypt( __FILE__ , 'VALQNi'); return 0;
##!!!##