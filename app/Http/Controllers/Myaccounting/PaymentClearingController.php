<?php
bolt_decrypt( __FILE__ , 'zBD0uR'); return 0;
##!!!##