<?php
bolt_decrypt( __FILE__ , 'DgCEjN'); return 0;
##!!!##