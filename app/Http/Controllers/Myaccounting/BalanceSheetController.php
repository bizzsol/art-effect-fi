<?php
bolt_decrypt( __FILE__ , 'mB40zU'); return 0;
##!!!##