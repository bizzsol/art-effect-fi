<?php
bolt_decrypt( __FILE__ , 'Z5PsNW'); return 0;
##!!!##