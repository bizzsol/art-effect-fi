<?php
bolt_decrypt( __FILE__ , 'nLRJ5W'); return 0;
##!!!##