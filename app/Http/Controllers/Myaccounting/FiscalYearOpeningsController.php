<?php
bolt_decrypt( __FILE__ , 'V3CKxh'); return 0;
##!!!##