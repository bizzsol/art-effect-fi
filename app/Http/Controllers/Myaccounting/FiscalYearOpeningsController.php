<?php
bolt_decrypt( __FILE__ , '86SCyn'); return 0;
##!!!##