<?php
bolt_decrypt( __FILE__ , 'ZKfWV3'); return 0;
##!!!##