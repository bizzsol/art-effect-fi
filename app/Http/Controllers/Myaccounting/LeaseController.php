<?php
bolt_decrypt( __FILE__ , 'YZDaCe'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App, DB, DataTables;

use \App\Models\PmsModels\Suppliers;

use \App\Models\PmsModels\Accounts\Currency;
use \App\Models\PmsModels\Accounts\ExchangeRate;
use \App\Models\PmsModels\Accounts\Company;
use \App\Models\PmsModels\Accounts\BankAccount;

use \App\Models\Lease\Lease;
use \App\Models\Lease\LeaseSchedule;
use \App\Models\Lease\LeaseDepreciation;
use \App\Models\Lease\LeaseEntry;

use \App\User;


class LeaseController extends Controller
{
    public function headerColumns($value = '')
    {
        return array(
            ['SL', 'SL'],
            ['lease_code', 'lease_code', 'text-center'],
            ['company', 'company', 'text-center'],
            ['cost_centre', 'cost_centre', 'text-center'],
            ['supplier', 'supplier', 'text-center'],
            ['amount', 'amount', 'text-center'],
            ['rate', 'rate', 'text-center'],
            ['installment_amount', 'installment_amount', 'text-center'],
            ['year', 'year', 'text-center'],
            ['created_by', 'created_by', 'text-center'],
            ['actions', 'actions', 'text-center']
        );
    }

    public function index()
    {
        try {
            if (request()->ajax()) {
                return DataTables::of(
                    Lease::with([
                        'costCentre.profitCentre.company',
                        'supplier',
                        'exchangeRate.currency',
                        'entries.entry.exchangeRate',
                        'entries.entry.entryType',
                        'schedules.entries.entry.exchangeRate',
                        'schedules.entries.entry.entryType',
                        'creator',
                        'editor'
                    ])
                    ->when(!datatableOrdering(), function ($query) {
                        return $query->orderby('id', 'desc');
                    })
                )
                ->addIndexColumn()

                ->addColumn('lease_code', function ($lease) {
                    return '<a class="text-primary" onclick="leaseDetails($(this))" data-id="' . ($lease->id) . '">'.$lease->code.'</a>';
                })
                ->filterColumn('lease_code', function ($query, $keyword) {
                    return $query->where('code', 'LIKE', '%' . $keyword . '%');
                })
                ->orderColumn('lease_code', function ($query, $order) {
                    return $query->orderBy('code', $order);
                })

                ->addColumn('company', function ($lease) {
                    return $lease->costCentre ? $lease->costCentre->profitCentre->company->code : '';
                })
                ->filterColumn('company', function ($query, $keyword) {
                    return $query->whereHas('costCentre.profitCentre.company', function ($query) use ($keyword) {
                        $query->where('code', 'LIKE', '%' . $keyword . '%');
                    });
                })
                ->orderColumn('company', function ($query, $order) {
                    return pleaseSortMe($query, $order, CostCentre::select('companies.code')
                        ->join('companies', 'companies.id', '=', 'profit_centres.company_id')
                        ->join('profit_centres', 'profit_centres.id', '=', 'cost_centres.profit_centre_id')
                        ->whereColumn('cost_centres.id', 'leases.cost_centre_id')
                        ->take(1)
                    );
                })

                ->addColumn('cost_centre', function ($lease) {
                    return $lease->costCentre ? '['.$lease->costCentre->code.'] '.$lease->costCentre->name : '';
                })
                ->filterColumn('cost_centre', function ($query, $keyword) {
                    return $query->whereHas('costCentre', function ($query) use ($keyword) {
                        $query->where('code', 'LIKE', '%' . $keyword . '%')
                              ->orWhere('name', 'LIKE', '%' . $keyword . '%');
                    });
                })
                ->orderColumn('cost_centre', function ($query, $order) {
                    return pleaseSortMe($query, $order, CostCentre::select('cost_centres.code')
                        ->whereColumn('cost_centres.id', 'leases.cost_centre_id')
                        ->take(1)
                    );
                })

                ->addColumn('supplier', function ($lease) {
                    return $lease->supplier ? $lease->supplier->name : '';
                })
                ->filterColumn('supplier', function ($query, $keyword) {
                    return $query->whereHas('supplier', function ($query) use ($keyword) {
                        $query->where('name', 'LIKE', '%' . $keyword . '%');
                    });
                })
                ->orderColumn('supplier', function ($query, $order) {
                    return pleaseSortMe($query, $order, Suppliers::select('suppliers.name')
                        ->whereColumn('suppliers.id', 'leases.supplier_id')
                        ->take(1)
                    );
                })

                ->editColumn('amount', function ($lease) {
                    $entry = $lease->entries->first()->entry;
                    return '<a class="text-primary" onclick="getShortDetails($(this))" data-id="' . ($entry->id) . '" data-entry-type="' . ($entry->entryType->name) . '" data-code="' . ($entry->code) . '">'.($lease->exchangeRate->currency->symbol.systemMoneyFormat($lease->amount)).'</a>';
                })
                ->editColumn('rate', function ($lease) {
                    return $lease->rate.'%';
                })
                ->editColumn('installment_amount', function ($lease) {
                    return $lease->exchangeRate->currency->symbol.systemMoneyFormat($lease->installment_amount);
                })

                ->editColumn('pay_interval', function ($lease) {
                    return ucwords($lease->pay_interval);
                })

                ->editColumn('created_by', function ($lease) {
                    return $lease->creator ? $lease->creator->name : '';
                })
                ->filterColumn('created_by', function ($query, $keyword) {
                    return $query->whereHas('creator', function ($query) use ($keyword) {
                        $query->where('name', 'LIKE', '%' . $keyword . '%');
                    });
                })
                ->orderColumn('created_by', function ($query, $order) {
                    return pleaseSortMe($query, $order, User::select('users.name')
                        ->whereColumn('users.id', 'leases.created_by')
                        ->take(1)
                    );
                })
                
                ->addColumn('actions', function ($lease) {
                    return view('accounting.backend.pages.leases.buttons', [
                        'lease' => $lease
                    ]);
                })

                ->rawColumns(['lease_code', 'amount', 'actions'])
                ->toJson();
            }

            return view('accounting.backend.pages.leases.index', [
                'title' => 'List of Leases',
                'headerColumns' => $this->headerColumns()
            ]);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function create()
    {
        if(request()->has('get-cost-centres')){
            return getCostCentres(true, request()->get('company_id'), true);
        }

        $data = [
            'title' => 'New Lease',
            'companies' => Company::has('profitCentres.costCentres')
            ->whereHas('users', function($query){
                return $query->where('user_id', auth()->user()->id);
            })
            ->get(),
            'suppliers' => Suppliers::where('status', 'Active')->get(),
            'currencies' => Currency::all(),
        ];

        return view('accounting.backend.pages.leases.create', $data);
    }

    public function store(Request $request)
    {
        $request->validate([
            'company_id' => 'required',
            'cost_centre_id' => 'required',
            'supplier_id' => 'required',
            'currency_id' => 'required',
            'contract_reference' => 'required',
            'amount' => 'required',
            'rate' => 'required',
            'year' => 'required',
            'start_date' => 'required',
            'pay_interval' => 'required',
        ]);

        DB::beginTransaction();
        try{
            $exchangeRate = getExchangeRates($request->currency_id, date('Y-m-d', strtotime($request->start_date)));
            
            $pmt = calculatePMT($request->amount, $request->rate, $request->year);
            
            $lease = Lease::create([
                'code' => entryUniqueCode(strlen('SSL')+10, 'SSL-L-'.date('y', strtotime($request->start_date)).'-', 'leases', 'code'),
                'cost_centre_id' => $request->cost_centre_id,
                'supplier_id' => $request->supplier_id,
                'exchange_rate_id' => $exchangeRate['rate']->id,
                'contract_id' => $request->contract_id,
                'contract_reference' => $request->contract_reference,
                'amount' => $request->amount,
                'rate' => $request->rate,
                'installment_amount' => $pmt['installment'],
                'total_payable_amount' => $pmt['total'],
                'year' => $request->year,
                'start_date' => $request->start_date,
                'pay_interval' => $request->pay_interval,
            ]);

            if($lease){
                $company = Company::findOrFail($request->company_id);
                $items = [];
                array_push($items, [
                    'cost_centre_id' => $request->cost_centre_id,
                    'chart_of_account_id' => $company->lease_asset_ledger_id,
                    'debit' => $lease->amount,
                    'credit' => 0,
                    'narration' => "Lease Asset Debit",
                    'type' => 'lease',
                    'source' => $lease->id
                ]);
                array_push($items, [
                    'cost_centre_id' => $request->cost_centre_id,
                    'chart_of_account_id' => $company->lease_liability_ledger_id,
                    'debit' => 0,
                    'credit' => $lease->amount,
                    'narration' => "Lease Liability Credit",
                    'type' => 'lease',
                    'source' => $lease->id
                ]);

                $entry = saveLedgerEntries(5, date('Y-m-d H:i:s', strtotime($lease->start_date)), 1, $lease->code, "Lease vendor: ".$lease->supplier->name.", Contract ID: ".$lease->contract_id.", Reference: ".$lease->contract_reference, $items, $lease->exchange_rate_id, 1, false, 1, $company->id);

                if (isset($entry['success']) && $entry['success']) {
                    LeaseEntry::create([
                        'lease_id' => $lease->id,
                        'entry_id' => $entry['entry']->id,
                        'log' => "lease-initiated",
                    ]);

                    $schedules = [];
                    $depreciations = [];

                    $balance = $request->amount;
                    $date = date('Y-m-01', strtotime($request->start_date.' '.leasePayIntervals()[$request->pay_interval]['interval']));
                    $sl = 0;
                    while($balance > 0){
                        $begin = $balance;
                        $interest = ($balance*($request->rate/100))/leasePayIntervals()[$request->pay_interval]['divisor'];
                        $principle = $pmt['installment']-$interest;
                        $balance = $begin-$principle;

                        $sl++;

                        array_push($schedules, [
                            'lease_id' => $lease->id,
                            'serial' => $sl,
                            'date' => $date,
                            'balance' => $begin,
                            'principle' => $principle,
                            'interest' => $interest,
                            'created_by' => auth()->user()->id
                        ]);

                        array_push($depreciations, [
                            'lease_id' => $lease->id,
                            'date' => $date,
                            'from' => date('Y-m-01', strtotime($date)),
                            'to' => date('Y-m-t', strtotime($date)),
                            'amount' => $lease->amount/($lease->year*12),
                            'status' => 'pending',
                            'created_by' => auth()->user()->id,
                        ]);

                        $date = date('Y-m-01', strtotime($date.' '.leasePayIntervals()[$request->pay_interval]['interval']));
                    }

                    LeaseSchedule::insert($schedules);
                    LeaseDepreciation::insert($depreciations);
                }else{
                    DB::rollback();
                    return response()->json([
                        'success' => false,
                        'message' => $entry['message']
                    ]);
                }
            }

            DB::commit();
            session()->flash('alert-type', 'success');
            session()->flash('message', "Lease has been Posted Successfully.");
            return response()->json([
                'success' => true,
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function show($id)
    {
        $lease = Lease::with([
            'costCentre.profitCentre.company',
            'supplier',
            'exchangeRate.currency',
            'entries.entry.exchangeRate',
            'schedules.entries.entry.exchangeRate',
            'depreciations',
            'creator',
            'editor'
        ])->findOrFail($id);
        $data = [
            'title' => 'Lease #'.$lease->code,
            'lease' => $lease
        ];

        if(request()->has('details')){
            return view('accounting.backend.pages.leases.lease-details', $data);
        }

        if(request()->has('pdf')){
            return downloadMPDF('accounting.backend.pages.leases.lease-pdf', $data, $data['title'], $data['title'], 'a4', 'L');
        }

        return view('accounting.backend.pages.leases.lease', $data);
    }

    public function edit($id)
    {
        $schedule = LeaseSchedule::with([
            'entries.entry.exchangeRate',
            'lease.costCentre.profitCentre.company',
            'lease.supplier',
            'lease.exchangeRate.currency',
            'lease.entries.entry.exchangeRate',
            'lease.creator',
            'lease.editor'
        ])->findOrFail($id);
        return view('accounting.backend.pages.leases.pay', [
            'schedule' => $schedule
        ]);
    }

    public function update(Request $request, $id)
    {
        if($request->has('post')){
            DB::beginTransaction();
            try{
                $accountDefaultSettings = accountDefaultSettings();
                $schedule = LeaseSchedule::with([
                    'lease.costCentre.profitCentre',
                    'lease.supplier',
                ])->findOrFail($id);
                $schedule->status = 'posted';
                $schedule->save();
                if($schedule){
                    $company = Company::findOrFail($schedule->lease->costCentre->profitCentre->company_id);
                    $items = [];
                    array_push($items, [
                        'cost_centre_id' => $schedule->lease->cost_centre_id,
                        'chart_of_account_id' => $company->lease_expense_ledger_id,
                        'debit' => $schedule->interest,
                        'credit' => 0,
                        'narration' => "Interest Expense Debit",
                        'type' => 'lease-schedule',
                        'source' => $schedule->id
                    ]);
                    array_push($items, [
                        'cost_centre_id' => $schedule->lease->cost_centre_id,
                        'chart_of_account_id' => $company->lease_liability_ledger_id,
                        'debit' => $schedule->principle,
                        'credit' => 0,
                        'narration' => "Lease Principle Liability Debit",
                        'type' => 'lease-schedule',
                        'source' => $schedule->id
                    ]);
                    array_push($items, [
                        'cost_centre_id' => $schedule->lease->cost_centre_id,
                        'chart_of_account_id' => (isset($schedule->lease->supplier->payable_account_id) && $schedule->lease->supplier->payable_account_id > 0 ? $schedule->lease->supplier->payable_account_id : $accountDefaultSettings['supplier_payable_account']),
                        'debit' => 0,
                        'credit' => $schedule->interest+$schedule->principle,
                        'narration' => "Payable to Leasor Vendor Credit",
                        'type' => 'lease-schedule',
                        'source' => $schedule->id
                    ]);

                    $entry = saveLedgerEntries(5, date('Y-m-d H:i:s', strtotime($schedule->date)), 1, $schedule->id, "Lease vendor: ".$schedule->lease->supplier->name.", Contract ID: ".$schedule->lease->contract_id.", Reference: ".$schedule->lease->contract_reference.", Installment: ".$schedule->serial, $items, $schedule->lease->exchange_rate_id, 1, false, 1, $company->id);

                    if (isset($entry['success']) && $entry['success']) {
                        LeaseEntry::create([
                            'lease_id' => $schedule->lease_id,
                            'lease_schedule_id' => $schedule->id,
                            'entry_id' => $entry['entry']->id,
                            'log' => "installment-posted",
                        ]);

                        session()->flash('alert-type', 'success');
                        session()->flash('message', "Installment has been Posted.");
                        DB::commit();
                        return response()->json([
                            'success' => true,
                        ]);
                    }

                    DB::rollback();
                    return response()->json([
                        'success' => false,
                        'message' => $entry['message']
                    ]);
                }

                return response()->json([
                    'success' => false,
                    'message' => "Something went wrong!"
                ]);
            }catch (\Throwable $th){
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'message' => $th->getMessage()
                ]);
            }
        }

        $request->validate([
            'datetime' => 'required',
        ]);

        if (in_array($request->payment_type, ['cheque', 'fund-transfer'])) {
            $request->validate([
                'payment_details' => 'required'
            ]);
        }

        DB::beginTransaction();
        try{
            $accountDefaultSettings = accountDefaultSettings();
            $schedule = LeaseSchedule::with([
                'lease.costCentre.profitCentre',
                'lease.supplier',
            ])->findOrFail($id);
            $schedule->status = 'paid';
            $schedule->save();
            if($schedule){
                $company = Company::findOrFail($schedule->lease->costCentre->profitCentre->company_id);
                $items = [];
                array_push($items, [
                    'cost_centre_id' => $schedule->lease->cost_centre_id,
                    'chart_of_account_id' => (isset($schedule->lease->supplier->payable_account_id) && $schedule->lease->supplier->payable_account_id > 0 ? $schedule->lease->supplier->payable_account_id : $accountDefaultSettings['supplier_payable_account']),
                    'debit' => $schedule->interest+$schedule->principle,
                    'credit' => 0,
                    'narration' => "Payable to Leasor Vendor Debit",
                    'type' => 'lease-schedule',
                    'source' => $schedule->id
                ]);

                $credit_note = "Cash";
                $credit_account = $request->chart_of_account_id;
                if ($request->payment_type == 'cash') {
                    $credit_account = $accountDefaultSettings['cash_in_hand_account'];
                } elseif ($request->payment_type == 'cheque' || $request->payment_type == 'fund-transfer') {
                    $bankAccount = BankAccount::find($request->bank_account_id);
                    if (isset($bankAccount->chart_of_account_id) && $bankAccount->chart_of_account_id > 0) {
                        $credit_account = $bankAccount->chart_of_account_id;
                        $credit_note = $bankAccount->bankBranch->bank->name;
                    } else {
                        $credit_account = $accountDefaultSettings['bank_account'];
                        $credit_note = "Bank";
                    }
                }

                array_push($items, [
                    'cost_centre_id' => $schedule->lease->cost_centre_id,
                    'chart_of_account_id' => $credit_account,
                    'debit' => 0,
                    'credit' => $schedule->interest+$schedule->principle,
                    'narration' => $credit_note." Credit",
                    'type' => 'lease-schedule',
                    'source' => $schedule->id
                ]);

                $entry = saveLedgerEntries(4, date('Y-m-d H:i:s', strtotime($request->datetime)), 1, $schedule->id, "Lease vendor: ".$schedule->lease->supplier->name.", Contract ID: ".$schedule->lease->contract_id.", Reference: ".$schedule->lease->contract_reference.", Installment: ".$schedule->serial, $items, $schedule->lease->exchange_rate_id, 1, false, 1, $company->id);

                if (isset($entry['success']) && $entry['success']) {
                    LeaseEntry::create([
                        'lease_id' => $schedule->lease_id,
                        'lease_schedule_id' => $schedule->id,
                        'entry_id' => $entry['entry']->id,
                        'log' => "installment-paid",
                    ]);

                    session()->flash('alert-type', 'success');
                    session()->flash('message', "Installment has been Paid.");
                    DB::commit();
                    return response()->json([
                        'success' => true,
                    ]);
                }

                DB::rollback();
                return response()->json([
                    'success' => false,
                    'message' => $entry['message']
                ]);
            }

            return response()->json([
                'success' => false,
                'message' => "Something went wrong!"
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }
}
