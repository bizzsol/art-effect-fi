<?php
bolt_decrypt( __FILE__ , '8O8Xiw'); return 0;
##!!!##