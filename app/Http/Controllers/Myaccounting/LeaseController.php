<?php
bolt_decrypt( __FILE__ , 'LXxEIA'); return 0;
##!!!##