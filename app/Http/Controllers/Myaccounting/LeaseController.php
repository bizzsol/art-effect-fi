<?php
bolt_decrypt( __FILE__ , 'HZMcs3'); return 0;
##!!!##