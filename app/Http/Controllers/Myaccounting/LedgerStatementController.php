<?php
bolt_decrypt( __FILE__ , '5q5wAm'); return 0;
##!!!##

namespace App\Http\Controllers\Myaccounting;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use \App\Models\PmsModels\Accounts\Company;
use \App\Models\PmsModels\Accounts\ProfitCentre;
use \App\Models\PmsModels\Accounts\CostCentre;
use \App\Models\PmsModels\Accounts\FiscalYear;
use \App\Models\PmsModels\Accounts\EntryType;
use \App\Models\PmsModels\Accounts\Tag;
use \App\Models\PmsModels\Accounts\ChartOfAccount;
use \App\Models\PmsModels\Accounts\SubLedger;
use \App\Models\PmsModels\Accounts\Entry;
use \App\Models\PmsModels\Accounts\EntryItem;

use \App\Models\PmsModels\Accounts\CurrencyType;
use \App\Models\PmsModels\Accounts\Currency;
use \App\Models\PmsModels\Accounts\ExchangeRate;
use \App\Models\PmsModels\Accounts\FiscalYearClosing;
use \App\Models\PmsModels\Accounts\FiscalYearClosingLedger;

use App,DB;
use Illuminate\Support\Facades\Auth;

class LedgerStatementController extends Controller
{
    public function index()
    {
        if(request()->has('get-coa')){
            return chartOfAccountsOptions([], request()->get('chart_of_account_id'), 0, getAllGroupAndLedgers(false, true));
        }

        $title = 'Report - Ledger Statement';

        $company_id = request()->has('company_id') ? request()->get('company_id') : 0;
        $profit_centre_id = request()->has('profit_centre_id') ? request()->get('profit_centre_id') : 0;
        $cost_centre_id = request()->has('cost_centre_id') ? request()->get('cost_centre_id') : 0;
        
        $chart_of_account_id = request()->has('chart_of_account_id') ? request()->get('chart_of_account_id') : [];
        $chart_of_account_id = is_array($chart_of_account_id) && isset($chart_of_account_id[0]) ? $chart_of_account_id : (!is_array($chart_of_account_id) && (int)($chart_of_account_id) > 0 ? [$chart_of_account_id] : []);
        $narration = request()->has('narration') ? request()->get('narration') : '';
        
        $sub_ledger_id = request()->has('sub_ledger_id') ? request()->get('sub_ledger_id') : [];
        $sub_ledger_id = is_array($sub_ledger_id) && isset($sub_ledger_id[0]) ? $sub_ledger_id : (!is_array($sub_ledger_id) && (int)($sub_ledger_id) > 0 ? [$sub_ledger_id] : []);

        $currency_id = request()->has('currency_id') ? request()->get('currency_id') : 0;
        $from = request()->has('from') ? request()->get('from') : date('Y-m-01');
        $to = request()->has('to') ? request()->get('to') : date('Y-m-t');
        $searchAccounts = ChartOfAccount::with([
            'accountGroup'
        ])
        ->whereIn('id', $chart_of_account_id)
        ->get();
        $entries = false;
        $opening_balance = 0;
        if(isset($chart_of_account_id[0])){
            $all = getAllGroupAndLedgers();
            $activeFiscalYear = getActiveFiscalYear($company_id);
            $systemCurrency = systemCurrency();

            $rate = 1;
            if($systemCurrency->id != $currency_id){
                $rates = getExchangeRates($systemCurrency->id);
                $rate = isset($rates['rates'][$currency_id]['rate']) ? $rates['rates'][$currency_id]['rate'] : 1;
            }

            $debitEntryItems = EntryItem::join('entries', 'entries.id', '=', 'entry_items.entry_id')
            ->join('cost_centres', 'cost_centres.id', '=', 'entry_items.cost_centre_id')
            ->join('profit_centres', 'profit_centres.id', '=', 'cost_centres.profit_centre_id')

            ->join('chart_of_accounts', 'chart_of_accounts.id', '=', 'entry_items.chart_of_account_id')
            ->join('account_groups', 'account_groups.id', '=', 'chart_of_accounts.account_group_id')

            ->where('entries.is_approved', 'approved')
            ->where('entries.date', '<=', date('Y-m-d', strtotime($from.' -1 days')))
            ->where('entries.fiscal_year_id', $activeFiscalYear->id)
            ->where('profit_centres.company_id', $company_id)

            ->when($profit_centre_id > 0, function($query) use($profit_centre_id){
                return $query->where('cost_centres.profit_centre_id', $profit_centre_id);
            })
            ->when($cost_centre_id > 0, function($query) use($cost_centre_id){
                return $query->where('entry_items.cost_centre_id', $cost_centre_id);
            })

            ->where('entry_items.debit_credit', 'D')

            ->groupBy('entry_items.chart_of_account_id')

            ->get([
                'entry_items.sub_ledger_id',
                'entry_items.chart_of_account_id',
                DB::raw('sum(entry_items.reporting_amount) as reporting_amount')
            ]);

            $creditEntryItems = EntryItem::join('entries', 'entries.id', '=', 'entry_items.entry_id')
            ->join('cost_centres', 'cost_centres.id', '=', 'entry_items.cost_centre_id')
            ->join('profit_centres', 'profit_centres.id', '=', 'cost_centres.profit_centre_id')

            ->join('chart_of_accounts', 'chart_of_accounts.id', '=', 'entry_items.chart_of_account_id')
            ->join('account_groups', 'account_groups.id', '=', 'chart_of_accounts.account_group_id')

            ->where('entries.is_approved', 'approved')
            ->where('entries.date', '<=', date('Y-m-d', strtotime($from.' -1 days')))
            ->where('entries.fiscal_year_id', $activeFiscalYear->id)
            ->where('profit_centres.company_id', $company_id)

            ->when($profit_centre_id > 0, function($query) use($profit_centre_id){
                return $query->where('cost_centres.profit_centre_id', $profit_centre_id);
            })
            ->when($cost_centre_id > 0, function($query) use($cost_centre_id){
                return $query->where('entry_items.cost_centre_id', $cost_centre_id);
            })

            ->where('entry_items.debit_credit', 'C')

            ->groupBy('entry_items.chart_of_account_id')

            ->get([
                'entry_items.sub_ledger_id',
                'entry_items.chart_of_account_id',
                DB::raw('sum(entry_items.reporting_amount) as reporting_amount')
            ]);

            $carryForwarded = FiscalYearClosingLedger::join('fiscal_year_closings', 'fiscal_year_closings.id', '=', 'fiscal_year_closing_ledgers.fiscal_year_closing_id')

            ->join('chart_of_accounts', 'chart_of_accounts.id', '=', 'fiscal_year_closing_ledgers.chart_of_account_id')
            ->join('account_groups', 'account_groups.id', '=', 'chart_of_accounts.account_group_id')
            
            ->where('fiscal_year_closings.company_id', $company_id)
            ->where('fiscal_year_closings.to_fiscal_year_id', $activeFiscalYear->id)
            
            ->groupBy('fiscal_year_closing_ledgers.chart_of_account_id')

            ->get([
                'fiscal_year_closing_ledgers.chart_of_account_id',
                DB::raw('sum(fiscal_year_closing_ledgers.carry_forwarding_amount) as carry_forwarding_amount')
            ]);

            $opening_balance = 0;
            if(isset($searchAccounts[0])){
                foreach ($searchAccounts as $key => $searchAccount) {
                    $opening_balance += ledgerClosingBalance($searchAccount->accountGroup, $searchAccount, ['D' => $debitEntryItems, 'C' => $creditEntryItems], $all, $carryForwarded, $rate, [], $sub_ledger_id)['balance'];
                }
            }
            
            $entries = Entry::with([
                'entryType',
                'items.chartOfAccount.accountGroup.accountClass',
                'items.subLedger',
                'exchangeRate.currency'
            ])
            ->whereHas('items.costCentre.profitCentre', function($query) use($company_id){
                return $query->where('company_id', $company_id);
            })
            ->where('is_approved', 'approved')
            ->whereBetween('date', [$from, $to])
            ->whereHas('items', function($query) use($searchAccounts){
                return $query->whereIn('chart_of_account_id', $searchAccounts->pluck('id')->toArray());
            })
            ->when(isset($sub_ledger_id[0]), function($query) use($sub_ledger_id){
                return $query->whereHas('items', function($query) use($sub_ledger_id){
                    return $query->whereIn('sub_ledger_id', $sub_ledger_id);
                });
            })
            ->when($profit_centre_id > 0, function($query) use($profit_centre_id){
                return $query->whereHas('items.costCentre', function($query) use($profit_centre_id){
                    return $query->where('profit_centre_id', $profit_centre_id);
                });
            })
            ->when($cost_centre_id > 0, function($query) use($cost_centre_id){
                return $query->whereHas('items', function($query) use($cost_centre_id){
                    return $query->where('cost_centre_id', $cost_centre_id);
                });
            })
            ->when(!empty($narration), function($query) use($narration){
                return $query->where(function($query) use($narration){
                    return $query->where('notes', 'LIKE', '%'.$narration.'%')
                                 ->orWhereHas('items', function($query) use($narration){
                                    return $query->where('narration', 'LIKE', '%'.$narration.'%');
                                 });
                });
            });

            if(request()->has('report_type') && in_array(request()->get('report_type'), ['pdf', 'excel'])){
                $entries = $entries->get();
            }else{
                $entries = $entries->paginate(100)->withQueryString();
            }
        }

        $companies = Company::has('profitCentres.costCentres')
        ->whereHas('users', function($query){
            return $query->where('user_id', auth()->user()->id);
        })
        ->get();

        try {
            $data = [
                'title' => $title,
                'searchAccounts' => $searchAccounts,
                'sub_ledger_id' => $sub_ledger_id,
                'subLedgers' => SubLedger::whereIn('id', $sub_ledger_id)->get(),
                'from' => $from,
                'to' => $to,
                'accountDefaultSettings' => accountDefaultSettings(),
                'opening_balance' => $opening_balance,
                'currency' => Currency::find($currency_id),
                'currencyTypes' => CurrencyType::with(['currencies'])->get(),
                'entries' => $entries,
                'companies' => $companies,
                'profitCentres' => ProfitCentre::where('company_id', $companies->first()->id)->orderBy('code', 'asc')->get(),
                'this_company' => $companies->where('id', $company_id)->first()
            ];

            if(request()->has('report_type') && request()->get('report_type') == 'pdf'){
                return viewMPDF('accounting.backend.pages.reports.ledgerStatements.pdf', $data, $title, $title, 'a3', 'L');
            }

            if(request()->has('report_type') && request()->get('report_type') == 'excel'){
                return downloadExcel('accounting.backend.pages.reports.ledgerStatements.excel', $data, $title);
            }

            if(request()->has('report_type') && request()->get('report_type') == 'report'){
                return view('accounting.backend.pages.reports.ledgerStatements.report', $data);
            }

            return view('accounting.backend.pages.reports.ledgerStatements.index', $data);
        }catch (\Throwable $th){
            if(request()->has('report_type') && request()->get('report_type') == 'report'){
                return $th->getMessage();
            }
            
            return $this->backWithError($th->getMessage());
        }
    }
}
