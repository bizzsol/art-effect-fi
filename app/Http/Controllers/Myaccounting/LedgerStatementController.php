<?php
bolt_decrypt( __FILE__ , 'nDWA2o'); return 0;
##!!!##